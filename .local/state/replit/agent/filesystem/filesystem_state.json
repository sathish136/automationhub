{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# AutomationHub - Industrial Site Monitoring System\n\n## Overview\n\nAutomationHub is a comprehensive industrial automation monitoring and management system built specifically for Beckhoff TwinCAT environments. The application provides real-time monitoring of automation sites, network equipment management, program backup capabilities, VFD parameter tracking, and secure credential management for industrial PCs. It features a modern web interface with a Node.js/Express backend and PostgreSQL database, designed to handle critical industrial infrastructure monitoring with uptime tracking, alerting, and reporting capabilities.\n\n## Recent Changes\n\n- **SQL Viewer Database-Level Sorting (August 2025)**: Implemented server-side sorting functionality that queries the entire database instead of sorting only loaded data. Backend now accepts sortColumn and sortDirection parameters, constructs SQL ORDER BY clauses with proper validation, and frontend sends sort requests to server. This enables sorting across complete datasets rather than limiting to visible rows.\n- **SQL Viewer S.No and Date Formatting (August 2025)**: Added serial number column (S.No) to all tables with 60px width, formatted date_time columns to DD/MM/YYYY HH:MM:SS format, changed \"date_time\" header to \"Date & Time\" with 150px width, and applied changes to both live data and demo data tables.\n- **SQL Viewer Table Layout Fix (August 2025)**: Fixed horizontal scrolling issue by implementing proper table container with overflow-x-auto, set minimum column widths (120px) with auto expansion, added whitespace-nowrap to prevent text wrapping, and removed problematic flex-1 layout. Table now displays within viewport bounds with contained horizontal scrolling when needed.\n- **SQL Viewer Enhanced Design (August 2025)**: Completed major redesign with frozen table headers, compact spacing, advanced filtering system, and improved data presentation. Removed scrolling in favor of auto-fit layout, implemented row limiting (25/50/100/200), enhanced search across all columns, and added column-specific filtering. Table now displays industrial data columns (date_time, rej_recovery, rej_feed, rej_1st_db, etc.) with professional alternating row design and full-width layout for maximum space utilization.\n- **Project Migration to Replit Completed (August 2025)**: Successfully migrated the industrial automation monitoring system from Replit Agent to standard Replit environment. Fixed package dependencies, updated workflows, and enhanced the SQL Viewer with professional design including advanced search, filtering, export functionality, and proper error handling for database connections.\n- **Network Equipment and Communication Systems Removed (December 2024)**: Completely removed network equipment management, communication interfaces, and instrument data functionality from the system. This included deleting database tables (networkEquipment, communicationInterfaces, instrumentData, communicationLogs), removing API endpoints, cleaning up frontend pages and navigation. The system now focuses on core industrial automation monitoring.\n- **PLC Tags Page Redesigned (August 2024)**: Completely redesigned PLC Tag Monitoring page to match IPC Management page style with proper font sizes, added bulk upload functionality for CSV data import, improved UI consistency with other management pages.\n- **Site Events Page Added (December 2024)**: Implemented comprehensive event management interface for viewing, filtering, and managing site alerts and system events with real-time updates and status management.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **Routing**: Wouter for client-side routing with single-page application architecture\n- **State Management**: TanStack Query (React Query) for server state management with caching and synchronization\n- **UI Framework**: Radix UI primitives with Tailwind CSS for styling and shadcn/ui component system\n- **Design System**: Custom design tokens with CSS variables for theming, supporting both light and dark modes\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **API Design**: RESTful API architecture with structured endpoints for sites, equipment, backups, and credentials\n- **File Uploads**: Multer middleware for handling program backup file uploads with 50MB size limits\n- **Monitoring**: Automated ping service using native system ping commands with cron scheduling\n- **Error Handling**: Centralized error handling middleware with structured error responses\n\n### Data Storage Solutions\n- **Primary Database**: PostgreSQL with Neon serverless hosting\n- **ORM**: Drizzle ORM for type-safe database operations and schema management\n- **Schema Management**: Migration-based database versioning with schema definitions in shared TypeScript files\n- **Connection Pooling**: Neon serverless connection pooling for optimal performance\n\n### Database Schema Design\n- **Sites**: Core entity tracking IP addresses, status, uptime metrics, and site metadata\n- **Uptime History**: Time-series data for historical monitoring and analytics\n- **Program Backups**: File metadata and storage for HMI/PLC program backups\n- **IPC Credentials**: Encrypted credential storage with bcrypt hashing\n- **VFD Parameters**: Variable frequency drive configuration and monitoring data\n- **PLC Tags**: PLC tag monitoring and historical data tracking\n- **Projects**: Project management and planning functionality\n- **Alerts**: Notification system with severity levels and acknowledgment tracking\n\n### Authentication and Authorization\n- **Password Security**: bcrypt for credential hashing with salt rounds\n- **Session Management**: Built-in Express session handling\n- **Access Control**: Role-based access patterns for different system components\n\n### Monitoring and Alerting\n- **Ping Monitoring**: Automated site connectivity monitoring with configurable intervals\n- **Status Tracking**: Real-time status updates for sites and equipment\n- **Alert System**: Multi-level alert system (critical, warning, info, success)\n- **Response Time Tracking**: Network latency monitoring and historical data\n- **Uptime Calculations**: Automated uptime percentage calculations with time-based aggregations\n\n### File Management\n- **Upload Handling**: Secure file upload system for program backups\n- **Storage**: Local file system storage with configurable upload directory\n- **File Validation**: Type and size validation for uploaded program files\n\n## External Dependencies\n\n### Database Services\n- **Neon Database**: Serverless PostgreSQL hosting with connection pooling\n- **Drizzle Kit**: Database migration and schema management tooling\n\n### UI and Component Libraries\n- **Radix UI**: Headless component primitives for accessibility and behavior\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Icon library for consistent iconography\n- **React Hook Form**: Form state management with validation\n- **Zod**: Schema validation for type-safe data handling\n\n### Backend Services\n- **Express.js**: Web framework for API routing and middleware\n- **Multer**: File upload middleware for handling multipart/form-data\n- **node-cron**: Scheduled task execution for monitoring services\n- **ws**: WebSocket library for Neon database connections\n\n### Development Tools\n- **Vite**: Build tool and development server with hot module replacement\n- **TypeScript**: Type safety and enhanced developer experience\n- **ESBuild**: Fast JavaScript bundling for production builds\n- **PostCSS**: CSS processing with Tailwind CSS integration\n\n### Monitoring and System Integration\n- **Native Ping**: System-level ping commands for network connectivity testing\n- **Process Management**: Child process spawning for system command execution\n- **Cron Scheduling**: Time-based job scheduling for automated monitoring tasks","size_bytes":8044},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"pulse-green\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n        \"blink\": {\n          \"0%, 100%\": {\n            opacity: \"1\",\n          },\n          \"50%\": {\n            opacity: \"0.5\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"pulse-green\": \"pulse-green 2s infinite\",\n        \"blink\": \"blink 1s infinite\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3155},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import \"./env\"; // Load environment variables first\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":534},"server/index.ts":{"content":"import \"./env\"; // Load environment variables first\n\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { adsMonitoringService } from \"./services/adsMonitoringService\";\nimport { storage } from \"./storage\";\nimport { sqlViewerService } from \"./services/sqlViewerService\";\nimport { pingService } from \"./services/pingService\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n// Test ADS Connection\napp.post('/api/test-ads-connection', async (req, res) => {\n  const { siteId, tagId } = req.body;\n  if (!siteId || !tagId) {\n    return res.status(400).json({ message: 'siteId and tagId are required' });\n  }\n  try {\n    // We need to fetch the full site and tag objects to pass to the service\n    const site = await storage.getSite(siteId);\n    const tag = await storage.getSiteDatabaseTag(tagId);\n\n    if (!site) {\n      return res.status(404).json({ message: 'Site not found' });\n    }\n    if (!tag) {\n      return res.status(404).json({ message: 'Tag not found' });\n    }\n\n    const result = await adsMonitoringService.testADSConnection(site, tag);\n    res.status(200).json(result);\n  } catch (error: any) {\n    console.error(`[API] Error testing ADS connection for site ${siteId}:`, error);\n    res.status(500).json({ success: false, error: error.message });\n  }\n});\n\n(async () => {\n  // Register all API routes and create the HTTP server\n  const httpServer = await registerRoutes(app);\n\n  // Error handling middleware\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n    res.status(status).json({ message });\n  });\n\n  // Setup Vite for development or serve static files for production\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, httpServer);\n  } else {\n    serveStatic(app);\n  }\n\n  // Define the port\n  const port = parseInt(process.env.PORT || '5000', 10);\n\n  // Start the server and initialize services\n  httpServer.listen(port, async () => {\n    log(`Server listening on http://localhost:${port}`);\n\n    // Test SQL Viewer Connection\n    try {\n      await sqlViewerService.testConnection();\n    } catch (error) {\n      console.error(\"[FATAL] Could not connect to the external SQL Server. The SQL Viewer will not be available.\");\n    }\n\n    // Initialize and start monitoring services\n    try {\n      const allSites = await storage.getAllSites();\n      const allTags = await storage.getSiteDatabaseTags();\n      console.log(`[INIT] Fetched ${allSites.length} sites and ${allTags.length} tags for monitoring.`);\n      adsMonitoringService.startMonitoringAllSites(allSites, allTags);\n    } catch (error) {\n      console.error(\"Failed to fetch initial data for monitoring:\", error);\n      process.exit(1); // Exit if we can't get monitoring data\n    }\n\n    pingService.startMonitoring();\n  });\n})();\n","size_bytes":3813},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { pingService } from \"./services/pingService\";\nimport { adsMonitoringService } from \"./services/adsMonitoringService\";\nimport { sqlViewerService } from \"./services/sqlViewerService\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs/promises\";\nimport { \n  insertSiteSchema, \n  insertIpcManagementSchema, \n  insertVfdParameterSchema, \n  insertProgramBackupSchema,\n  insertProjectSchema,\n  insertPlcTagSchema,\n  insertPlcTagHistorySchema,\n  insertSiteDatabaseTagSchema,\n  insertSiteDatabaseValueSchema,\n  insertMbrRealtimeDataSchema,\n  insertRoRealtimeDataSchema\n} from \"@shared/schema\";\n\n// Configure multer for file uploads\nconst upload = multer({\n  dest: \"uploads/\",\n  limits: {\n    fileSize: 50 * 1024 * 1024, // 50MB limit\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Start ping monitoring service\n  pingService.startMonitoring();\n\n  // Dashboard metrics\n  app.get(\"/api/dashboard/metrics\", async (req, res) => {\n    try {\n      const metrics = await storage.getDashboardMetrics();\n      res.json(metrics);\n    } catch (error) {\n      console.error(\"Error fetching dashboard metrics:\", error);\n      res.status(500).json({ message: \"Failed to fetch dashboard metrics\" });\n    }\n  });\n\n  // Projects endpoints\n  app.get(\"/api/projects\", async (req, res) => {\n    try {\n      const projects = await storage.getAllProjects();\n      res.json(projects);\n    } catch (error) {\n      console.error(\"Error fetching projects:\", error);\n      res.status(500).json({ message: \"Failed to fetch projects\" });\n    }\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const project = await storage.getProject(req.params.id);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error fetching project:\", error);\n      res.status(500).json({ message: \"Failed to fetch project\" });\n    }\n  });\n\n  app.post(\"/api/projects\", async (req, res) => {\n    try {\n      // Handle date string conversion before schema validation\n      const bodyData = { ...req.body };\n      if (bodyData.createdDate && typeof bodyData.createdDate === 'string') {\n        bodyData.createdDate = new Date(bodyData.createdDate);\n      }\n      if (bodyData.planStartDate && typeof bodyData.planStartDate === 'string') {\n        bodyData.planStartDate = new Date(bodyData.planStartDate);\n      }\n      \n      const projectData = insertProjectSchema.parse(bodyData);\n      const project = await storage.createProject(projectData);\n      res.status(201).json(project);\n    } catch (error) {\n      console.error(\"Error creating project:\", error);\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  app.put(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const projectData = insertProjectSchema.partial().parse(req.body);\n      const project = await storage.updateProject(req.params.id, projectData);\n      if (!project) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.json(project);\n    } catch (error) {\n      console.error(\"Error updating project:\", error);\n      res.status(400).json({ message: \"Invalid project data\" });\n    }\n  });\n\n  app.delete(\"/api/projects/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteProject(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Project not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting project:\", error);\n      res.status(500).json({ message: \"Failed to delete project\" });\n    }\n  });\n\n  // Sites endpoints\n  app.get(\"/api/sites\", async (req, res) => {\n    try {\n      const sites = await storage.getAllSites();\n      res.json(sites);\n    } catch (error) {\n      console.error(\"Error fetching sites:\", error);\n      res.status(500).json({ message: \"Failed to fetch sites\" });\n    }\n  });\n\n  app.get(\"/api/sites/:id\", async (req, res) => {\n    try {\n      const site = await storage.getSite(req.params.id);\n      if (!site) {\n        return res.status(404).json({ message: \"Site not found\" });\n      }\n      res.json(site);\n    } catch (error) {\n      console.error(\"Error fetching site:\", error);\n      res.status(500).json({ message: \"Failed to fetch site\" });\n    }\n  });\n\n  app.post(\"/api/sites\", async (req, res) => {\n    try {\n      const siteData = insertSiteSchema.parse(req.body);\n      const site = await storage.createSite(siteData);\n      res.status(201).json(site);\n    } catch (error) {\n      console.error(\"Error creating site:\", error);\n      res.status(400).json({ message: \"Invalid site data\" });\n    }\n  });\n\n  app.put(\"/api/sites/:id\", async (req, res) => {\n    try {\n      const siteData = insertSiteSchema.partial().parse(req.body);\n      const site = await storage.updateSite(req.params.id, siteData);\n      if (!site) {\n        return res.status(404).json({ message: \"Site not found\" });\n      }\n      res.json(site);\n    } catch (error) {\n      console.error(\"Error updating site:\", error);\n      res.status(400).json({ message: \"Invalid site data\" });\n    }\n  });\n\n  app.delete(\"/api/sites/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteSite(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Site not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting site:\", error);\n      res.status(500).json({ message: \"Failed to delete site\" });\n    }\n  });\n\n  // Sync sites from IPC management\n  app.post(\"/api/sites/sync-from-ipc\", async (req, res) => {\n    try {\n      const ipcDevices = await storage.getIpcManagement();\n      let existingSites = await storage.getAllSites();\n      \n      // Collect all valid IPs from IPC devices\n      const validIPs = new Set<string>();\n      for (const ipc of ipcDevices) {\n        if (ipc.vpnIp) validIPs.add(ipc.vpnIp);\n        if (ipc.lanIp) validIPs.add(ipc.lanIp);\n      }\n      \n      let created = 0;\n      let removed = 0;\n      \n      // Remove orphaned sites that no longer have corresponding IPC devices\n      for (const site of existingSites) {\n        if (!validIPs.has(site.ipAddress)) {\n          await storage.deleteSite(site.id);\n          removed++;\n          console.log(`Removed orphaned site: ${site.name} (${site.ipAddress})`);\n        }\n      }\n      \n      // Refresh existing sites after deletions\n      existingSites = await storage.getAllSites();\n      const existingIPs = new Set(existingSites.map(site => site.ipAddress));\n      \n      // Create new sites for IPC devices\n      for (const ipc of ipcDevices) {\n        // Create sites for VPN IPs\n        if (ipc.vpnIp && !existingIPs.has(ipc.vpnIp)) {\n          try {\n            await storage.createSite({\n              name: `${ipc.deviceName} (VPN)`,\n              description: `Monitoring ${ipc.deviceName} via VPN connection`,\n              ipAddress: ipc.vpnIp,\n              siteType: \"production\",\n              location: null,\n              isActive: true,\n            });\n            created++;\n            existingIPs.add(ipc.vpnIp);\n          } catch (error: any) {\n            // Skip if duplicate (might be created by another sync operation)\n            if (error.code !== '23505') {\n              throw error;\n            }\n            console.log(`Site with VPN IP ${ipc.vpnIp} already exists, skipping...`);\n          }\n        }\n        \n        // Create sites for LAN IPs\n        if (ipc.lanIp && !existingIPs.has(ipc.lanIp)) {\n          try {\n            await storage.createSite({\n              name: `${ipc.deviceName} (LAN)`,\n              description: `Monitoring ${ipc.deviceName} via LAN connection`,\n              ipAddress: ipc.lanIp,\n              siteType: \"production\", \n              location: null,\n              isActive: true,\n            });\n            created++;\n            existingIPs.add(ipc.lanIp);\n          } catch (error: any) {\n            // Skip if duplicate (might be created by another sync operation)\n            if (error.code !== '23505') {\n              throw error;\n            }\n            console.log(`Site with LAN IP ${ipc.lanIp} already exists, skipping...`);\n          }\n        }\n      }\n      \n      res.json({ created, removed, total: ipcDevices.length });\n    } catch (error) {\n      console.error(\"Error syncing sites from IPC:\", error);\n      res.status(500).json({ message: \"Failed to sync sites from IPC management\" });\n    }\n  });\n\n  // Ping endpoints\n  app.post(\"/api/sites/:id/ping\", async (req, res) => {\n    try {\n      const site = await storage.getSite(req.params.id);\n      if (!site) {\n        return res.status(404).json({ message: \"Site not found\" });\n      }\n      \n      await pingService.checkSiteStatus(site.id, site.ipAddress, site.name);\n      const updatedSite = await storage.getSite(req.params.id);\n      res.json(updatedSite);\n    } catch (error) {\n      console.error(\"Error pinging site:\", error);\n      res.status(500).json({ message: \"Failed to ping site\" });\n    }\n  });\n\n  app.post(\"/api/ping/all\", async (req, res) => {\n    try {\n      await pingService.checkAllSites();\n      res.json({ message: \"Ping check initiated for all sites\" });\n    } catch (error) {\n      console.error(\"Error pinging all sites:\", error);\n      res.status(500).json({ message: \"Failed to ping all sites\" });\n    }\n  });\n\n  // Uptime history\n  app.get(\"/api/sites/:id/uptime\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n      const history = await storage.getUptimeHistory(req.params.id, limit);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching uptime history:\", error);\n      res.status(500).json({ message: \"Failed to fetch uptime history\" });\n    }\n  });\n\n  app.get(\"/api/sites/:id/uptime/stats\", async (req, res) => {\n    try {\n      const hours = req.query.hours ? parseInt(req.query.hours as string) : 24;\n      const stats = await storage.getUptimeStats(req.params.id, hours);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching uptime stats:\", error);\n      res.status(500).json({ message: \"Failed to fetch uptime stats\" });\n    }\n  });\n\n  // Program backups\n  app.get(\"/api/backups\", async (req, res) => {\n    try {\n      const siteId = req.query.siteId as string;\n      const backups = await storage.getProgramBackups(siteId);\n      res.json(backups);\n    } catch (error) {\n      console.error(\"Error fetching backups:\", error);\n      res.status(500).json({ message: \"Failed to fetch backups\" });\n    }\n  });\n\n  app.post(\"/api/backups\", upload.single(\"file\"), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No file uploaded\" });\n      }\n\n      const backupData = insertProgramBackupSchema.parse({\n        ...req.body,\n        fileName: req.file.originalname,\n        filePath: req.file.path,\n        fileSize: req.file.size,\n      });\n\n      const backup = await storage.createProgramBackup(backupData);\n      res.status(201).json(backup);\n    } catch (error) {\n      console.error(\"Error creating backup:\", error);\n      res.status(400).json({ message: \"Invalid backup data\" });\n    }\n  });\n\n  app.delete(\"/api/backups/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteProgramBackup(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Backup not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting backup:\", error);\n      res.status(500).json({ message: \"Failed to delete backup\" });\n    }\n  });\n\n\n\n  // IPC management\n  app.get(\"/api/ipc-management\", async (req, res) => {\n    try {\n      const siteId = req.query.siteId as string;\n      const devices = await storage.getIpcManagement(siteId);\n      // Remove actual passwords from response for security\n      const safeDevices = devices.map(device => ({\n        ...device,\n        ipcPassword: device.ipcPassword ? \"****\" : undefined,\n        anydeskPassword: device.anydeskPassword ? \"****\" : undefined,\n      }));\n      res.json(safeDevices);\n    } catch (error) {\n      console.error(\"Error fetching IPC devices:\", error);\n      res.status(500).json({ message: \"Failed to fetch IPC devices\" });\n    }\n  });\n\n  app.post(\"/api/ipc-management\", async (req, res) => {\n    try {\n      const deviceData = insertIpcManagementSchema.parse(req.body);\n      const device = await storage.createIpcManagement(deviceData);\n      // Remove passwords from response\n      const safeDevice = { \n        ...device, \n        ipcPassword: device.ipcPassword ? \"****\" : undefined,\n        anydeskPassword: device.anydeskPassword ? \"****\" : undefined,\n      };\n      res.status(201).json(safeDevice);\n    } catch (error) {\n      console.error(\"Error creating IPC device:\", error);\n      res.status(400).json({ message: \"Invalid device data\" });\n    }\n  });\n\n  app.put(\"/api/ipc-management/:id\", async (req, res) => {\n    try {\n      const deviceData = insertIpcManagementSchema.partial().parse(req.body);\n      const device = await storage.updateIpcManagement(req.params.id, deviceData);\n      if (!device) {\n        return res.status(404).json({ message: \"Device not found\" });\n      }\n      // Remove passwords from response\n      const safeDevice = { \n        ...device, \n        ipcPassword: device.ipcPassword ? \"****\" : undefined,\n        anydeskPassword: device.anydeskPassword ? \"****\" : undefined,\n      };\n      res.json(safeDevice);\n    } catch (error) {\n      console.error(\"Error updating IPC device:\", error);\n      res.status(400).json({ message: \"Invalid device data\" });\n    }\n  });\n\n  app.delete(\"/api/ipc-management/:id\", async (req, res) => {\n    try {\n      // Get the IPC device details before deletion to know which IPs to clean up\n      const ipcDevices = await storage.getIpcManagement();\n      const deviceToDelete = ipcDevices.find(device => device.id === req.params.id);\n      \n      const success = await storage.deleteIpcManagement(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Device not found\" });\n      }\n      \n      // Clean up any monitoring sites that belong to this IPC device\n      if (deviceToDelete) {\n        const sitesToCleanup = [];\n        const allSites = await storage.getAllSites();\n        \n        for (const site of allSites) {\n          if ((deviceToDelete.vpnIp && site.ipAddress === deviceToDelete.vpnIp) ||\n              (deviceToDelete.lanIp && site.ipAddress === deviceToDelete.lanIp)) {\n            await storage.deleteSite(site.id);\n            sitesToCleanup.push(site.name);\n          }\n        }\n        \n        if (sitesToCleanup.length > 0) {\n          console.log(`Automatically removed ${sitesToCleanup.length} monitoring sites for deleted IPC device: ${sitesToCleanup.join(', ')}`);\n        }\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting IPC device:\", error);\n      res.status(500).json({ message: \"Failed to delete IPC device\" });\n    }\n  });\n\n  // VFD parameters\n  app.get(\"/api/vfd-parameters\", async (req, res) => {\n    try {\n      const siteId = req.query.siteId as string;\n      const parameters = await storage.getVfdParameters(siteId);\n      res.json(parameters);\n    } catch (error) {\n      console.error(\"Error fetching VFD parameters:\", error);\n      res.status(500).json({ message: \"Failed to fetch VFD parameters\" });\n    }\n  });\n\n  app.post(\"/api/vfd-parameters\", async (req, res) => {\n    try {\n      const parameterData = insertVfdParameterSchema.parse(req.body);\n      const parameter = await storage.createVfdParameter(parameterData);\n      res.status(201).json(parameter);\n    } catch (error) {\n      console.error(\"Error creating VFD parameter:\", error);\n      res.status(400).json({ message: \"Invalid parameter data\" });\n    }\n  });\n\n  app.put(\"/api/vfd-parameters/:id\", async (req, res) => {\n    try {\n      const parameterData = insertVfdParameterSchema.partial().parse(req.body);\n      const parameter = await storage.updateVfdParameter(req.params.id, parameterData);\n      if (!parameter) {\n        return res.status(404).json({ message: \"Parameter not found\" });\n      }\n      res.json(parameter);\n    } catch (error) {\n      console.error(\"Error updating VFD parameter:\", error);\n      res.status(400).json({ message: \"Invalid parameter data\" });\n    }\n  });\n\n  app.delete(\"/api/vfd-parameters/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteVfdParameter(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Parameter not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting VFD parameter:\", error);\n      res.status(500).json({ message: \"Failed to delete VFD parameter\" });\n    }\n  });\n\n\n\n\n\n  // Alerts\n  app.get(\"/api/alerts\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 50;\n      const alerts = await storage.getAlerts(limit);\n      res.json(alerts);\n    } catch (error) {\n      console.error(\"Error fetching alerts:\", error);\n      res.status(500).json({ message: \"Failed to fetch alerts\" });\n    }\n  });\n\n  app.put(\"/api/alerts/:id/read\", async (req, res) => {\n    try {\n      await storage.markAlertAsRead(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error marking alert as read:\", error);\n      res.status(500).json({ message: \"Failed to mark alert as read\" });\n    }\n  });\n\n  app.put(\"/api/alerts/:id/resolve\", async (req, res) => {\n    try {\n      await storage.markAlertAsResolved(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error marking alert as resolved:\", error);\n      res.status(500).json({ message: \"Failed to mark alert as resolved\" });\n    }\n  });\n\n  app.get(\"/api/alerts/unread-count\", async (req, res) => {\n    try {\n      const count = await storage.getUnreadAlertsCount();\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error fetching unread alerts count:\", error);\n      res.status(500).json({ message: \"Failed to fetch unread alerts count\" });\n    }\n  });\n\n  // PLC Tags\n  app.get(\"/api/plc-tags\", async (req, res) => {\n    try {\n      const siteId = req.query.siteId as string;\n      const tags = await storage.getPlcTags(siteId);\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching PLC tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch PLC tags\" });\n    }\n  });\n\n  app.get(\"/api/plc-tags/active\", async (req, res) => {\n    try {\n      const siteId = req.query.siteId as string;\n      const tags = await storage.getActivePlcTags(siteId);\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching active PLC tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch active PLC tags\" });\n    }\n  });\n\n  app.post(\"/api/plc-tags\", async (req, res) => {\n    try {\n      const result = insertPlcTagSchema.safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: result.error.errors \n        });\n      }\n\n      const tag = await storage.createPlcTag(result.data);\n      res.status(201).json(tag);\n    } catch (error) {\n      console.error(\"Error creating PLC tag:\", error);\n      res.status(500).json({ message: \"Failed to create PLC tag\" });\n    }\n  });\n\n  app.put(\"/api/plc-tags/:id\", async (req, res) => {\n    try {\n      const result = insertPlcTagSchema.partial().safeParse(req.body);\n      if (!result.success) {\n        return res.status(400).json({ \n          message: \"Validation failed\", \n          errors: result.error.errors \n        });\n      }\n\n      const tag = await storage.updatePlcTag(req.params.id, result.data);\n      if (!tag) {\n        return res.status(404).json({ message: \"PLC tag not found\" });\n      }\n      res.json(tag);\n    } catch (error) {\n      console.error(\"Error updating PLC tag:\", error);\n      res.status(500).json({ message: \"Failed to update PLC tag\" });\n    }\n  });\n\n  app.delete(\"/api/plc-tags/:id\", async (req, res) => {\n    try {\n      const deleted = await storage.deletePlcTag(req.params.id);\n      if (!deleted) {\n        return res.status(404).json({ message: \"PLC tag not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting PLC tag:\", error);\n      res.status(500).json({ message: \"Failed to delete PLC tag\" });\n    }\n  });\n\n  // Bulk upload PLC tags\n  app.post(\"/api/plc-tags/bulk\", async (req, res) => {\n    try {\n      const { siteId, tags } = req.body;\n      \n      if (!siteId || !Array.isArray(tags)) {\n        return res.status(400).json({ message: \"siteId and tags array are required\" });\n      }\n\n      // Validate each tag before bulk insert\n      const validatedTags = [];\n      for (const tag of tags) {\n        const tagWithDefaults = {\n          ...tag,\n          isActive: tag.isActive !== undefined ? tag.isActive : true,\n          alarmOnTrue: tag.alarmOnTrue !== undefined ? tag.alarmOnTrue : true,\n          alarmOnFalse: tag.alarmOnFalse !== undefined ? tag.alarmOnFalse : false,\n          severityLevel: tag.severityLevel || 'warning',\n          dataType: tag.dataType || 'BOOL'\n        };\n\n        const result = insertPlcTagSchema.omit({ siteId: true }).safeParse(tagWithDefaults);\n        if (!result.success) {\n          return res.status(400).json({ \n            message: \"Validation failed for tag: \" + tag.tagName, \n            errors: result.error.errors \n          });\n        }\n        validatedTags.push(result.data);\n      }\n\n      const createdTags = await storage.bulkCreatePlcTags(siteId, validatedTags);\n      res.status(201).json(createdTags);\n    } catch (error) {\n      console.error(\"Error bulk creating PLC tags:\", error);\n      res.status(500).json({ message: \"Failed to bulk create PLC tags\" });\n    }\n  });\n\n  // PLC Tag History\n  app.get(\"/api/plc-tags/:id/history\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n      const history = await storage.getPlcTagHistory(req.params.id, limit);\n      res.json(history);\n    } catch (error) {\n      console.error(\"Error fetching PLC tag history:\", error);\n      res.status(500).json({ message: \"Failed to fetch PLC tag history\" });\n    }\n  });\n\n  // PLC Tag Value Update (for manual testing)\n  app.put(\"/api/plc-tags/:id/value\", async (req, res) => {\n    try {\n      const { value, createHistory = true } = req.body;\n      if (typeof value !== 'string') {\n        return res.status(400).json({ message: \"Value must be a string\" });\n      }\n\n      await storage.updatePlcTagValue(req.params.id, value, createHistory);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error updating PLC tag value:\", error);\n      res.status(500).json({ message: \"Failed to update PLC tag value\" });\n    }\n  });\n\n  // Site Database Tags\n  app.get(\"/api/site-database-tags\", async (req, res) => {\n    try {\n      const siteId = req.query.siteId as string;\n      const tags = await storage.getSiteDatabaseTags(siteId);\n      res.json(tags);\n    } catch (error) {\n      console.error(\"Error fetching site database tags:\", error);\n      res.status(500).json({ message: \"Failed to fetch site database tags\" });\n    }\n  });\n\n  app.post(\"/api/site-database-tags\", async (req, res) => {\n    try {\n      console.log(\"[API] Received request to create new ADS tag.\");\n      const tagData = insertSiteDatabaseTagSchema.parse(req.body);\n      console.log(\"[API] Tag data parsed successfully.\", tagData);\n\n      // We don't need to validate here, as the monitoring service will log errors if it can't connect.\n      // This also simplifies the logic and avoids potential double-reads.\n\n      console.log(\"[API] Creating tag in database...\");\n      const tag = await storage.createSiteDatabaseTag(tagData);\n      console.log(\"[API] Tag created successfully in DB:\", tag);\n\n      // After creating the tag, start monitoring it immediately if it's active\n      if (tag.isActive) {\n        console.log(`[API] Tag '${tag.tagName}' is active. Attempting to start monitoring...`);\n        try {\n          adsMonitoringService.startMonitoringForTag(tag);\n          console.log(\"[API] Call to start monitoring completed.\");\n        } catch (monitorError) {\n          console.error(\"[API] CRITICAL: Error occurred while trying to start monitoring for the new tag:\", monitorError);\n          // Even if monitoring fails to start, we should still return the created tag.\n          // The error will be logged for debugging.\n        }\n      }\n\n      console.log(\"[API] Sending 201 response.\");\n      // Cleanse the object before sending: Drizzle can return BigInts or other non-serializable types.\n      const cleanTag = JSON.parse(JSON.stringify(tag));\n      res.status(201).json(cleanTag);\n    } catch (error) {\n      console.error(\"[API] CRITICAL: An unexpected error occurred in the create tag route handler:\", error);\n      // Check if it's a validation error from Zod\n      if (error instanceof (await import('zod')).ZodError) {\n        return res.status(400).json({ message: \"Invalid tag data\", errors: error.errors });\n      }\n      res.status(500).json({ message: \"An unexpected error occurred while creating the tag.\" });\n    }\n  });\n\n  app.put(\"/api/site-database-tags/:id\", async (req, res) => {\n    try {\n      const tagData = insertSiteDatabaseTagSchema.partial().parse(req.body);\n      const tag = await storage.updateSiteDatabaseTag(req.params.id, tagData);\n      if (!tag) {\n        return res.status(404).json({ message: \"Tag not found\" });\n      }\n      res.json(tag);\n    } catch (error) {\n      console.error(\"Error updating site database tag:\", error);\n      res.status(400).json({ message: \"Invalid tag data\" });\n    }\n  });\n\n  app.delete(\"/api/site-database-tags/:id\", async (req, res) => {\n    try {\n      const success = await storage.deleteSiteDatabaseTag(req.params.id);\n      if (!success) {\n        return res.status(404).json({ message: \"Tag not found\" });\n      }\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting site database tag:\", error);\n      res.status(500).json({ message: \"Failed to delete tag\" });\n    }\n  });\n\n  // Site Database Values\n  app.get(\"/api/site-database-values/:tagId\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n      const values = await storage.getSiteDatabaseValues(req.params.tagId, limit);\n      res.json(values);\n    } catch (error) {\n      console.error(\"Error fetching site database values:\", error);\n      res.status(500).json({ message: \"Failed to fetch values\" });\n    }\n  });\n\n  app.post(\"/api/site-database-values\", async (req, res) => {\n    try {\n      const valueData = insertSiteDatabaseValueSchema.parse(req.body);\n      const value = await storage.createSiteDatabaseValue(valueData);\n      res.status(201).json(value);\n    } catch (error) {\n      console.error(\"Error creating site database value:\", error);\n      res.status(400).json({ message: \"Invalid value data\" });\n    }\n  });\n\n  // Get latest values for all tags in a site\n  app.get(\"/api/sites/:siteId/database-values/latest\", async (req, res) => {\n    try {\n      const values = await storage.getLatestSiteDatabaseValues(req.params.siteId);\n      res.json(values);\n    } catch (error) {\n      console.error(\"Error fetching latest site database values:\", error);\n      res.status(500).json({ message: \"Failed to fetch latest values\" });\n    }\n  });\n\n  // Real-time MBR Data endpoints\n  app.get(\"/api/mbr-realtime-data\", async (req, res) => {\n    try {\n      const siteId = req.query.siteId as string;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n      const data = await storage.getMbrRealtimeData(siteId, limit);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching MBR realtime data:\", error);\n      res.status(500).json({ message: \"Failed to fetch MBR realtime data\" });\n    }\n  });\n\n  app.post(\"/api/mbr-realtime-data\", async (req, res) => {\n    try {\n      const dataToInsert = insertMbrRealtimeDataSchema.parse(req.body);\n      const data = await storage.createMbrRealtimeData(dataToInsert);\n      res.status(201).json(data);\n    } catch (error) {\n      console.error(\"Error creating MBR realtime data:\", error);\n      res.status(400).json({ message: \"Invalid MBR realtime data\" });\n    }\n  });\n\n  app.get(\"/api/sites/:id/mbr-realtime-data/latest\", async (req, res) => {\n    try {\n      const data = await storage.getLatestMbrRealtimeData(req.params.id);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching latest MBR realtime data:\", error);\n      res.status(500).json({ message: \"Failed to fetch latest MBR realtime data\" });\n    }\n  });\n\n  // Real-time RO Data endpoints\n  app.get(\"/api/ro-realtime-data\", async (req, res) => {\n    try {\n      const siteId = req.query.siteId as string;\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : 100;\n      const data = await storage.getRoRealtimeData(siteId, limit);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching RO realtime data:\", error);\n      res.status(500).json({ message: \"Failed to fetch RO realtime data\" });\n    }\n  });\n\n  app.post(\"/api/ro-realtime-data\", async (req, res) => {\n    try {\n      const dataToInsert = insertRoRealtimeDataSchema.parse(req.body);\n      const data = await storage.createRoRealtimeData(dataToInsert);\n      res.status(201).json(data);\n    } catch (error) {\n      console.error(\"Error creating RO realtime data:\", error);\n      res.status(400).json({ message: \"Invalid RO realtime data\" });\n    }\n  });\n\n  app.get(\"/api/sites/:id/ro-realtime-data/latest\", async (req, res) => {\n    try {\n      const data = await storage.getLatestRoRealtimeData(req.params.id);\n      res.json(data);\n    } catch (error) {\n      console.error(\"Error fetching latest RO realtime data:\", error);\n      res.status(500).json({ message: \"Failed to fetch latest RO realtime data\" });\n    }\n  });\n\n  // SQL Viewer Endpoints\n  app.get(\"/api/sql-viewer/databases\", async (req, res) => {\n    try {\n      const databases = await sqlViewerService.getDatabases();\n      res.json(databases);\n    } catch (error) {\n      console.error(\"Error fetching SQL databases:\", error);\n      res.status(500).json({ message: \"Failed to fetch SQL databases\" });\n    }\n  });\n\n  app.get(\"/api/sql-viewer/databases/:database/tables\", async (req, res) => {\n    try {\n      const tables = await sqlViewerService.getTables(req.params.database);\n      res.json(tables);\n    } catch (error) {\n      console.error(`Error fetching tables for database ${req.params.database}:`, error);\n      res.status(500).json({ message: \"Failed to fetch tables\" });\n    }\n  });\n\n  app.get(\"/api/sql-viewer/databases/:database/tables/:table\", async (req, res) => {\n    try {\n      const options = {\n        limit: req.query.limit ? parseInt(req.query.limit as string) : 100,\n        sortColumn: req.query.sortColumn as string,\n        sortDirection: req.query.sortDirection as 'asc' | 'desc'\n      };\n      \n      const data = await sqlViewerService.getTableData(req.params.database, req.params.table, options);\n      res.json(data);\n    } catch (error) {\n      console.error(`Error fetching data for table ${req.params.table}:`, error);\n      res.status(500).json({ message: \"Failed to fetch table data\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":31949},"server/storage.ts":{"content":"import {\n  sites,\n  uptimeHistory,\n  programBackups,\n  ipcManagement,\n  vfdParameters,\n  alerts,\n  projects,\n  plcTags,\n  plcTagHistory,\n  siteDatabaseTags,\n  siteDatabaseValues,\n  mbrRealtimeData,\n  roRealtimeData,\n  type Site,\n  type InsertSite,\n  type UptimeHistory,\n  type InsertUptimeHistory,\n  type ProgramBackup,\n  type InsertProgramBackup,\n  type IpcManagement,\n  type InsertIpcManagement,\n  type VfdParameter,\n  type InsertVfdParameter,\n  type Alert,\n  type InsertAlert,\n  type Project,\n  type InsertProject,\n  type PlcTag,\n  type InsertPlcTag,\n  type PlcTagHistory,\n  type InsertPlcTagHistory,\n  type SiteDatabaseTag,\n  type InsertSiteDatabaseTag,\n  type SiteDatabaseValue,\n  type InsertSiteDatabaseValue,\n  type MbrRealtimeData,\n  type InsertMbrRealtimeData,\n  type RoRealtimeData,\n  type InsertRoRealtimeData,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, gte, sql, count } from \"drizzle-orm\";\nimport bcrypt from \"bcrypt\";\n\nexport interface IStorage {\n  // Sites\n  getAllSites(): Promise<Site[]>;\n  getSite(id: string): Promise<Site | undefined>;\n  createSite(site: InsertSite): Promise<Site>;\n  updateSite(id: string, site: Partial<InsertSite>): Promise<Site | undefined>;\n  deleteSite(id: string): Promise<boolean>;\n  updateSiteStatus(id: string, status: string, responseTime?: number): Promise<void>;\n\n  // Uptime History\n  getUptimeHistory(siteId: string, limit?: number): Promise<UptimeHistory[]>;\n  addUptimeRecord(record: InsertUptimeHistory): Promise<UptimeHistory>;\n  getUptimeStats(siteId: string, hours: number): Promise<{ uptime: number; avgResponseTime: number }>;\n\n  // Program Backups\n  getProgramBackups(siteId?: string): Promise<ProgramBackup[]>;\n  createProgramBackup(backup: InsertProgramBackup): Promise<ProgramBackup>;\n  deleteProgramBackup(id: string): Promise<boolean>;\n\n  // IPC Credentials\n  getIpcManagement(siteId?: string): Promise<IpcManagement[]>;\n  createIpcManagement(device: InsertIpcManagement): Promise<IpcManagement>;\n  updateIpcManagement(id: string, device: Partial<InsertIpcManagement>): Promise<IpcManagement | undefined>;\n  deleteIpcManagement(id: string): Promise<boolean>;\n\n  // VFD Parameters\n  getVfdParameters(siteId?: string): Promise<VfdParameter[]>;\n  createVfdParameter(parameter: InsertVfdParameter): Promise<VfdParameter>;\n  updateVfdParameter(id: string, parameter: Partial<InsertVfdParameter>): Promise<VfdParameter | undefined>;\n  deleteVfdParameter(id: string): Promise<boolean>;\n\n  // Alerts\n  getAlerts(limit?: number): Promise<Alert[]>;\n  createAlert(alert: InsertAlert): Promise<Alert>;\n  markAlertAsRead(id: string): Promise<void>;\n  markAlertAsResolved(id: string): Promise<void>;\n\n  // PLC Tags\n  getAllPlcTags(): Promise<PlcTag[]>;\n  getPlcTagsBySite(siteId: string): Promise<PlcTag[]>;\n  createPlcTag(tag: InsertPlcTag): Promise<PlcTag>;\n  bulkCreatePlcTags(siteId: string, tags: Omit<InsertPlcTag, 'siteId'>[]): Promise<PlcTag[]>;\n  updatePlcTag(id: string, tag: Partial<InsertPlcTag>): Promise<PlcTag | undefined>;\n  deletePlcTag(id: string): Promise<boolean>;\n  updatePlcTagValue(id: string, value: string): Promise<void>;\n  createPlcTagAlert(tagId: string, value: string): Promise<void>;\n  getUnreadAlertsCount(): Promise<number>;\n\n  // PLC Tags\n  getPlcTags(siteId?: string): Promise<PlcTag[]>;\n  getActivePlcTags(siteId?: string): Promise<PlcTag[]>;\n  createPlcTag(tag: InsertPlcTag): Promise<PlcTag>;\n  updatePlcTag(id: string, tag: Partial<InsertPlcTag>): Promise<PlcTag | undefined>;\n  deletePlcTag(id: string): Promise<boolean>;\n  updatePlcTagValue(id: string, newValue: string, createHistory?: boolean): Promise<void>;\n  \n  // PLC Tag History\n  getPlcTagHistory(tagId: string, limit?: number): Promise<PlcTagHistory[]>;\n  createPlcTagHistory(history: InsertPlcTagHistory): Promise<PlcTagHistory>;\n\n  // Projects\n  getAllProjects(): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: Partial<InsertProject>): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  // Dashboard metrics\n  getDashboardMetrics(): Promise<{\n    totalSites: number;\n    onlineSites: number;\n    criticalAlerts: number;\n    avgResponseTime: number;\n  }>;\n\n  // Site Database Tags\n  getSiteDatabaseTags(siteId?: string): Promise<SiteDatabaseTag[]>;\n  getSiteDatabaseTag(id: string): Promise<SiteDatabaseTag | undefined>;\n  createSiteDatabaseTag(tag: InsertSiteDatabaseTag): Promise<SiteDatabaseTag>;\n  updateSiteDatabaseTag(id: string, tag: Partial<InsertSiteDatabaseTag>): Promise<SiteDatabaseTag | undefined>;\n  deleteSiteDatabaseTag(id: string): Promise<boolean>;\n\n  // Site Database Values \n  getSiteDatabaseValues(tagId: string, limit?: number): Promise<SiteDatabaseValue[]>;\n  createSiteDatabaseValue(value: InsertSiteDatabaseValue): Promise<SiteDatabaseValue>;\n  getLatestSiteDatabaseValues(siteId: string): Promise<Array<SiteDatabaseValue & { tag: SiteDatabaseTag }>>;\n\n  // Real-time MBR Data\n  getMbrRealtimeData(siteId?: string, limit?: number): Promise<MbrRealtimeData[]>;\n  createMbrRealtimeData(data: InsertMbrRealtimeData): Promise<MbrRealtimeData>;\n  getLatestMbrRealtimeData(siteId: string): Promise<MbrRealtimeData | undefined>;\n\n  // Real-time RO Data\n  getRoRealtimeData(siteId?: string, limit?: number): Promise<RoRealtimeData[]>;\n  createRoRealtimeData(data: InsertRoRealtimeData): Promise<RoRealtimeData>;\n  getLatestRoRealtimeData(siteId: string): Promise<RoRealtimeData | undefined>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Sites\n  async getAllSites(): Promise<Site[]> {\n    return await db.select().from(sites).where(eq(sites.isActive, true));\n  }\n\n  async getSite(id: string): Promise<Site | undefined> {\n    const [site] = await db.select().from(sites).where(eq(sites.id, id));\n    return site;\n  }\n\n  async createSite(site: InsertSite): Promise<Site> {\n    const [newSite] = await db.insert(sites).values(site).returning();\n    return newSite;\n  }\n\n  async updateSite(id: string, site: Partial<InsertSite>): Promise<Site | undefined> {\n    const [updatedSite] = await db\n      .update(sites)\n      .set({ ...site, updatedAt: new Date() })\n      .where(eq(sites.id, id))\n      .returning();\n    return updatedSite;\n  }\n\n  async deleteSite(id: string): Promise<boolean> {\n    const result = await db\n      .update(sites)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(sites.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async updateSiteStatus(id: string, status: string, responseTime?: number): Promise<void> {\n    const updateData: any = { \n      status, \n      lastCheck: new Date(),\n      updatedAt: new Date()\n    };\n    \n    if (responseTime !== undefined) {\n      updateData.responseTime = responseTime;\n    }\n    \n    if (status === \"online\") {\n      updateData.lastOnline = new Date();\n    }\n\n    await db.update(sites).set(updateData).where(eq(sites.id, id));\n  }\n\n  // Uptime History\n  async getUptimeHistory(siteId: string, limit = 100): Promise<UptimeHistory[]> {\n    return await db\n      .select()\n      .from(uptimeHistory)\n      .where(eq(uptimeHistory.siteId, siteId))\n      .orderBy(desc(uptimeHistory.timestamp))\n      .limit(limit);\n  }\n\n  async addUptimeRecord(record: InsertUptimeHistory): Promise<UptimeHistory> {\n    const [newRecord] = await db.insert(uptimeHistory).values(record).returning();\n    return newRecord;\n  }\n\n  async getUptimeStats(siteId: string, hours: number): Promise<{ uptime: number; avgResponseTime: number }> {\n    const hoursAgo = new Date(Date.now() - hours * 60 * 60 * 1000);\n    \n    const result = await db\n      .select({\n        totalRecords: count(),\n        onlineRecords: sql<number>`sum(case when ${uptimeHistory.isOnline} then 1 else 0 end)`,\n        avgResponseTime: sql<number>`avg(${uptimeHistory.responseTime})`,\n      })\n      .from(uptimeHistory)\n      .where(\n        and(\n          eq(uptimeHistory.siteId, siteId),\n          gte(uptimeHistory.timestamp, hoursAgo)\n        )\n      );\n\n    const stats = result[0];\n    const uptime = stats.totalRecords > 0 ? (stats.onlineRecords / stats.totalRecords) * 100 : 0;\n    const avgResponseTime = stats.avgResponseTime || 0;\n\n    return { uptime, avgResponseTime };\n  }\n\n  // Program Backups\n  async getProgramBackups(siteId?: string): Promise<ProgramBackup[]> {\n    const query = db.select().from(programBackups);\n    if (siteId) {\n      return await query.where(eq(programBackups.siteId, siteId));\n    }\n    return await query;\n  }\n\n  async createProgramBackup(backup: InsertProgramBackup): Promise<ProgramBackup> {\n    const [newBackup] = await db.insert(programBackups).values(backup).returning();\n    return newBackup;\n  }\n\n  async deleteProgramBackup(id: string): Promise<boolean> {\n    const result = await db.delete(programBackups).where(eq(programBackups.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n\n\n  // IPC Management\n  async getIpcManagement(siteId?: string): Promise<IpcManagement[]> {\n    const query = db.select().from(ipcManagement);\n    if (siteId) {\n      return await query.where(eq(ipcManagement.siteId, siteId));\n    }\n    return await query;\n  }\n\n  async createIpcManagement(device: InsertIpcManagement): Promise<IpcManagement> {\n    // Encrypt password before storing if provided\n    let processedDevice = { ...device };\n    if (device.ipcPassword) {\n      const hashedPassword = await bcrypt.hash(device.ipcPassword, 10);\n      processedDevice = {\n        ...device,\n        ipcPassword: hashedPassword,\n      };\n    }\n    \n    const [newDevice] = await db\n      .insert(ipcManagement)\n      .values(processedDevice)\n      .returning();\n    return newDevice;\n  }\n\n  async updateIpcManagement(id: string, device: Partial<InsertIpcManagement>): Promise<IpcManagement | undefined> {\n    const updateData = { ...device, updatedAt: new Date() };\n    \n    // Encrypt password if provided\n    if (device.ipcPassword) {\n      updateData.ipcPassword = await bcrypt.hash(device.ipcPassword, 10);\n    }\n\n    const [updatedDevice] = await db\n      .update(ipcManagement)\n      .set(updateData)\n      .where(eq(ipcManagement.id, id))\n      .returning();\n    return updatedDevice;\n  }\n\n  async deleteIpcManagement(id: string): Promise<boolean> {\n    const result = await db.delete(ipcManagement).where(eq(ipcManagement.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // VFD Parameters\n  async getVfdParameters(siteId?: string): Promise<VfdParameter[]> {\n    if (siteId) {\n      return await db\n        .select()\n        .from(vfdParameters)\n        .where(\n          and(\n            eq(vfdParameters.isActive, true),\n            eq(vfdParameters.siteId, siteId)\n          )\n        );\n    }\n    return await db\n      .select()\n      .from(vfdParameters)\n      .where(eq(vfdParameters.isActive, true));\n  }\n\n  async createVfdParameter(parameter: InsertVfdParameter): Promise<VfdParameter> {\n    const [newParameter] = await db.insert(vfdParameters).values(parameter).returning();\n    return newParameter;\n  }\n\n  async updateVfdParameter(id: string, parameter: Partial<InsertVfdParameter>): Promise<VfdParameter | undefined> {\n    const [updatedParameter] = await db\n      .update(vfdParameters)\n      .set({ ...parameter, updatedAt: new Date() })\n      .where(eq(vfdParameters.id, id))\n      .returning();\n    return updatedParameter;\n  }\n\n  async deleteVfdParameter(id: string): Promise<boolean> {\n    const result = await db\n      .update(vfdParameters)\n      .set({ isActive: false, updatedAt: new Date() })\n      .where(eq(vfdParameters.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n\n\n\n\n  // Alerts\n  async getAlerts(limit = 50): Promise<Alert[]> {\n    return await db\n      .select()\n      .from(alerts)\n      .orderBy(desc(alerts.createdAt))\n      .limit(limit);\n  }\n\n  async createAlert(alert: InsertAlert): Promise<Alert> {\n    const [newAlert] = await db.insert(alerts).values(alert).returning();\n    return newAlert;\n  }\n\n  async markAlertAsRead(id: string): Promise<void> {\n    await db\n      .update(alerts)\n      .set({ isRead: true })\n      .where(eq(alerts.id, id));\n  }\n\n  async markAlertAsResolved(id: string): Promise<void> {\n    await db\n      .update(alerts)\n      .set({ isResolved: true, resolvedAt: new Date() })\n      .where(eq(alerts.id, id));\n  }\n\n  async getUnreadAlertsCount(): Promise<number> {\n    const [result] = await db\n      .select({ count: count() })\n      .from(alerts)\n      .where(eq(alerts.isRead, false));\n    return result.count;\n  }\n\n  // Projects\n  async getAllProjects(): Promise<Project[]> {\n    return await db.select().from(projects).orderBy(desc(projects.createdAt));\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    const [project] = await db.select().from(projects).where(eq(projects.id, id));\n    return project;\n  }\n\n  async createProject(project: InsertProject): Promise<Project> {\n    const [newProject] = await db.insert(projects).values(project).returning();\n    return newProject;\n  }\n\n  async updateProject(id: string, project: Partial<InsertProject>): Promise<Project | undefined> {\n    const [updatedProject] = await db\n      .update(projects)\n      .set({ ...project, updatedAt: new Date() })\n      .where(eq(projects.id, id))\n      .returning();\n    return updatedProject;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    const result = await db.delete(projects).where(eq(projects.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Dashboard metrics\n  async getDashboardMetrics(): Promise<{\n    totalSites: number;\n    onlineSites: number;\n    criticalAlerts: number;\n    avgResponseTime: number;\n  }> {\n    const [siteStats] = await db\n      .select({\n        total: count(),\n        online: count(sql`CASE WHEN ${sites.status} = 'online' THEN 1 END`),\n        avgResponseTime: sql<number>`COALESCE(AVG(${sites.responseTime}), 0)`,\n      })\n      .from(sites)\n      .where(eq(sites.isActive, true));\n\n    const [alertStats] = await db\n      .select({\n        critical: count(sql`CASE WHEN ${alerts.severity} = 'critical' AND ${alerts.isResolved} = false THEN 1 END`),\n      })\n      .from(alerts);\n\n    return {\n      totalSites: siteStats.total,\n      onlineSites: siteStats.online,\n      criticalAlerts: alertStats.critical,\n      avgResponseTime: Math.round(siteStats.avgResponseTime),\n    };\n  }\n\n  // PLC Tags\n  async getAllPlcTags(): Promise<PlcTag[]> {\n    return await db.select().from(plcTags).orderBy(desc(plcTags.createdAt));\n  }\n\n  async getPlcTagsBySite(siteId: string): Promise<PlcTag[]> {\n    return await db.select().from(plcTags).where(eq(plcTags.siteId, siteId)).orderBy(desc(plcTags.createdAt));\n  }\n\n  async getPlcTags(siteId?: string): Promise<PlcTag[]> {\n    if (siteId) {\n      return await db.select().from(plcTags).where(eq(plcTags.siteId, siteId)).orderBy(desc(plcTags.createdAt));\n    }\n    return await db.select().from(plcTags).orderBy(desc(plcTags.createdAt));\n  }\n\n  async getActivePlcTags(siteId?: string): Promise<PlcTag[]> {\n    if (siteId) {\n      return await db.select().from(plcTags).where(and(eq(plcTags.siteId, siteId), eq(plcTags.isActive, true))).orderBy(desc(plcTags.createdAt));\n    }\n    return await db.select().from(plcTags).where(eq(plcTags.isActive, true)).orderBy(desc(plcTags.createdAt));\n  }\n\n  async createPlcTag(tag: InsertPlcTag): Promise<PlcTag> {\n    const [newTag] = await db.insert(plcTags).values(tag).returning();\n    return newTag;\n  }\n\n  async bulkCreatePlcTags(siteId: string, tags: Omit<InsertPlcTag, 'siteId'>[]): Promise<PlcTag[]> {\n    const tagsWithSiteId = tags.map(tag => ({ ...tag, siteId }));\n    const newTags = await db.insert(plcTags).values(tagsWithSiteId).returning();\n    return newTags;\n  }\n\n  async updatePlcTag(id: string, tag: Partial<InsertPlcTag>): Promise<PlcTag | undefined> {\n    const [updatedTag] = await db\n      .update(plcTags)\n      .set({ ...tag, updatedAt: new Date() })\n      .where(eq(plcTags.id, id))\n      .returning();\n    return updatedTag;\n  }\n\n  async deletePlcTag(id: string): Promise<boolean> {\n    const result = await db.delete(plcTags).where(eq(plcTags.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  async updatePlcTagValue(id: string, newValue: string, createHistory = true): Promise<void> {\n    if (createHistory) {\n      // Get current value first for history\n      const [currentTag] = await db.select().from(plcTags).where(eq(plcTags.id, id));\n      if (currentTag && currentTag.lastValue !== newValue) {\n        // Create history record\n        await db.insert(plcTagHistory).values({\n          tagId: id,\n          oldValue: currentTag.lastValue,\n          newValue: newValue,\n        });\n\n        // Check if we need to create an alert for this tag change\n        if (currentTag.alarmOnTrue && newValue.toLowerCase() === 'true') {\n          await this.createPlcTagAlert(id, newValue);\n        } else if (currentTag.alarmOnFalse && newValue.toLowerCase() === 'false') {\n          await this.createPlcTagAlert(id, newValue);\n        }\n      }\n    }\n    \n    // Update the tag value\n    await db\n      .update(plcTags)\n      .set({ \n        lastValue: newValue, \n        lastReadTime: new Date(),\n        updatedAt: new Date() \n      })\n      .where(eq(plcTags.id, id));\n  }\n\n  async createPlcTagAlert(tagId: string, value: string): Promise<void> {\n    // Get the tag details first\n    const [tag] = await db.select().from(plcTags).where(eq(plcTags.id, tagId));\n    if (!tag) return;\n\n    // Create an alert for this PLC tag event\n    await db.insert(alerts).values({\n      siteId: tag.siteId,\n      type: 'plc_tag_alarm',\n      severity: tag.severityLevel as 'info' | 'warning' | 'critical',\n      title: `${tag.tagName} Triggered`,\n      message: `PLC tag ${tag.tagName} (${tag.plcAddress}) changed to ${value}`,\n      isRead: false,\n      isResolved: false,\n    });\n  }\n\n  // PLC Tag History\n  async getPlcTagHistory(tagId: string, limit = 100): Promise<PlcTagHistory[]> {\n    return await db\n      .select()\n      .from(plcTagHistory)\n      .where(eq(plcTagHistory.tagId, tagId))\n      .orderBy(desc(plcTagHistory.timestamp))\n      .limit(limit);\n  }\n\n  async createPlcTagHistory(history: InsertPlcTagHistory): Promise<PlcTagHistory> {\n    const [newHistory] = await db.insert(plcTagHistory).values(history).returning();\n    return newHistory;\n  }\n\n  // Site Database Tags\n  async getSiteDatabaseTags(siteId?: string): Promise<SiteDatabaseTag[]> {\n    if (siteId) {\n      return await db.select().from(siteDatabaseTags).where(eq(siteDatabaseTags.siteId, siteId));\n    }\n    return await db.select().from(siteDatabaseTags);\n  }\n\n  async getSiteDatabaseTag(id: string): Promise<SiteDatabaseTag | undefined> {\n    const [tag] = await db.select().from(siteDatabaseTags).where(eq(siteDatabaseTags.id, id));\n    return tag;\n  }\n\n  async createSiteDatabaseTag(tag: InsertSiteDatabaseTag): Promise<SiteDatabaseTag> {\n    const [newTag] = await db.insert(siteDatabaseTags).values(tag).returning();\n    return newTag;\n  }\n\n  async updateSiteDatabaseTag(id: string, tag: Partial<InsertSiteDatabaseTag>): Promise<SiteDatabaseTag | undefined> {\n    const [updatedTag] = await db\n      .update(siteDatabaseTags)\n      .set({ ...tag, updatedAt: new Date() })\n      .where(eq(siteDatabaseTags.id, id))\n      .returning();\n    return updatedTag;\n  }\n\n  async deleteSiteDatabaseTag(id: string): Promise<boolean> {\n    const result = await db.delete(siteDatabaseTags).where(eq(siteDatabaseTags.id, id));\n    return result.rowCount ? result.rowCount > 0 : false;\n  }\n\n  // Site Database Values\n  async getSiteDatabaseValues(tagId: string, limit = 100): Promise<SiteDatabaseValue[]> {\n    return await db\n      .select()\n      .from(siteDatabaseValues)\n      .where(eq(siteDatabaseValues.tagId, tagId))\n      .orderBy(desc(siteDatabaseValues.timestamp))\n      .limit(limit);\n  }\n\n  async createSiteDatabaseValue(value: InsertSiteDatabaseValue): Promise<SiteDatabaseValue> {\n    const [newValue] = await db.insert(siteDatabaseValues).values(value).returning();\n    return newValue;\n  }\n\n  async getLatestSiteDatabaseValues(siteId: string): Promise<Array<SiteDatabaseValue & { tag: SiteDatabaseTag }>> {\n    // Get the latest value for each tag in a site\n    const result = await db\n      .select({\n        id: siteDatabaseValues.id,\n        tagId: siteDatabaseValues.tagId,\n        value: siteDatabaseValues.value,\n        quality: siteDatabaseValues.quality,\n        timestamp: siteDatabaseValues.timestamp,\n        tag: siteDatabaseTags,\n      })\n      .from(siteDatabaseValues)\n      .innerJoin(siteDatabaseTags, eq(siteDatabaseValues.tagId, siteDatabaseTags.id))\n      .where(eq(siteDatabaseTags.siteId, siteId))\n      .orderBy(desc(siteDatabaseValues.timestamp));\n\n    // Filter to get only the latest value for each tag\n    const latestValues = new Map();\n    result.forEach(row => {\n      if (!latestValues.has(row.tagId) || latestValues.get(row.tagId).timestamp < row.timestamp) {\n        latestValues.set(row.tagId, row);\n      }\n    });\n\n    return Array.from(latestValues.values());\n  }\n\n  // Real-time MBR Data methods\n  async getMbrRealtimeData(siteId?: string, limit = 100): Promise<MbrRealtimeData[]> {\n    const query = db.select().from(mbrRealtimeData);\n    \n    if (siteId) {\n      return await query\n        .where(eq(mbrRealtimeData.siteId, siteId))\n        .orderBy(desc(mbrRealtimeData.timestamp))\n        .limit(limit);\n    }\n    \n    return await query\n      .orderBy(desc(mbrRealtimeData.timestamp))\n      .limit(limit);\n  }\n\n  async createMbrRealtimeData(data: InsertMbrRealtimeData): Promise<MbrRealtimeData> {\n    const [newData] = await db.insert(mbrRealtimeData).values(data).returning();\n    return newData;\n  }\n\n  async getLatestMbrRealtimeData(siteId: string): Promise<MbrRealtimeData | undefined> {\n    const [latest] = await db\n      .select()\n      .from(mbrRealtimeData)\n      .where(eq(mbrRealtimeData.siteId, siteId))\n      .orderBy(desc(mbrRealtimeData.timestamp))\n      .limit(1);\n    return latest;\n  }\n\n  // Real-time RO Data methods\n  async getRoRealtimeData(siteId?: string, limit = 100): Promise<RoRealtimeData[]> {\n    const query = db.select().from(roRealtimeData);\n    \n    if (siteId) {\n      return await query\n        .where(eq(roRealtimeData.siteId, siteId))\n        .orderBy(desc(roRealtimeData.timestamp))\n        .limit(limit);\n    }\n    \n    return await query\n      .orderBy(desc(roRealtimeData.timestamp))\n      .limit(limit);\n  }\n\n  async createRoRealtimeData(data: InsertRoRealtimeData): Promise<RoRealtimeData> {\n    const [newData] = await db.insert(roRealtimeData).values(data).returning();\n    return newData;\n  }\n\n  async getLatestRoRealtimeData(siteId: string): Promise<RoRealtimeData | undefined> {\n    const [latest] = await db\n      .select()\n      .from(roRealtimeData)\n      .where(eq(roRealtimeData.siteId, siteId))\n      .orderBy(desc(roRealtimeData.timestamp))\n      .limit(1);\n    return latest;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":23119},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport {\n  pgTable,\n  varchar,\n  text,\n  timestamp,\n  boolean,\n  integer,\n  jsonb,\n  decimal,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Sites table\nexport const sites = pgTable(\"sites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  ipAddress: varchar(\"ip_address\", { length: 45 }).notNull().unique(),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"unknown\"), // online, offline, warning, unknown\n  responseTime: integer(\"response_time\"), // in milliseconds\n  uptime: decimal(\"uptime\", { precision: 5, scale: 2 }).default(\"0\"), // percentage\n  lastCheck: timestamp(\"last_check\"),\n  lastOnline: timestamp(\"last_online\"),\n  siteType: varchar(\"site_type\", { length: 50 }).default(\"production\"), // production, development, warehouse\n  location: varchar(\"location\", { length: 255 }),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_sites_status\").on(table.status),\n  index(\"idx_sites_ip\").on(table.ipAddress),\n]);\n\n// Uptime history for tracking historical data\nexport const uptimeHistory = pgTable(\"uptime_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: varchar(\"site_id\").notNull().references(() => sites.id, { onDelete: \"cascade\" }),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n  status: varchar(\"status\", { length: 20 }).notNull(),\n  responseTime: integer(\"response_time\"),\n  isOnline: boolean(\"is_online\").notNull(),\n}, (table) => [\n  index(\"idx_uptime_site_timestamp\").on(table.siteId, table.timestamp),\n]);\n\n// Program backups (HMI and PLC)\nexport const programBackups = pgTable(\"program_backups\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: varchar(\"site_id\").notNull().references(() => sites.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  type: varchar(\"type\", { length: 20 }).notNull(), // hmi, plc\n  version: varchar(\"version\", { length: 50 }),\n  fileName: varchar(\"file_name\", { length: 255 }).notNull(),\n  filePath: varchar(\"file_path\", { length: 500 }).notNull(),\n  fileSize: integer(\"file_size\"), // in bytes\n  checksum: varchar(\"checksum\", { length: 64 }),\n  platform: varchar(\"platform\", { length: 50 }).default(\"twincat\"), // twincat, other\n  createdAt: timestamp(\"created_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_backups_site\").on(table.siteId),\n  index(\"idx_backups_type\").on(table.type),\n]);\n\n\n// IPC management\nexport const ipcManagement = pgTable(\"ipc_management\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: varchar(\"site_id\").references(() => sites.id, { onDelete: \"cascade\" }),\n  \n  // Basic Details\n  deviceName: varchar(\"device_name\", { length: 255 }).notNull(),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"Active\"), // Active, Inactive, Maintenance, Offline\n  amsNetId: varchar(\"ams_net_id\", { length: 50 }).notNull(),\n  vpnIp: varchar(\"vpn_ip\", { length: 45 }),\n  lanIp: varchar(\"lan_ip\", { length: 45 }),\n  anydesk: varchar(\"anydesk\", { length: 100 }),\n  teamviewer: varchar(\"teamviewer\", { length: 100 }),\n  anydeskPassword: varchar(\"anydesk_password\", { length: 255 }),\n  namingSeries: varchar(\"naming_series\", { length: 100 }),\n  ipcUsername: varchar(\"ipc_username\", { length: 100 }),\n  ipcPassword: varchar(\"ipc_password\", { length: 255 }), // encrypted\n  comments: text(\"comments\"),\n\n  // Hardware Specs - IPC CPU\n  manufacture: varchar(\"manufacture\", { length: 100 }),\n  model: varchar(\"model\", { length: 100 }),\n  serialNo: varchar(\"serial_no\", { length: 100 }),\n  mainboard: varchar(\"mainboard\", { length: 100 }),\n  cpu: varchar(\"cpu\", { length: 100 }),\n  flash: varchar(\"flash\", { length: 100 }),\n  powerSupply: varchar(\"power_supply\", { length: 100 }),\n  memory: varchar(\"memory\", { length: 100 }),\n  mac1: varchar(\"mac1\", { length: 17 }),\n  mac2: varchar(\"mac2\", { length: 17 }),\n  operatingSystem: varchar(\"operating_system\", { length: 100 }),\n  imageVersion: varchar(\"image_version\", { length: 100 }),\n  serialNumberOfIpc: varchar(\"serial_number_of_ipc\", { length: 100 }),\n  deviceManagerVersion: varchar(\"device_manager_version\", { length: 100 }),\n\n  // Network 1\n  network1Name: varchar(\"network1_name\", { length: 100 }),\n  network1VirtualDevice: varchar(\"network1_virtual_device\", { length: 100 }),\n  network1Gateway: varchar(\"network1_gateway\", { length: 45 }),\n  network1Address: varchar(\"network1_address\", { length: 45 }),\n  network1Dhcp: varchar(\"network1_dhcp\", { length: 20 }),\n  network1SubnetMask: varchar(\"network1_subnet_mask\", { length: 45 }),\n  network1DnsServers: varchar(\"network1_dns_servers\", { length: 255 }),\n  network1MacAddress: varchar(\"network1_mac_address\", { length: 17 }),\n\n  // Network 2\n  network2Name: varchar(\"network2_name\", { length: 100 }),\n  network2VirtualDevice: varchar(\"network2_virtual_device\", { length: 100 }),\n  network2Gateway: varchar(\"network2_gateway\", { length: 45 }),\n  network2Address: varchar(\"network2_address\", { length: 45 }),\n  network2Dhcp: varchar(\"network2_dhcp\", { length: 20 }),\n  network2SubnetMask: varchar(\"network2_subnet_mask\", { length: 45 }),\n  network2DnsServers: varchar(\"network2_dns_servers\", { length: 255 }),\n  network2MacAddress: varchar(\"network2_mac_address\", { length: 17 }),\n\n  lastAccess: timestamp(\"last_access\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_ipc_site\").on(table.siteId),\n  index(\"idx_ipc_ams_net_id\").on(table.amsNetId),\n  index(\"idx_ipc_status\").on(table.status),\n  index(\"idx_ipc_device_name\").on(table.deviceName),\n]);\n\n// VFD parameters\nexport const vfdParameters = pgTable(\"vfd_parameters\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: varchar(\"site_id\").notNull().references(() => sites.id, { onDelete: \"cascade\" }),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  manufacturer: varchar(\"manufacturer\", { length: 100 }),\n  model: varchar(\"model\", { length: 100 }),\n  motorType: varchar(\"motor_type\", { length: 100 }),\n  frequency: decimal(\"frequency\", { precision: 6, scale: 2 }), // Hz\n  voltage: decimal(\"voltage\", { precision: 6, scale: 2 }), // V\n  current: decimal(\"current\", { precision: 6, scale: 2 }), // A\n  power: decimal(\"power\", { precision: 8, scale: 2 }), // W\n  rpm: integer(\"rpm\"),\n  loadPercentage: decimal(\"load_percentage\", { precision: 5, scale: 2 }),\n  parameters: jsonb(\"parameters\"), // custom parameter object\n  lastUpdate: timestamp(\"last_update\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_vfd_site\").on(table.siteId),\n  index(\"idx_vfd_active\").on(table.isActive),\n]);\n\n\n// Alerts and notifications\nexport const alerts = pgTable(\"alerts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: varchar(\"site_id\").references(() => sites.id, { onDelete: \"cascade\" }),\n  type: varchar(\"type\", { length: 50 }).notNull(), // site_offline, high_response_time, backup_completed, equipment_failure, communication_error, plc_tag_alarm, plc_tag_trip\n  severity: varchar(\"severity\", { length: 20 }).notNull().default(\"info\"), // critical, warning, info, success\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false),\n  isResolved: boolean(\"is_resolved\").default(false),\n  metadata: jsonb(\"metadata\"), // additional context data\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  resolvedAt: timestamp(\"resolved_at\"),\n}, (table) => [\n  index(\"idx_alerts_site\").on(table.siteId),\n  index(\"idx_alerts_type\").on(table.type),\n  index(\"idx_alerts_severity\").on(table.severity),\n  index(\"idx_alerts_created\").on(table.createdAt),\n]);\n\n// PLC Tags to monitor\nexport const plcTags = pgTable(\"plc_tags\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: varchar(\"site_id\").notNull().references(() => sites.id, { onDelete: \"cascade\" }),\n  tagName: varchar(\"tag_name\", { length: 255 }).notNull(),\n  plcAddress: varchar(\"plc_address\", { length: 500 }).notNull(), // e.g., \"GVL.M_HYPO_DOSING_PUMP_TRIP\"\n  description: text(\"description\"),\n  dataType: varchar(\"data_type\", { length: 50 }).notNull().default(\"BOOL\"), // BOOL, INT, REAL, STRING\n  isActive: boolean(\"is_active\").default(true),\n  alarmOnTrue: boolean(\"alarm_on_true\").default(true), // Create alarm when value becomes true\n  alarmOnFalse: boolean(\"alarm_on_false\").default(false), // Create alarm when value becomes false\n  severityLevel: varchar(\"severity_level\", { length: 20 }).default(\"warning\"), // critical, warning, info\n  lastValue: text(\"last_value\"), // Store as string for all data types\n  lastReadTime: timestamp(\"last_read_time\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_plc_tags_site\").on(table.siteId),\n  index(\"idx_plc_tags_active\").on(table.isActive),\n  index(\"idx_plc_tags_name\").on(table.tagName),\n]);\n\n// PLC Tag History for tracking value changes\nexport const plcTagHistory = pgTable(\"plc_tag_history\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tagId: varchar(\"tag_id\").notNull().references(() => plcTags.id, { onDelete: \"cascade\" }),\n  oldValue: text(\"old_value\"),\n  newValue: text(\"new_value\"),\n  timestamp: timestamp(\"timestamp\").notNull().defaultNow(),\n}, (table) => [\n  index(\"idx_plc_tag_history_tag\").on(table.tagId),\n  index(\"idx_plc_tag_history_timestamp\").on(table.timestamp),\n]);\n\n// Relations\nexport const sitesRelations = relations(sites, ({ many }) => ({\n  uptimeHistory: many(uptimeHistory),\n  programBackups: many(programBackups),\n  ipcManagement: many(ipcManagement),\n  vfdParameters: many(vfdParameters),\n  alerts: many(alerts),\n  plcTags: many(plcTags),\n}));\n\nexport const uptimeHistoryRelations = relations(uptimeHistory, ({ one }) => ({\n  site: one(sites, {\n    fields: [uptimeHistory.siteId],\n    references: [sites.id],\n  }),\n}));\n\nexport const programBackupsRelations = relations(programBackups, ({ one }) => ({\n  site: one(sites, {\n    fields: [programBackups.siteId],\n    references: [sites.id],\n  }),\n}));\n\nexport const ipcManagementRelations = relations(ipcManagement, ({ one }) => ({\n  site: one(sites, {\n    fields: [ipcManagement.siteId],\n    references: [sites.id],\n  }),\n}));\n\nexport const vfdParametersRelations = relations(vfdParameters, ({ one }) => ({\n  site: one(sites, {\n    fields: [vfdParameters.siteId],\n    references: [sites.id],\n  }),\n}));\n\nexport const alertsRelations = relations(alerts, ({ one }) => ({\n  site: one(sites, {\n    fields: [alerts.siteId],\n    references: [sites.id],\n  }),\n}));\n\nexport const plcTagsRelations = relations(plcTags, ({ one, many }) => ({\n  site: one(sites, {\n    fields: [plcTags.siteId],\n    references: [sites.id],\n  }),\n  history: many(plcTagHistory),\n}));\n\nexport const plcTagHistoryRelations = relations(plcTagHistory, ({ one }) => ({\n  tag: one(plcTags, {\n    fields: [plcTagHistory.tagId],\n    references: [plcTags.id],\n  }),\n}));\n\n// Projects table\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  projectNumber: varchar(\"project_number\", { length: 100 }).notNull().unique(),\n  projectName: varchar(\"project_name\", { length: 255 }).notNull(),\n  location: varchar(\"location\", { length: 255 }),\n  status: varchar(\"status\", { length: 50 }).notNull().default(\"Planning\"), // Planning, Active, In Progress, Completed\n  capacity: varchar(\"capacity\", { length: 100 }),\n  ipcName: varchar(\"ipc_name\", { length: 255 }),\n  selectedIpcId: varchar(\"selected_ipc_id\").references(() => ipcManagement.id),\n  selectedSystems: varchar(\"selected_systems\").array().default(sql`ARRAY[]::text[]`),\n  createdDate: timestamp(\"created_date\").defaultNow(),\n  planStartDate: timestamp(\"plan_start_date\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n}, (table) => [\n  index(\"idx_projects_number\").on(table.projectNumber),\n  index(\"idx_projects_status\").on(table.status),\n]);\n\nexport const projectsRelations = relations(projects, ({ one }) => ({\n  selectedIpc: one(ipcManagement, {\n    fields: [projects.selectedIpcId],\n    references: [ipcManagement.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertSiteSchema = createInsertSchema(sites).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUptimeHistorySchema = createInsertSchema(uptimeHistory).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertProgramBackupSchema = createInsertSchema(programBackups).omit({\n  id: true,\n  createdAt: true,\n});\n\n\n\nexport const insertIpcManagementSchema = createInsertSchema(ipcManagement).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n}).extend({\n  amsNetId: z.string().min(1, \"AMS Net ID is required\"),\n  deviceName: z.string().min(1, \"Device name is required\"),\n});\n\nexport const insertVfdParameterSchema = createInsertSchema(vfdParameters).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n\n\nexport const insertAlertSchema = createInsertSchema(alerts).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPlcTagSchema = createInsertSchema(plcTags).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  lastReadTime: true,\n});\n\nexport const insertPlcTagHistorySchema = createInsertSchema(plcTagHistory).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Types\nexport type Site = typeof sites.$inferSelect;\nexport type InsertSite = z.infer<typeof insertSiteSchema>;\nexport type UptimeHistory = typeof uptimeHistory.$inferSelect;\nexport type InsertUptimeHistory = z.infer<typeof insertUptimeHistorySchema>;\nexport type ProgramBackup = typeof programBackups.$inferSelect;\nexport type InsertProgramBackup = z.infer<typeof insertProgramBackupSchema>;\n\nexport type IpcManagement = typeof ipcManagement.$inferSelect;\nexport type InsertIpcManagement = z.infer<typeof insertIpcManagementSchema>;\nexport type VfdParameter = typeof vfdParameters.$inferSelect;\nexport type InsertVfdParameter = z.infer<typeof insertVfdParameterSchema>;\n\nexport type Alert = typeof alerts.$inferSelect;\nexport type InsertAlert = z.infer<typeof insertAlertSchema>;\nexport type Project = typeof projects.$inferSelect;\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type PlcTag = typeof plcTags.$inferSelect;\nexport type InsertPlcTag = z.infer<typeof insertPlcTagSchema>;\nexport type PlcTagHistory = typeof plcTagHistory.$inferSelect;\nexport type InsertPlcTagHistory = z.infer<typeof insertPlcTagHistorySchema>;\n\n// Site Database Tags (Real-time ADS monitoring)\nexport const siteDatabaseTags = pgTable(\"site_database_tags\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: text(\"site_id\").notNull().references(() => sites.id, { onDelete: \"cascade\" }),\n  tagName: text(\"tag_name\").notNull(),\n  adsPath: text(\"ads_path\").notNull(), // ADS symbol path\n  dataType: text(\"data_type\").notNull(), // BOOL, INT, DINT, REAL, STRING, etc.\n  description: text(\"description\"),\n  unit: text(\"unit\"), // e.g., \"°C\", \"bar\", \"rpm\"\n  isActive: boolean(\"is_active\").default(true).notNull(),\n  scanInterval: integer(\"scan_interval\").default(2000).notNull(), // milliseconds\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Site Database Values (Real-time data storage)\nexport const siteDatabaseValues = pgTable(\"site_database_values\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tagId: text(\"tag_id\").notNull().references(() => siteDatabaseTags.id, { onDelete: \"cascade\" }),\n  value: text(\"value\").notNull(),\n  quality: text(\"quality\").default(\"GOOD\").notNull(), // GOOD, BAD, UNCERTAIN\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\nexport const insertSiteDatabaseTagSchema = createInsertSchema(siteDatabaseTags).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSiteDatabaseValueSchema = createInsertSchema(siteDatabaseValues).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport type SiteDatabaseTag = typeof siteDatabaseTags.$inferSelect;\nexport type InsertSiteDatabaseTag = z.infer<typeof insertSiteDatabaseTagSchema>;\nexport type SiteDatabaseValue = typeof siteDatabaseValues.$inferSelect;\nexport type InsertSiteDatabaseValue = z.infer<typeof insertSiteDatabaseValueSchema>;\n\n// Real-time MBR Data Table (similar to sona1_reject_mbr from Python code)\nexport const mbrRealtimeData = pgTable(\"mbr_realtime_data\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: text(\"site_id\").notNull().references(() => sites.id, { onDelete: \"cascade\" }),\n  \n  // MBR Parameters\n  mbrTmp: decimal(\"mbr_tmp\", { precision: 8, scale: 2 }), // Temperature\n  mbrFlow: decimal(\"mbr_flow\", { precision: 8, scale: 2 }), // Flow rate\n  mbrTankLevel: decimal(\"mbr_tank_level\", { precision: 8, scale: 2 }), // Tank level\n  mbrRunningTimeHrs: decimal(\"mbr_running_time_hrs\", { precision: 8, scale: 2 }),\n  mbrRunningTimeMin: decimal(\"mbr_running_time_min\", { precision: 8, scale: 2 }),\n  mbrRunningTimeSec: decimal(\"mbr_running_time_sec\", { precision: 8, scale: 2 }),\n  mbrBackwashWithoutFlow: decimal(\"mbr_backwash_without_flow\", { precision: 8, scale: 2 }),\n  turbidity: decimal(\"turbidity\", { precision: 8, scale: 2 }),\n  mbrPh: decimal(\"mbr_ph\", { precision: 8, scale: 2 }),\n  ctsPh: decimal(\"cts_ph\", { precision: 8, scale: 2 }),\n  mbrPt: decimal(\"mbr_pt\", { precision: 8, scale: 2 }), // Pressure transmitter\n  backwashWithoutCount: decimal(\"backwash_without_count\", { precision: 8, scale: 2 }),\n  backwashWithDrainFlow: decimal(\"backwash_with_drain_flow\", { precision: 8, scale: 2 }),\n  mbrPermeate: decimal(\"mbr_permeate\", { precision: 8, scale: 2 }),\n  mbrNetValueDay: decimal(\"mbr_net_value_day\", { precision: 8, scale: 2 }),\n  netValue: decimal(\"net_value\", { precision: 8, scale: 2 }),\n  h2so4: decimal(\"h2so4\", { precision: 8, scale: 2 }),\n  energy: decimal(\"energy\", { precision: 8, scale: 2 }),\n  mbrPhTemp: decimal(\"mbr_ph_temp\", { precision: 8, scale: 2 }),\n  h2so4Temp: decimal(\"h2so4_temp\", { precision: 8, scale: 2 }),\n  \n  // Boolean status fields\n  h2so4Rf: boolean(\"h2so4_rf\"),\n  mbr1pumpRf: boolean(\"mbr1pump_rf\"),\n  mbr2pumpRf: boolean(\"mbr2pump_rf\"),\n  mbrRf: boolean(\"mbr_rf\"),\n  \n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_mbr_site_timestamp\").on(table.siteId, table.timestamp),\n]);\n\n// Real-time RO Data Table (similar to sona1_reject_ro from Python code)\nexport const roRealtimeData = pgTable(\"ro_realtime_data\", {\n  id: text(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  siteId: text(\"site_id\").notNull().references(() => sites.id, { onDelete: \"cascade\" }),\n  \n  // RO Parameters\n  feedFlow: decimal(\"feed_flow\", { precision: 8, scale: 2 }),\n  roRecovery: decimal(\"ro_recovery\", { precision: 8, scale: 2 }),\n  roFeedPh: decimal(\"ro_feed_ph\", { precision: 8, scale: 2 }),\n  roFeedLt: decimal(\"ro_feed_lt\", { precision: 8, scale: 2 }),\n  \n  // Stage 1 Parameters\n  stg1Per: decimal(\"stg1_per\", { precision: 8, scale: 2 }),\n  stg1Recovery: decimal(\"stg1_recovery\", { precision: 8, scale: 2 }),\n  stg1InPt: decimal(\"stg1_in_pt\", { precision: 8, scale: 2 }),\n  stg1OutPt: decimal(\"stg1_out_pt\", { precision: 8, scale: 2 }),\n  stg1Dp: decimal(\"stg1_dp\", { precision: 8, scale: 2 }),\n  \n  // Stage 2 Parameters\n  stg2Per: decimal(\"stg2_per\", { precision: 8, scale: 2 }),\n  stg2Recovery: decimal(\"stg2_recovery\", { precision: 8, scale: 2 }),\n  stg2InPt: decimal(\"stg2_in_pt\", { precision: 8, scale: 2 }),\n  stg2OutPt: decimal(\"stg2_out_pt\", { precision: 8, scale: 2 }),\n  stg2Dp: decimal(\"stg2_dp\", { precision: 8, scale: 2 }),\n  \n  // CAT Filter Parameters\n  roCatInPt: decimal(\"ro_cat_in_pt\", { precision: 8, scale: 2 }),\n  roCatOutPt: decimal(\"ro_cat_out_pt\", { precision: 8, scale: 2 }),\n  catDp: decimal(\"cat_dp\", { precision: 8, scale: 2 }),\n  \n  // Totals\n  roFeedOverall: decimal(\"ro_feed_overall\", { precision: 8, scale: 2 }),\n  stg1Overall: decimal(\"stg_1_overall\", { precision: 8, scale: 2 }),\n  stg2Overall: decimal(\"stg2_overall\", { precision: 8, scale: 2 }),\n  roFeedDay: decimal(\"ro_feed_day\", { precision: 8, scale: 2 }),\n  stg1Day: decimal(\"stg_1_day\", { precision: 8, scale: 2 }),\n  stg2Day: decimal(\"stg_2_day\", { precision: 8, scale: 2 }),\n  \n  // CIP Parameters\n  roCipFlow: decimal(\"ro_cip_flow\", { precision: 8, scale: 2 }),\n  roCipPt: decimal(\"ro_cip_pt\", { precision: 8, scale: 2 }),\n  roCipStg1Dp: decimal(\"ro_cip_stg1_dp\", { precision: 8, scale: 2 }),\n  roCipStg2Dp: decimal(\"ro_cip_stg2_dp\", { precision: 8, scale: 2 }),\n  roRawWaterFlow: decimal(\"ro_raw_water_flow\", { precision: 8, scale: 2 }),\n  \n  // Frequency data\n  hpp1Hz: decimal(\"hpp1_hz\", { precision: 8, scale: 2 }),\n  hpp2Hz: decimal(\"hpp2_hz\", { precision: 8, scale: 2 }),\n  \n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n}, (table) => [\n  index(\"idx_ro_site_timestamp\").on(table.siteId, table.timestamp),\n]);\n\n// Insert schemas for the new tables\nexport const insertMbrRealtimeDataSchema = createInsertSchema(mbrRealtimeData).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertRoRealtimeDataSchema = createInsertSchema(roRealtimeData).omit({\n  id: true,\n  timestamp: true,\n});\n\n// Types for the new tables\nexport type MbrRealtimeData = typeof mbrRealtimeData.$inferSelect;\nexport type InsertMbrRealtimeData = z.infer<typeof insertMbrRealtimeDataSchema>;\nexport type RoRealtimeData = typeof roRealtimeData.$inferSelect;\nexport type InsertRoRealtimeData = z.infer<typeof insertRoRealtimeDataSchema>;\n","size_bytes":22199},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport Sites from \"@/pages/sites\";\nimport SiteEvents from \"@/pages/site-events\";\nimport SiteDatabase from \"@/pages/site-database\";\nimport PlcTagManagement from \"@/pages/plc-tag-management\";\nimport Backups from \"@/pages/backups\";\nimport VFD from \"@/pages/vfd\";\nimport Reports from \"@/pages/reports\";\nimport ProjectDetails from \"@/pages/project-details\";\nimport Settings from \"@/pages/settings\";\nimport IPCDetails from \"@/pages/ipc-details\";\nimport SqlViewerPage from \"@/pages/sql-viewer\";\nimport NotFound from \"@/pages/not-found\";\nimport Sidebar from \"@/components/layout/sidebar\";\n\nfunction Router() {\n  return (\n    <div className=\"min-h-screen flex bg-background\">\n      <Sidebar />\n      <main className=\"flex-1 overflow-auto ml-64\">\n        <Switch>\n          <Route path=\"/\" component={Dashboard} />\n          <Route path=\"/sites\" component={Sites} />\n          <Route path=\"/site-events\" component={SiteEvents} />\n          <Route path=\"/site-database\" component={SiteDatabase} />\n          <Route path=\"/plc-tag-management\" component={PlcTagManagement} />\n          <Route path=\"/backups\" component={Backups} />\n          <Route path=\"/vfd\" component={VFD} />\n          <Route path=\"/reports\" component={Reports} />\n          <Route path=\"/project-details\" component={ProjectDetails} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/ipc-management\" component={IPCDetails} />\n          <Route path=\"/sql-viewer\" component={SqlViewerPage} />\n          <Route component={NotFound} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2096},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  /* Light placeholder text colors */\n  input::placeholder,\n  textarea::placeholder {\n    color: rgb(156 163 175 / 0.5) !important; /* Very light gray-400 */\n    opacity: 1;\n  }\n  \n  /* Dark mode placeholder colors */\n  .dark input::placeholder,\n  .dark textarea::placeholder {\n    color: rgb(107 114 128 / 0.4) !important; /* Very light gray-500 for dark mode */\n    opacity: 1;\n  }\n}\n\n:root {\n  --background: hsl(250, 20%, 98%);\n  --foreground: hsl(210, 25%, 7%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(210, 25%, 7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(210, 25%, 7%);\n  --primary: hsl(203, 88%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(210, 25%, 7%);\n  --secondary-foreground: hsl(0, 0%, 100%);\n  --muted: hsl(240, 2%, 90%);\n  --muted-foreground: hsl(210, 25%, 7%);\n  --accent: hsl(212, 51%, 93%);\n  --accent-foreground: hsl(203, 88%, 53%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(201, 30%, 91%);\n  --input: hsl(200, 23%, 97%);\n  --ring: hsl(203, 89%, 53%);\n  --chart-1: hsl(203, 88%, 53%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(210, 25%, 7%);\n  --sidebar-primary: hsl(203, 88%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(212, 51%, 93%);\n  --sidebar-accent-foreground: hsl(203, 88%, 53%);\n  --sidebar-border: hsl(205, 25%, 91%);\n  --sidebar-ring: hsl(203, 89%, 53%);\n  --font-sans: \"Inter\", \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 1px 2px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 1px 2px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 2px 4px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 4px 6px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 8px 10px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 7%, 91%);\n  --card: hsl(228, 10%, 10%);\n  --card-foreground: hsl(0, 0%, 85%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 7%, 91%);\n  --primary: hsl(204, 88%, 53%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195, 15%, 95%);\n  --secondary-foreground: hsl(210, 25%, 7%);\n  --muted: hsl(0, 0%, 9%);\n  --muted-foreground: hsl(210, 3%, 46%);\n  --accent: hsl(206, 70%, 8%);\n  --accent-foreground: hsl(204, 88%, 53%);\n  --destructive: hsl(356, 91%, 54%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5%, 15%);\n  --input: hsl(208, 28%, 18%);\n  --ring: hsl(203, 89%, 53%);\n  --chart-1: hsl(203, 88%, 53%);\n  --chart-2: hsl(160, 100%, 36%);\n  --chart-3: hsl(42, 93%, 56%);\n  --chart-4: hsl(147, 79%, 42%);\n  --chart-5: hsl(341, 75%, 51%);\n  --sidebar: hsl(228, 10%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85%);\n  --sidebar-primary: hsl(203, 89%, 53%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(206, 70%, 8%);\n  --sidebar-accent-foreground: hsl(204, 88%, 53%);\n  --sidebar-border: hsl(206, 16%, 26%);\n  --sidebar-ring: hsl(203, 89%, 53%);\n  --font-sans: \"Inter\", \"Open Sans\", sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: Menlo, monospace;\n  --radius: 1.3rem;\n  --shadow-2xs: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 1px 2px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 1px 2px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 2px 4px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 4px 6px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00), 0px 8px 10px -1px hsl(203, 89%, 53% / 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(203, 89%, 53% / 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/* Custom animations for status indicators */\n@keyframes pulse-green {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n@keyframes blink {\n  0%, 100% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 0.5;\n  }\n}\n\n.status-online {\n  animation: pulse-green 2s infinite;\n}\n\n.status-offline {\n  animation: blink 1s infinite;\n}\n\n/* Line clamp utility for text truncation */\n.line-clamp-2 {\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n}\n\n/* Force input fields to be white */\ninput[type=\"text\"], input[type=\"password\"], input[type=\"email\"], input[type=\"number\"], select, textarea {\n  background-color: white !important;\n  border-color: #d1d5db !important;\n  color: #111827 !important;\n}\n\ninput[type=\"text\"]:focus, input[type=\"password\"]:focus, input[type=\"email\"]:focus, input[type=\"number\"]:focus, select:focus, textarea:focus {\n  background-color: white !important;\n  border-color: #3b82f6 !important;\n  color: #111827 !important;\n}\n","size_bytes":5656},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/pingService.ts":{"content":"import { storage } from \"../storage\";\nimport cron from \"node-cron\";\nimport { createConnection } from \"net\";\n\ninterface PingResult {\n  isOnline: boolean;\n  responseTime?: number;\n  error?: string;\n}\n\nclass PingService {\n  private isRunning = false;\n\n  async pingHost(ipAddress: string): Promise<PingResult> {\n    return new Promise((resolve) => {\n      console.log(`Attempting to connect to ${ipAddress}...`);\n      const startTime = Date.now();\n      \n      // Try to connect to common ports (80, 443, 22, 3389) to test connectivity\n      const testPorts = [80, 443, 22, 3389, 21, 23];\n      let attempts = 0;\n      let connected = false;\n      \n      const tryPort = (port: number) => {\n        const socket = createConnection({ \n          port, \n          host: ipAddress, \n          timeout: 3000 \n        });\n        \n        socket.on('connect', () => {\n          if (!connected) {\n            connected = true;\n            const responseTime = Date.now() - startTime;\n            console.log(`Successfully connected to ${ipAddress}:${port} - ${responseTime}ms`);\n            socket.destroy();\n            resolve({\n              isOnline: true,\n              responseTime,\n              error: undefined\n            });\n          }\n        });\n        \n        socket.on('error', () => {\n          attempts++;\n          socket.destroy();\n          \n          if (attempts >= testPorts.length && !connected) {\n            console.log(`No open ports found on ${ipAddress}`);\n            resolve({\n              isOnline: false,\n              responseTime: undefined,\n              error: \"No accessible ports found\"\n            });\n          }\n        });\n        \n        socket.on('timeout', () => {\n          attempts++;\n          socket.destroy();\n          \n          if (attempts >= testPorts.length && !connected) {\n            console.log(`Connection timeout for ${ipAddress}`);\n            resolve({\n              isOnline: false,\n              responseTime: undefined,\n              error: \"Connection timeout\"\n            });\n          }\n        });\n      };\n      \n      // Try multiple ports simultaneously\n      testPorts.forEach(port => tryPort(port));\n      \n      // Overall timeout\n      setTimeout(() => {\n        if (!connected) {\n          console.log(`Overall timeout for ${ipAddress}`);\n          resolve({\n            isOnline: false,\n            responseTime: undefined,\n            error: \"Host unreachable\"\n          });\n        }\n      }, 5000);\n    });\n  }\n\n\n  async checkAllSites(): Promise<void> {\n    try {\n      const sites = await storage.getAllSites();\n      \n      for (const site of sites) {\n        await this.checkSiteStatus(site.id, site.ipAddress, site.name);\n      }\n    } catch (error) {\n      console.error(\"Error checking all sites:\", error);\n    }\n  }\n\n  async checkSiteStatus(siteId: string, ipAddress: string, siteName: string): Promise<void> {\n    try {\n      const result = await this.pingHost(ipAddress);\n      const status = result.isOnline ? \"online\" : \"offline\";\n      \n      // Update site status\n      await storage.updateSiteStatus(siteId, status, result.responseTime);\n      \n      // Add uptime history record\n      await storage.addUptimeRecord({\n        siteId,\n        status,\n        responseTime: result.responseTime || null,\n        isOnline: result.isOnline,\n      });\n\n      // Create alert if site went offline\n      if (!result.isOnline) {\n        const existingAlerts = await storage.getAlerts(10);\n        const recentOfflineAlert = existingAlerts.find(\n          alert => \n            alert.siteId === siteId && \n            alert.type === \"site_offline\" && \n            !alert.isResolved &&\n            alert.createdAt && \n            (Date.now() - new Date(alert.createdAt).getTime()) < 60 * 60 * 1000 // Within last hour\n        );\n\n        if (!recentOfflineAlert) {\n          await storage.createAlert({\n            siteId,\n            type: \"site_offline\",\n            severity: \"critical\",\n            title: `Site ${siteName} is offline`,\n            message: `Site ${siteName} (${ipAddress}) is not responding to ping requests. ${result.error || \"\"}`,\n            metadata: {\n              ipAddress,\n              error: result.error,\n            },\n          });\n        }\n      } else if (result.responseTime && result.responseTime > 1000) {\n        // Create warning for high response time\n        await storage.createAlert({\n          siteId,\n          type: \"high_response_time\",\n          severity: \"warning\",\n          title: `High response time for ${siteName}`,\n          message: `Site ${siteName} (${ipAddress}) has a response time of ${result.responseTime}ms, which exceeds the normal threshold.`,\n          metadata: {\n            ipAddress,\n            responseTime: result.responseTime,\n          },\n        });\n      }\n\n      console.log(`Ping check for ${siteName} (${ipAddress}): ${status} ${result.responseTime ? `- ${result.responseTime}ms` : ''}`);\n    } catch (error) {\n      console.error(`Error checking site ${siteName} (${ipAddress}):`, error);\n    }\n  }\n\n  startMonitoring(): void {\n    if (this.isRunning) {\n      console.log(\"Ping monitoring is already running\");\n      return;\n    }\n\n    console.log(\"Starting ping monitoring service...\");\n    this.isRunning = true;\n\n    // Check all sites every 10 seconds using setInterval\n    setInterval(async () => {\n      if (this.isRunning) {\n        console.log(\"Running scheduled ping checks...\");\n        await this.checkAllSites();\n      }\n    }, 10000); // 10 seconds = 10000 milliseconds\n\n    // Initial check\n    this.checkAllSites();\n  }\n\n  stopMonitoring(): void {\n    console.log(\"Stopping ping monitoring service...\");\n    this.isRunning = false;\n  }\n\n  isMonitoringRunning(): boolean {\n    return this.isRunning;\n  }\n}\n\nexport const pingService = new PingService();\n","size_bytes":5835},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  method: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/backups.tsx":{"content":"import Header from \"@/components/layout/header\";\n\nexport default function Backups() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        title=\"Program Backups\" \n        subtitle=\"HMI and PLC program backup management\" \n      />\n      \n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Backup Management</h3>\n          <p className=\"text-gray-600\">\n            Program backup management functionality will be implemented here.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":607},"client/src/pages/communication.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertCommunicationInterfaceSchema, type CommunicationInterface, type Site } from \"@shared/schema\";\nimport { Cable, Plus, Wifi, WifiOff, AlertCircle, Activity, Settings, Gauge } from \"lucide-react\";\nimport { z } from \"zod\";\n\nconst formSchema = insertCommunicationInterfaceSchema.extend({\n  port: z.preprocess((val) => val ? Number(val) : undefined, z.number().optional()),\n  baudRate: z.preprocess((val) => val ? Number(val) : undefined, z.number().optional()),\n  stopBits: z.preprocess((val) => val ? Number(val) : undefined, z.number().optional()),\n  dataBits: z.preprocess((val) => val ? Number(val) : undefined, z.number().optional()),\n  slaveId: z.preprocess((val) => val ? Number(val) : undefined, z.number().optional()),\n  description: z.string().optional(),\n  ipAddress: z.string().optional(),\n  deviceAddress: z.string().optional(),\n});\n\nexport default function Communication() {\n  const [selectedSiteId, setSelectedSiteId] = useState<string>(\"all\");\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const queryClient = useQueryClient();\n\n  const form = useForm<z.infer<typeof formSchema>>({\n    resolver: zodResolver(formSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      type: \"\",\n      connectionType: \"\",\n      status: \"unknown\",\n      isActive: true,\n    },\n  });\n\n  const { data: sites = [], isLoading: sitesLoading } = useQuery<Site[]>({\n    queryKey: [\"/api/sites\"],\n  });\n\n  const { data: interfaces = [], isLoading: interfacesLoading } = useQuery({\n    queryKey: [\"/api/communication-interfaces\", selectedSiteId],\n    queryFn: async (): Promise<CommunicationInterface[]> => {\n      const params = selectedSiteId !== \"all\" ? `?siteId=${selectedSiteId}` : \"\";\n      return await apiRequest(`/api/communication-interfaces${params}`, \"GET\");\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof formSchema>) => {\n      return await apiRequest(\"/api/communication-interfaces\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/communication-interfaces\"] });\n      setIsDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const onSubmit = (data: z.infer<typeof formSchema>) => {\n    createMutation.mutate(data);\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"online\":\n        return <Wifi className=\"text-green-500\" size={16} />;\n      case \"offline\":\n        return <WifiOff className=\"text-red-500\" size={16} />;\n      case \"error\":\n        return <AlertCircle className=\"text-yellow-500\" size={16} />;\n      default:\n        return <Activity className=\"text-gray-500\" size={16} />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"online\":\n        return \"bg-green-500\";\n      case \"offline\":\n        return \"bg-red-500\";\n      case \"error\":\n        return \"bg-yellow-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \"rs485\":\n        return <Cable className=\"text-blue-500\" size={16} />;\n      case \"modbus_tcp\":\n      case \"modbus_rtu\":\n        return <Settings className=\"text-purple-500\" size={16} />;\n      case \"profinet\":\n        return <Activity className=\"text-green-500\" size={16} />;\n      case \"4-20ma\":\n        return <Gauge className=\"text-orange-500\" size={16} />;\n      default:\n        return <Cable className=\"text-gray-500\" size={16} />;\n    }\n  };\n\n  const formatLastCheck = (lastCheck: string | Date | null) => {\n    if (!lastCheck) return \"Never\";\n    const date = new Date(lastCheck);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    \n    if (diffMins < 60) {\n      return `${diffMins} min ago`;\n    } else {\n      const diffHours = Math.floor(diffMins / 60);\n      return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n    }\n  };\n\n  if (sitesLoading || interfacesLoading) {\n    return (\n      <div className=\"p-6\">\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold\" data-testid=\"page-title\">Communication Protocols</h1>\n          <p className=\"text-gray-600 mt-2\">Manage industrial communication interfaces and protocols</p>\n        </div>\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\n          <DialogTrigger asChild>\n            <Button data-testid=\"button-add-interface\">\n              <Plus size={16} className=\"mr-2\" />\n              Add Interface\n            </Button>\n          </DialogTrigger>\n          <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Add Communication Interface</DialogTitle>\n              <DialogDescription>\n                Configure a new communication interface for industrial protocols\n              </DialogDescription>\n            </DialogHeader>\n            <Form {...form}>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"siteId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Site</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-site\">\n                              <SelectValue placeholder=\"Select site\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {sites.map((site) => (\n                              <SelectItem key={site.id} value={site.id}>\n                                {site.name}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Interface Name</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"e.g., PLC Modbus Interface\" {...field} data-testid=\"input-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description</FormLabel>\n                      <FormControl>\n                        <Textarea \n                          placeholder=\"Brief description of the interface purpose\" \n                          {...field} \n                          value={field.value || \"\"}\n                          data-testid=\"input-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"type\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Protocol Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value || \"\"}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-type\">\n                              <SelectValue placeholder=\"Select protocol\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"rs485\">RS485</SelectItem>\n                            <SelectItem value=\"4-20ma\">4-20mA</SelectItem>\n                            <SelectItem value=\"modbus_tcp\">Modbus TCP</SelectItem>\n                            <SelectItem value=\"modbus_rtu\">Modbus RTU</SelectItem>\n                            <SelectItem value=\"profinet\">PROFINET</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"connectionType\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Connection Type</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-connection-type\">\n                              <SelectValue placeholder=\"Select connection\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"serial\">Serial</SelectItem>\n                            <SelectItem value=\"ethernet\">Ethernet</SelectItem>\n                            <SelectItem value=\"fieldbus\">Fieldbus</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <Separator />\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"ipAddress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>IP Address (TCP/Ethernet)</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"192.168.1.100\" {...field} value={field.value || \"\"} data-testid=\"input-ip\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"port\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Port</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"502\" {...field} data-testid=\"input-port\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-4 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"baudRate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Baud Rate</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"9600\" {...field} data-testid=\"input-baud-rate\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"parity\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Parity</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value || \"\"}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-parity\">\n                              <SelectValue placeholder=\"None\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"none\">None</SelectItem>\n                            <SelectItem value=\"odd\">Odd</SelectItem>\n                            <SelectItem value=\"even\">Even</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"stopBits\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Stop Bits</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"1\" {...field} data-testid=\"input-stop-bits\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"dataBits\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Data Bits</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"8\" {...field} data-testid=\"input-data-bits\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"slaveId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Slave ID (Modbus)</FormLabel>\n                        <FormControl>\n                          <Input type=\"number\" placeholder=\"1\" {...field} data-testid=\"input-slave-id\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"deviceAddress\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Device Address</FormLabel>\n                        <FormControl>\n                          <Input placeholder=\"Device identifier\" {...field} value={field.value || \"\"} data-testid=\"input-device-address\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <DialogFooter>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setIsDialogOpen(false)}\n                    data-testid=\"button-cancel\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    type=\"submit\" \n                    disabled={createMutation.isPending}\n                    data-testid=\"button-create-interface\"\n                  >\n                    {createMutation.isPending ? \"Creating...\" : \"Create Interface\"}\n                  </Button>\n                </DialogFooter>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      <div className=\"flex items-center space-x-4\">\n        <Select value={selectedSiteId} onValueChange={setSelectedSiteId}>\n          <SelectTrigger className=\"w-48\" data-testid=\"filter-site\">\n            <SelectValue />\n          </SelectTrigger>\n          <SelectContent>\n            <SelectItem value=\"all\">All Sites</SelectItem>\n            {sites.map((site) => (\n              <SelectItem key={site.id} value={site.id}>\n                {site.name}\n              </SelectItem>\n            ))}\n          </SelectContent>\n        </Select>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n        {!interfaces || interfaces.length === 0 ? (\n          <div className=\"col-span-full\">\n            <Card>\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                <Cable className=\"h-12 w-12 text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No Communication Interfaces</h3>\n                <p className=\"text-gray-600 text-center max-w-sm\">\n                  Get started by adding your first communication interface to monitor industrial protocols.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        ) : (\n          (interfaces as CommunicationInterface[]).map((interface_: CommunicationInterface) => {\n            const site = sites.find(s => s.id === interface_.siteId);\n            \n            return (\n              <Card key={interface_.id} className=\"hover:shadow-lg transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center space-x-2\">\n                      {getTypeIcon(interface_.type)}\n                      <CardTitle className=\"text-lg\" data-testid={`interface-name-${interface_.id}`}>\n                        {interface_.name}\n                      </CardTitle>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      {getStatusIcon(interface_.status)}\n                      <span className={`w-2 h-2 rounded-full ${getStatusColor(interface_.status)}`}></span>\n                    </div>\n                  </div>\n                  <div className=\"flex items-center space-x-2 text-sm text-gray-600\">\n                    <span>{site?.name || 'Unknown Site'}</span>\n                    <span>•</span>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {interface_.type.toUpperCase().replace('_', ' ')}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {interface_.description && (\n                    <p className=\"text-sm text-gray-600 line-clamp-2\">\n                      {interface_.description}\n                    </p>\n                  )}\n                  \n                  <div className=\"space-y-2\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-600\">Status:</span>\n                      <Badge \n                        variant={interface_.status === 'online' ? 'default' : 'secondary'}\n                        className={interface_.status === 'online' ? 'bg-green-500' : ''}\n                      >\n                        {interface_.status}\n                      </Badge>\n                    </div>\n                    \n                    {interface_.connectionType && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Connection:</span>\n                        <span className=\"capitalize\">{interface_.connectionType}</span>\n                      </div>\n                    )}\n                    \n                    {interface_.ipAddress && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">IP Address:</span>\n                        <span className=\"font-mono text-xs\">{interface_.ipAddress}</span>\n                      </div>\n                    )}\n                    \n                    {interface_.port && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Port:</span>\n                        <span>{interface_.port}</span>\n                      </div>\n                    )}\n                    \n                    {interface_.baudRate && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Baud Rate:</span>\n                        <span>{interface_.baudRate}</span>\n                      </div>\n                    )}\n                    \n                    {interface_.slaveId && (\n                      <div className=\"flex justify-between text-sm\">\n                        <span className=\"text-gray-600\">Slave ID:</span>\n                        <span>{interface_.slaveId}</span>\n                      </div>\n                    )}\n                  </div>\n                  \n                  <div className=\"pt-2 border-t\">\n                    <div className=\"flex justify-between text-xs text-gray-500\">\n                      <span>Last Check:</span>\n                      <span>{formatLastCheck(interface_.lastCheck)}</span>\n                    </div>\n                    {interface_.errorCount && interface_.errorCount > 0 && (\n                      <div className=\"flex justify-between text-xs text-red-600 mt-1\">\n                        <span>Errors:</span>\n                        <span>{interface_.errorCount}</span>\n                      </div>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            );\n          })\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":23137},"client/src/pages/credentials.tsx":{"content":"import Header from \"@/components/layout/header\";\n\nexport default function Credentials() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        title=\"IPC Credentials\" \n        subtitle=\"Secure management of industrial PC credentials\" \n      />\n      \n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Credential Management</h3>\n          <p className=\"text-gray-600\">\n            IPC credential management functionality will be implemented here.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":624},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport Header from \"@/components/layout/header\";\nimport MetricsCards from \"@/components/dashboard/metrics-cards\";\nimport SiteStatusOverview from \"@/components/dashboard/site-status-overview\";\nimport RecentAlerts from \"@/components/dashboard/recent-alerts\";\nimport QuickActions from \"@/components/dashboard/quick-actions\";\nimport EquipmentStatus from \"@/components/dashboard/equipment-status\";\n\n\nexport default function Dashboard() {\n  const { data: metrics, isLoading: metricsLoading } = useQuery<{\n    totalSites: number;\n    onlineSites: number;\n    criticalAlerts: number;\n    avgResponseTime: number;\n  }>({\n    queryKey: [\"/api/dashboard/metrics\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        title=\"Dashboard Overview\" \n        subtitle=\"Real-time monitoring of all automation sites\" \n      />\n      \n      <div className=\"p-6\">\n        {/* Key Metrics Cards */}\n        <MetricsCards metrics={metrics} isLoading={metricsLoading} />\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Site Status Overview */}\n          <div className=\"lg:col-span-2\">\n            <SiteStatusOverview />\n          </div>\n\n          {/* Sidebar Content */}\n          <div className=\"space-y-6\">\n            <RecentAlerts />\n            <QuickActions />\n          </div>\n        </div>\n\n        {/* Equipment Status Section */}\n        <div className=\"mt-6 grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          <EquipmentStatus />\n          <div className=\"space-y-6\">\n            {/* VFD status will be part of EquipmentStatus component */}\n          </div>\n        </div>\n\n\n      </div>\n    </div>\n  );\n}\n","size_bytes":1805},"client/src/pages/network.tsx":{"content":"import Header from \"@/components/layout/header\";\n\nexport default function Network() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        title=\"Network Equipment\" \n        subtitle=\"Manage routers, modems and network infrastructure\" \n      />\n      \n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Network Equipment</h3>\n          <p className=\"text-gray-600\">\n            Network equipment management functionality will be implemented here.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":624},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import Header from \"@/components/layout/header\";\n\nexport default function Reports() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        title=\"Reports\" \n        subtitle=\"Uptime reports and analytics\" \n      />\n      \n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Reports & Analytics</h3>\n          <p className=\"text-gray-600\">\n            Reports and analytics functionality will be implemented here.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":588},"client/src/pages/sites.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Activity, Clock, Globe, Wifi, WifiOff, AlertTriangle, RotateCw, Plus, Grid, List, Trash2, Monitor, Server } from \"lucide-react\";\nimport Header from \"@/components/layout/header\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { type Site, type IpcManagement, type UptimeHistory } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nfunction SiteStatusIcon({ status }: { status: string }) {\n  switch (status) {\n    case \"online\":\n      return <Wifi className=\"h-4 w-4 text-green-500\" />;\n    case \"offline\":\n      return <WifiOff className=\"h-4 w-4 text-red-500\" />;\n    case \"warning\":\n      return <AlertTriangle className=\"h-4 w-4 text-yellow-500\" />;\n    default:\n      return <Globe className=\"h-4 w-4 text-gray-400\" />;\n  }\n}\n\nfunction SiteStatusBadge({ status }: { status: string }) {\n  const variants = {\n    online: \"bg-green-100 text-green-800 border-green-200\",\n    offline: \"bg-red-100 text-red-800 border-red-200\",\n    warning: \"bg-yellow-100 text-yellow-800 border-yellow-200\",\n    unknown: \"bg-gray-100 text-gray-800 border-gray-200\",\n  };\n\n  return (\n    <Badge\n      variant=\"outline\"\n      className={variants[status as keyof typeof variants] || variants.unknown}\n    >\n      <SiteStatusIcon status={status} />\n      <span className=\"ml-1 capitalize\">{status}</span>\n    </Badge>\n  );\n}\n\nfunction SyncFromIPCButton() {\n  const { toast } = useToast();\n\n  const syncFromIPCMutation = useMutation({\n    mutationFn: () => apiRequest(\"/api/sites/sync-from-ipc\", \"POST\"),\n    onSuccess: (data: any) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sites\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      \n      const created = data.created || 0;\n      const removed = data.removed || 0;\n      let description = \"\";\n      \n      if (created > 0 && removed > 0) {\n        description = `${created} sites created, ${removed} orphaned sites removed.`;\n      } else if (created > 0) {\n        description = `${created} sites created from IPC management records.`;\n      } else if (removed > 0) {\n        description = `${removed} orphaned sites removed.`;\n      } else {\n        description = \"All sites are already synchronized with IPC management.\";\n      }\n      \n      toast({\n        title: \"Sites synced successfully\",\n        description,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to sync sites\",\n        description: error.message || \"An error occurred while syncing sites from IPC management.\",\n      });\n    },\n  });\n\n  return (\n    <Button\n      onClick={() => syncFromIPCMutation.mutate()}\n      disabled={syncFromIPCMutation.isPending}\n      variant=\"outline\"\n      data-testid=\"sync-ipc-button\"\n    >\n      <RotateCw className={`h-4 w-4 mr-2 ${syncFromIPCMutation.isPending ? 'animate-spin' : ''}`} />\n      {syncFromIPCMutation.isPending ? \"Syncing...\" : \"Sync from IPC\"}\n    </Button>\n  );\n}\n\nfunction UptimeBar({ siteId }: { siteId: string }) {\n  const { data: uptimeHistory = [] } = useQuery<UptimeHistory[]>({\n    queryKey: [\"/api/sites\", siteId, \"uptime\"],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  // Get last 96 data points (24 hours if checking every 15 minutes)\n  const recentHistory = uptimeHistory.slice(0, 96);\n  const totalBars = 96;\n  \n  // Fill missing data with unknown status\n  const bars = Array.from({ length: totalBars }, (_, i) => {\n    const historyItem = recentHistory[i];\n    if (historyItem) {\n      return {\n        status: historyItem.isOnline ? 'online' : 'offline',\n        timestamp: historyItem.timestamp,\n        responseTime: historyItem.responseTime\n      };\n    }\n    return { status: 'unknown', timestamp: null, responseTime: null };\n  });\n\n  const getBarColor = (status: string) => {\n    switch (status) {\n      case 'online': return 'bg-green-500';\n      case 'offline': return 'bg-red-500';\n      case 'warning': return 'bg-yellow-500';\n      default: return 'bg-gray-300';\n    }\n  };\n\n  return (\n    <div className=\"flex space-x-0.5 h-8 items-center\">\n      {bars.map((bar, index) => (\n        <div\n          key={index}\n          className={`w-1 h-6 rounded-sm ${getBarColor(bar.status)}`}\n          title={bar.timestamp ? `${bar.status} - ${new Date(bar.timestamp).toLocaleString()}${bar.responseTime ? ` (${bar.responseTime}ms)` : ''}` : 'No data'}\n        />\n      ))}\n    </div>\n  );\n}\n\nfunction SiteListItem({ site, ipcDevice, onDelete, isDeleting, onRemoteConnect, onRdpConnect }: { site: Site; ipcDevice?: IpcManagement; onDelete: (siteId: string, siteName: string) => void; isDeleting: boolean; onRemoteConnect: (anydeskId: string) => void; onRdpConnect: (vpnIp: string, username: string, password: string) => void }) {\n  const uptimePercentage = site.uptime ? parseFloat(site.uptime) : 0;\n  const responseTime = site.responseTime || 0;\n  const lastCheck = site.lastCheck ? new Date(site.lastCheck) : null;\n\n  return (\n    <div className=\"border rounded-lg p-4 bg-white hover:shadow-sm transition-shadow\" data-testid={`list-site-${site.id}`}>\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-4 flex-1\">\n          <div className=\"flex items-center space-x-3 min-w-0 flex-1\">\n            <SiteStatusIcon status={site.status} />\n            <div className=\"min-w-0 flex-1\">\n              <div className=\"flex items-center space-x-2\">\n                <h3 className=\"font-medium text-sm truncate\" data-testid={`text-list-name-${site.id}`}>\n                  {ipcDevice?.deviceName || site.name}\n                </h3>\n                <SiteStatusBadge status={site.status} />\n              </div>\n              <p className=\"text-xs text-muted-foreground\" data-testid={`text-list-ip-${site.id}`}>\n                {site.ipAddress}\n                {ipcDevice?.amsNetId && ` • AMS: ${ipcDevice.amsNetId}`}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-6 text-sm\">\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">Uptime</div>\n              <div className=\"font-medium\" data-testid={`text-list-uptime-${site.id}`}>\n                {uptimePercentage.toFixed(1)}%\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">Response</div>\n              <div className=\"font-medium\" data-testid={`text-list-response-${site.id}`}>\n                {responseTime > 0 ? `${responseTime}ms` : \"—\"}\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-xs text-muted-foreground\">Last Check</div>\n              <div className=\"font-medium text-xs\" data-testid={`text-list-check-${site.id}`}>\n                {lastCheck ? formatDistanceToNow(lastCheck, { addSuffix: true }) : \"Never\"}\n              </div>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"ml-4 flex-shrink-0 flex items-center space-x-3\">\n          <div>\n            <div className=\"text-xs text-muted-foreground mb-1\">24h Status</div>\n            <UptimeBar siteId={site.id} />\n          </div>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => onDelete(site.id, site.name)}\n            disabled={isDeleting}\n            className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n            data-testid={`delete-list-site-${site.id}`}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </div>\n      \n      {/* Additional IPC info in collapsed view */}\n      {ipcDevice && (ipcDevice.lanIp || ipcDevice.vpnIp || ipcDevice.anydesk) && (\n        <div className=\"mt-3 pt-3 border-t flex items-center space-x-4 text-xs text-muted-foreground\">\n          {ipcDevice.lanIp && (\n            <span>LAN: {ipcDevice.lanIp}</span>\n          )}\n          {ipcDevice.vpnIp && (\n            <span>VPN: {ipcDevice.vpnIp}</span>\n          )}\n          {ipcDevice.anydesk && (\n            <div className=\"flex items-center space-x-2\">\n              <span>AnyDesk: {ipcDevice.anydesk}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onRemoteConnect(ipcDevice.anydesk!)}\n                className=\"h-6 px-2 text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                data-testid={`connect-remote-list-${site.id}`}\n              >\n                <Monitor className=\"h-3 w-3 mr-1\" />\n                Connect\n              </Button>\n            </div>\n          )}\n          {ipcDevice && ipcDevice.vpnIp && ipcDevice.ipcUsername && (\n            <div className=\"flex items-center space-x-2\">\n              <span>RDP: {ipcDevice.vpnIp}</span>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                onClick={() => onRdpConnect(ipcDevice.vpnIp!, ipcDevice.ipcUsername!, ipcDevice.ipcPassword || '')}\n                className=\"h-6 px-2 text-green-600 hover:text-green-700 hover:bg-green-50\"\n                data-testid={`connect-rdp-list-${site.id}`}\n              >\n                <Server className=\"h-3 w-3 mr-1\" />\n                RDP\n              </Button>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction SiteCard({ site, ipcDevice, onDelete, isDeleting, onRemoteConnect, onRdpConnect }: { site: Site; ipcDevice?: IpcManagement; onDelete: (siteId: string, siteName: string) => void; isDeleting: boolean; onRemoteConnect: (anydeskId: string) => void; onRdpConnect: (vpnIp: string, username: string, password: string) => void }) {\n  const uptimePercentage = site.uptime ? parseFloat(site.uptime) : 0;\n  const responseTime = site.responseTime || 0;\n  const lastCheck = site.lastCheck ? new Date(site.lastCheck) : null;\n  const lastOnline = site.lastOnline ? new Date(site.lastOnline) : null;\n\n  return (\n    <Card className=\"transition-all hover:shadow-md\" data-testid={`card-site-${site.id}`}>\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-3\">\n            <SiteStatusIcon status={site.status} />\n            <div>\n              <CardTitle className=\"text-base\" data-testid={`text-site-name-${site.id}`}>\n                {ipcDevice?.deviceName || site.name}\n              </CardTitle>\n              <p className=\"text-sm text-muted-foreground\" data-testid={`text-site-ip-${site.id}`}>\n                {site.ipAddress}\n              </p>\n              {ipcDevice?.amsNetId && (\n                <p className=\"text-xs text-muted-foreground\">\n                  AMS: {ipcDevice.amsNetId}\n                </p>\n              )}\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <SiteStatusBadge status={site.status} />\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => onDelete(site.id, site.name)}\n              disabled={isDeleting}\n              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n              data-testid={`delete-card-site-${site.id}`}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent className=\"pt-0\">\n        <div className=\"grid grid-cols-2 gap-4 text-sm\">\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-muted-foreground\">Uptime</span>\n              <span className=\"font-medium\" data-testid={`text-uptime-${site.id}`}>\n                {uptimePercentage.toFixed(1)}%\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-muted-foreground\">Response Time</span>\n              <span className=\"font-medium\" data-testid={`text-response-time-${site.id}`}>\n                {responseTime > 0 ? `${responseTime}ms` : \"—\"}\n              </span>\n            </div>\n          </div>\n          <div className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-muted-foreground\">Device Status</span>\n              <span className=\"font-medium capitalize\" data-testid={`text-device-status-${site.id}`}>\n                {ipcDevice?.status || \"Unknown\"}\n              </span>\n            </div>\n            <div className=\"flex items-center justify-between\">\n              <span className=\"text-muted-foreground\">Last Check</span>\n              <span className=\"font-medium\" data-testid={`text-last-check-${site.id}`}>\n                {lastCheck ? formatDistanceToNow(lastCheck, { addSuffix: true }) : \"Never\"}\n              </span>\n            </div>\n          </div>\n        </div>\n        \n        {/* IPC Device Info */}\n        {ipcDevice && (\n          <div className=\"mt-3 pt-3 border-t\">\n            <div className=\"grid grid-cols-2 gap-2 text-xs text-muted-foreground\">\n              {ipcDevice.lanIp && (\n                <div className=\"flex items-center\">\n                  <Globe className=\"h-3 w-3 mr-1\" />\n                  <span>LAN: {ipcDevice.lanIp}</span>\n                </div>\n              )}\n              {ipcDevice.vpnIp && (\n                <div className=\"flex items-center\">\n                  <Activity className=\"h-3 w-3 mr-1\" />\n                  <span>VPN: {ipcDevice.vpnIp}</span>\n                </div>\n              )}\n              {ipcDevice.anydesk && (\n                <div className=\"col-span-2 flex items-center justify-between\">\n                  <span>AnyDesk: {ipcDevice.anydesk}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onRemoteConnect(ipcDevice.anydesk!)}\n                    className=\"h-6 px-2 text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\n                    data-testid={`connect-remote-card-${site.id}`}\n                  >\n                    <Monitor className=\"h-3 w-3 mr-1\" />\n                    Connect\n                  </Button>\n                </div>\n              )}\n              {ipcDevice && ipcDevice.vpnIp && ipcDevice.ipcUsername && (\n                <div className=\"col-span-2 flex items-center justify-between\">\n                  <span>RDP: {ipcDevice.vpnIp}</span>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => onRdpConnect(ipcDevice.vpnIp!, ipcDevice.ipcUsername!, ipcDevice.ipcPassword || '')}\n                    className=\"h-6 px-2 text-green-600 hover:text-green-700 hover:bg-green-50\"\n                    data-testid={`connect-rdp-card-${site.id}`}\n                  >\n                    <Server className=\"h-3 w-3 mr-1\" />\n                    RDP\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n        \n        {lastOnline && site.status !== \"online\" && (\n          <div className=\"mt-3 pt-3 border-t\">\n            <div className=\"flex items-center text-sm text-muted-foreground\">\n              <Clock className=\"h-3 w-3 mr-1\" />\n              <span>Last online {formatDistanceToNow(lastOnline, { addSuffix: true })}</span>\n            </div>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default function Sites() {\n  const [viewMode, setViewMode] = useState<'cards' | 'list'>('list');\n  const { toast } = useToast();\n  \n  const { data: sites = [], isLoading: sitesLoading } = useQuery<Site[]>({\n    queryKey: [\"/api/sites\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const { data: ipcDevices = [] } = useQuery<IpcManagement[]>({\n    queryKey: [\"/api/ipc-management\"],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  const deleteSiteMutation = useMutation({\n    mutationFn: (siteId: string) => apiRequest(\"/api/sites/\" + siteId, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/sites\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/dashboard/metrics\"] });\n      toast({\n        title: \"Site deleted\",\n        description: \"The monitoring site has been successfully removed.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        variant: \"destructive\",\n        title: \"Failed to delete site\",\n        description: error.message || \"An error occurred while deleting the site.\",\n      });\n    },\n  });\n\n  const handleDeleteSite = (siteId: string, siteName: string) => {\n    if (window.confirm(`Are you sure you want to delete \"${siteName}\"? This action cannot be undone.`)) {\n      deleteSiteMutation.mutate(siteId);\n    }\n  };\n\n  const handleRemoteConnect = (anydeskId: string) => {\n    if (anydeskId) {\n      // Open AnyDesk with the specific ID\n      window.open(`anydesk:${anydeskId}`, '_blank');\n      toast({\n        title: \"Opening AnyDesk\",\n        description: `Connecting to AnyDesk ID: ${anydeskId}`,\n      });\n    }\n  };\n\n  const handleRdpConnect = (vpnIp: string, username: string, password: string) => {\n    if (vpnIp && username) {\n      // Create RDP connection string\n      const rdpUrl = `rdp://${username}:${encodeURIComponent(password)}@${vpnIp}`;\n      window.open(rdpUrl, '_blank');\n      toast({\n        title: \"Opening RDP Connection\",\n        description: `Connecting to ${vpnIp} as ${username}`,\n      });\n    }\n  };\n\n  const onlineSites = sites.filter(site => site.status === \"online\").length;\n  const totalSites = sites.length;\n  const totalIPCDevices = ipcDevices.length;\n\n  // Create a map of IP addresses to IPC devices for easy lookup\n  const ipcByIP = ipcDevices.reduce((acc, ipc) => {\n    if (ipc.vpnIp) acc[ipc.vpnIp] = ipc;\n    if (ipc.lanIp) acc[ipc.lanIp] = ipc;\n    return acc;\n  }, {} as Record<string, IpcManagement>);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        title=\"Site Monitoring\" \n        subtitle={`Monitor ${totalSites} sites • ${onlineSites} online • ${totalIPCDevices} IPC devices`}\n      />\n      \n      <div className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-2\">\n              <Activity className=\"h-5 w-5 text-primary\" />\n              <h2 className=\"text-xl font-semibold\">IPC Device Monitoring</h2>\n            </div>\n            <Badge variant=\"outline\" data-testid=\"text-site-count\">\n              {totalSites} monitored sites from {totalIPCDevices} IPC devices\n            </Badge>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"flex border rounded-lg p-1 bg-white\">\n              <Button\n                variant={viewMode === 'cards' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('cards')}\n                data-testid=\"button-card-view\"\n              >\n                <Grid className=\"h-4 w-4\" />\n              </Button>\n              <Button\n                variant={viewMode === 'list' ? 'default' : 'ghost'}\n                size=\"sm\"\n                onClick={() => setViewMode('list')}\n                data-testid=\"button-list-view\"\n              >\n                <List className=\"h-4 w-4\" />\n              </Button>\n            </div>\n            <Button variant=\"outline\" asChild>\n              <a href=\"/ipc-management\" data-testid=\"link-ipc-management\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Manage IPC\n              </a>\n            </Button>\n            <SyncFromIPCButton />\n          </div>\n        </div>\n\n        {sitesLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {[...Array(6)].map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-4 bg-gray-200 rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-gray-200 rounded w-1/2\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-3 bg-gray-200 rounded\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-2/3\"></div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : sites.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <Activity className=\"mx-auto h-12 w-12 text-gray-400\" />\n            <h3 className=\"mt-2 text-sm font-medium text-gray-900\">No sites monitored</h3>\n            <p className=\"mt-1 text-sm text-gray-500\">\n              {totalIPCDevices > 0 \n                ? \"Click 'Sync from IPC' to automatically create monitoring sites from your IPC management records.\"\n                : \"Add IPC devices first, then sync to start monitoring.\"\n              }\n            </p>\n            <div className=\"mt-6 space-x-2\">\n              <Button variant=\"outline\" asChild>\n                <a href=\"/ipc-management\">\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add IPC Devices\n                </a>\n              </Button>\n              {totalIPCDevices > 0 && <SyncFromIPCButton />}\n            </div>\n          </div>\n        ) : (\n          <div className={viewMode === 'cards' \n            ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\"\n            : \"space-y-3\"\n          }>\n            {sites.map((site) => (\n              viewMode === 'cards' ? (\n                <SiteCard \n                  key={site.id} \n                  site={site} \n                  ipcDevice={ipcByIP[site.ipAddress]}\n                  onDelete={handleDeleteSite}\n                  isDeleting={deleteSiteMutation.isPending}\n                  onRemoteConnect={handleRemoteConnect}\n                  onRdpConnect={handleRdpConnect}\n                />\n              ) : (\n                <SiteListItem\n                  key={site.id}\n                  site={site}\n                  ipcDevice={ipcByIP[site.ipAddress]}\n                  onDelete={handleDeleteSite}\n                  isDeleting={deleteSiteMutation.isPending}\n                  onRemoteConnect={handleRemoteConnect}\n                  onRdpConnect={handleRdpConnect}\n                />\n              )\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":22906},"client/src/pages/vfd.tsx":{"content":"import Header from \"@/components/layout/header\";\n\nexport default function VFD() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        title=\"VFD Parameters\" \n        subtitle=\"Variable frequency drive configuration and monitoring\" \n      />\n      \n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-lg font-medium text-gray-900 mb-2\">VFD Parameter Management</h3>\n          <p className=\"text-gray-600\">\n            VFD parameter management functionality will be implemented here.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":624},"client/src/components/dashboard/equipment-status.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Cpu, Monitor, Zap } from \"lucide-react\";\nimport type { VfdParameter } from \"@shared/schema\";\n\nexport default function EquipmentStatus() {\n  const { data: vfdParameters, isLoading } = useQuery<VfdParameter[]>({\n    queryKey: [\"/api/vfd-parameters\"],\n    refetchInterval: 30000,\n  });\n\n  const getLoadColor = (loadPercentage: string | number | null) => {\n    if (!loadPercentage) return \"text-gray-500\";\n    const load = typeof loadPercentage === \"string\" ? parseFloat(loadPercentage) : loadPercentage;\n    if (load >= 90) return \"text-red-600\";\n    if (load >= 75) return \"text-yellow-600\";\n    return \"text-green-600\";\n  };\n\n  const formatLoad = (loadPercentage: string | number | null) => {\n    if (!loadPercentage) return \"N/A\";\n    const load = typeof loadPercentage === \"string\" ? parseFloat(loadPercentage) : loadPercentage;\n    return `${load.toFixed(0)}%`;\n  };\n\n  return (\n    <div className=\"space-y-6\">\n      {/* PLC & HMI Status */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>PLC & HMI Status</CardTitle>\n            <span className=\"text-sm text-gray-600\">Beckhoff TwinCAT Focus</span>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"space-y-4\">\n            {/* Mock PLC/HMI data - in real app this would come from API */}\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <Cpu className=\"text-primary\" />\n                <div>\n                  <p className=\"font-medium text-gray-900\">Site A - PLC01</p>\n                  <p className=\"text-sm text-gray-600\">TwinCAT 3.1.4024</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n                  Running\n                </Badge>\n              </div>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <div className=\"flex items-center space-x-3\">\n                <Monitor className=\"text-primary\" />\n                <div>\n                  <p className=\"font-medium text-gray-900\">Site A - HMI01</p>\n                  <p className=\"text-sm text-gray-600\">TE2000 v3.1</p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n                  Connected\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* VFD Parameters Overview */}\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle>VFD Parameter Status</CardTitle>\n            <button className=\"text-sm text-primary hover:underline\">\n              View All\n            </button>\n          </div>\n        </CardHeader>\n        \n        <CardContent>\n          <div className=\"space-y-4\">\n            {isLoading ? (\n              <div className=\"space-y-3\">\n                {[...Array(3)].map((_, i) => (\n                  <div key={i} className=\"h-16 bg-gray-100 rounded animate-pulse\" />\n                ))}\n              </div>\n            ) : vfdParameters && vfdParameters.length > 0 ? (\n              vfdParameters.slice(0, 3).map((vfd) => (\n                <div\n                  key={vfd.id}\n                  className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                  data-testid={`vfd-${vfd.id}`}\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <Zap className=\"text-yellow-600\" />\n                    <div>\n                      <p className=\"font-medium text-gray-900\">{vfd.name}</p>\n                      <p className=\"text-sm text-gray-600\">\n                        {vfd.frequency ? `${vfd.frequency}Hz` : 'N/A'}, {vfd.rpm ? `${vfd.rpm} RPM` : 'N/A'}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"text-right\">\n                    <p className={`text-sm font-medium ${getLoadColor(vfd.loadPercentage)}`}>\n                      {formatLoad(vfd.loadPercentage)}\n                    </p>\n                    <p className=\"text-xs text-gray-600\">Load</p>\n                  </div>\n                </div>\n              ))\n            ) : (\n              <div className=\"text-center py-4 text-gray-500\">\n                <p className=\"text-sm\">No VFD parameters configured</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4986},"client/src/components/dashboard/metrics-cards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { ArrowUp, ArrowDown, Building, CheckCircle, AlertTriangle, Clock } from \"lucide-react\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\n\ninterface MetricsCardsProps {\n  metrics?: {\n    totalSites: number;\n    onlineSites: number;\n    criticalAlerts: number;\n    avgResponseTime: number;\n  };\n  isLoading: boolean;\n}\n\nexport default function MetricsCards({ metrics, isLoading }: MetricsCardsProps) {\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i}>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"space-y-2\">\n                  <Skeleton className=\"h-4 w-20\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                </div>\n                <Skeleton className=\"h-12 w-12 rounded-lg\" />\n              </div>\n              <div className=\"mt-4\">\n                <Skeleton className=\"h-4 w-24\" />\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  if (!metrics) return null;\n\n  const uptimePercentage = metrics.totalSites > 0 \n    ? ((metrics.onlineSites / metrics.totalSites) * 100).toFixed(1) \n    : \"0\";\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n      <Card data-testid=\"metric-total-sites\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Total Sites</p>\n              <p className=\"text-3xl font-bold text-gray-900\">{metrics.totalSites}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center\">\n              <Building className=\"text-xl text-primary\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600 flex items-center\">\n              <ArrowUp className=\"w-3 h-3 mr-1\" />\n              Active\n            </span>\n            <span className=\"text-gray-600 ml-1\">automation sites</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"metric-online-sites\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Sites Online</p>\n              <p className=\"text-3xl font-bold text-green-600\">{metrics.onlineSites}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n              <CheckCircle className=\"text-xl text-green-600\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600\">{uptimePercentage}%</span>\n            <span className=\"text-gray-600 ml-1\">uptime average</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"metric-critical-alerts\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Critical Alerts</p>\n              <p className=\"text-3xl font-bold text-red-600\">{metrics.criticalAlerts}</p>\n            </div>\n            <div className=\"w-12 h-12 bg-red-100 rounded-lg flex items-center justify-center\">\n              <AlertTriangle className=\"text-xl text-red-600\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-red-600\">\n              {metrics.totalSites - metrics.onlineSites} offline\n            </span>\n            <span className=\"text-gray-600 ml-1\">requires attention</span>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Card data-testid=\"metric-avg-response\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <p className=\"text-sm font-medium text-gray-600\">Avg Response</p>\n              <p className=\"text-3xl font-bold text-gray-900\">{metrics.avgResponseTime}ms</p>\n            </div>\n            <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n              <Clock className=\"text-xl text-yellow-600\" />\n            </div>\n          </div>\n          <div className=\"mt-4 flex items-center text-sm\">\n            <span className=\"text-green-600 flex items-center\">\n              <ArrowDown className=\"w-3 h-3 mr-1\" />\n              Good\n            </span>\n            <span className=\"text-gray-600 ml-1\">network performance</span>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4936},"client/src/components/dashboard/network-equipment-status.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Router, Wifi, Settings, TestTube, Search } from \"lucide-react\";\nimport type { NetworkEquipment } from \"@shared/schema\";\n\nexport default function NetworkEquipmentStatus() {\n  const { data: equipment, isLoading } = useQuery<NetworkEquipment[]>({\n    queryKey: [\"/api/network-equipment\"],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"online\":\n        return (\n          <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">\n            <span className=\"w-1.5 h-1.5 bg-green-800 rounded-full mr-1\"></span>\n            Online\n          </Badge>\n        );\n      case \"offline\":\n        return (\n          <Badge variant=\"destructive\">\n            <span className=\"w-1.5 h-1.5 bg-white rounded-full mr-1\"></span>\n            Offline\n          </Badge>\n        );\n      default:\n        return (\n          <Badge variant=\"secondary\">\n            <span className=\"w-1.5 h-1.5 bg-gray-500 rounded-full mr-1\"></span>\n            Unknown\n          </Badge>\n        );\n    }\n  };\n\n  const getDeviceIcon = (type: string) => {\n    switch (type) {\n      case \"router\":\n        return <Router className=\"text-primary\" />;\n      case \"modem\":\n        return <Wifi className=\"text-primary\" />;\n      default:\n        return <Router className=\"text-primary\" />;\n    }\n  };\n\n  const formatLastCheck = (lastCheck: string | Date | null) => {\n    if (!lastCheck) return \"Never\";\n    const date = new Date(lastCheck);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    \n    if (diffMins < 60) {\n      return `${diffMins} min ago`;\n    } else {\n      const diffHours = Math.floor(diffMins / 60);\n      return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Network Equipment Status</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button size=\"sm\" data-testid=\"scan-network-button\">\n              <Search className=\"w-4 h-4 mr-1\" />\n              Scan\n            </Button>\n            <Select defaultValue=\"all\">\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Equipment</SelectItem>\n                <SelectItem value=\"router\">Routers</SelectItem>\n                <SelectItem value=\"modem\">Modems</SelectItem>\n                <SelectItem value=\"switch\">Switches</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"overflow-x-auto\">\n          <table className=\"w-full\">\n            <thead className=\"bg-gray-50\">\n              <tr>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\">\n                  Device\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\">\n                  Type\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\">\n                  IP Address\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\">\n                  Status\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\">\n                  Last Check\n                </th>\n                <th className=\"px-6 py-3 text-left text-xs font-medium text-gray-600 uppercase tracking-wider\">\n                  Actions\n                </th>\n              </tr>\n            </thead>\n            <tbody className=\"bg-white divide-y divide-gray-200\">\n              {isLoading ? (\n                [...Array(3)].map((_, i) => (\n                  <tr key={i}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"h-4 bg-gray-200 rounded animate-pulse\"></div>\n                    </td>\n                  </tr>\n                ))\n              ) : equipment && equipment.length > 0 ? (\n                equipment.map((device) => (\n                  <tr key={device.id} className=\"hover:bg-gray-50\" data-testid={`network-device-${device.id}`}>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        {getDeviceIcon(device.type)}\n                        <div className=\"ml-3\">\n                          <div className=\"text-sm font-medium text-gray-900\">{device.name}</div>\n                          <div className=\"text-sm text-gray-600\">{device.model || 'N/A'}</div>\n                        </div>\n                      </div>\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600 capitalize\">\n                      {device.type}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-900\">\n                      {device.ipAddress}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      {getStatusBadge(device.status)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      {formatLastCheck(device.lastCheck)}\n                    </td>\n                    <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-600\">\n                      <div className=\"flex items-center space-x-2\">\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          data-testid={`configure-device-${device.id}`}\n                        >\n                          <Settings className=\"w-4 h-4\" />\n                        </Button>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"icon\"\n                          data-testid={`test-connection-${device.id}`}\n                        >\n                          <TestTube className=\"w-4 h-4\" />\n                        </Button>\n                      </div>\n                    </td>\n                  </tr>\n                ))\n              ) : (\n                <tr>\n                  <td colSpan={6} className=\"px-6 py-4 text-center text-gray-500\">\n                    No network equipment configured\n                  </td>\n                </tr>\n              )}\n            </tbody>\n          </table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":8069},"client/src/components/dashboard/quick-actions.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plus, Download, FileText, Key } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function QuickActions() {\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"text-base\">Quick Actions</CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-3\">\n          <Button\n            variant=\"outline\"\n            className=\"p-4 h-auto flex flex-col items-center text-center\"\n            asChild\n            data-testid=\"quick-action-add-site\"\n          >\n            <Link href=\"/sites\">\n              <Plus className=\"text-primary text-base mb-2\" />\n              <p className=\"text-xs font-medium text-gray-900\">Add Site</p>\n            </Link>\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            className=\"p-4 h-auto flex flex-col items-center text-center\"\n            asChild\n            data-testid=\"quick-action-run-backup\"\n          >\n            <Link href=\"/backups\">\n              <Download className=\"text-primary text-base mb-2\" />\n              <p className=\"text-xs font-medium text-gray-900\">Run Backup</p>\n            </Link>\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            className=\"p-4 h-auto flex flex-col items-center text-center\"\n            asChild\n            data-testid=\"quick-action-generate-report\"\n          >\n            <Link href=\"/reports\">\n              <FileText className=\"text-primary text-base mb-2\" />\n              <p className=\"text-xs font-medium text-gray-900\">Generate Report</p>\n            </Link>\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            className=\"p-4 h-auto flex flex-col items-center text-center\"\n            asChild\n            data-testid=\"quick-action-manage-credentials\"\n          >\n            <Link href=\"/credentials\">\n              <Key className=\"text-primary text-base mb-2\" />\n              <p className=\"text-xs font-medium text-gray-900\">Manage Keys</p>\n            </Link>\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2261},"client/src/components/dashboard/recent-alerts.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport type { Alert } from \"@shared/schema\";\n\nexport default function RecentAlerts() {\n  const { data: alerts, isLoading } = useQuery<Alert[]>({\n    queryKey: [\"/api/alerts\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n        return \"bg-red-500\";\n      case \"warning\":\n        return \"bg-yellow-500\";\n      case \"info\":\n        return \"bg-blue-500\";\n      case \"success\":\n        return \"bg-green-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const getSeverityTextColor = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n        return \"text-red-600\";\n      case \"warning\":\n        return \"text-yellow-600\";\n      case \"info\":\n        return \"text-blue-600\";\n      case \"success\":\n        return \"text-green-600\";\n      default:\n        return \"text-gray-600\";\n    }\n  };\n\n  const formatTimeAgo = (createdAt: string | Date) => {\n    const date = new Date(createdAt);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMins / 60);\n    \n    if (diffMins < 60) {\n      return `${diffMins} min${diffMins !== 1 ? 's' : ''} ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n    } else {\n      const diffDays = Math.floor(diffHours / 24);\n      return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle>Recent Alerts</CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"space-y-3\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-gray-100 rounded animate-pulse\" />\n              ))}\n            </div>\n          ) : alerts && alerts.length > 0 ? (\n            alerts.slice(0, 3).map((alert) => (\n              <div\n                key={alert.id}\n                className=\"flex items-start space-x-3 p-2 rounded hover:bg-gray-50\"\n                data-testid={`alert-${alert.id}`}\n              >\n                <div className={`w-2 h-2 rounded-full mt-2 ${getSeverityColor(alert.severity)}`} />\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-gray-900 truncate\">\n                    {alert.title}\n                  </p>\n                  <p className=\"text-xs text-gray-600 mt-1 line-clamp-2\">\n                    {alert.message}\n                  </p>\n                  <span className={`text-xs ${getSeverityTextColor(alert.severity)}`}>\n                    {alert.createdAt && formatTimeAgo(alert.createdAt)}\n                  </span>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-4 text-gray-500\">\n              <p className=\"text-sm\">No recent alerts</p>\n            </div>\n          )}\n        </div>\n        \n        <Button\n          variant=\"ghost\"\n          className=\"w-full mt-4\"\n          asChild\n          data-testid=\"view-all-alerts\"\n        >\n          <Link href=\"/site-events\">\n            View All Events\n          </Link>\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3584},"client/src/components/dashboard/site-status-overview.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { RefreshCw, ExternalLink, Settings, Wrench } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { Site } from \"@shared/schema\";\n\nexport default function SiteStatusOverview() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const { data: sites, isLoading } = useQuery<Site[]>({\n    queryKey: [\"sites\"],\n    queryFn: () => apiRequest(\"GET\", \"/api/sites\").then((res) => res.json()),\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const pingAllMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/ping/all\");\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Ping Check Initiated\",\n        description: \"Checking all sites for connectivity...\",\n      });\n      // Invalidate sites to refresh the data\n      setTimeout(() => {\n        queryClient.invalidateQueries({ queryKey: [\"/api/sites\"] });\n      }, 5000);\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to initiate ping check\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"online\":\n        return <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">Online</Badge>;\n      case \"offline\":\n        return <Badge variant=\"destructive\">Offline</Badge>;\n      case \"warning\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800 hover:bg-yellow-100\">Warning</Badge>;\n      default:\n        return <Badge variant=\"secondary\">Unknown</Badge>;\n    }\n  };\n\n  const getStatusIndicator = (status: string) => {\n    const baseClass = \"w-3 h-3 rounded-full\";\n    switch (status) {\n      case \"online\":\n        return `${baseClass} bg-green-500 animate-pulse`;\n      case \"offline\":\n        return `${baseClass} bg-red-500 animate-pulse`;\n      case \"warning\":\n        return `${baseClass} bg-yellow-500`;\n      default:\n        return `${baseClass} bg-gray-400`;\n    }\n  };\n\n  const formatUptime = (uptime: string | number | null) => {\n    if (!uptime) return \"N/A\";\n    const uptimeNum = typeof uptime === \"string\" ? parseFloat(uptime) : uptime;\n    return `${uptimeNum.toFixed(1)}%`;\n  };\n\n  const formatResponseTime = (responseTime: number | null) => {\n    if (!responseTime) return \"N/A\";\n    return `${responseTime}ms`;\n  };\n\n  const formatLastSeen = (lastOnline: string | Date | null) => {\n    if (!lastOnline) return \"Never\";\n    const date = new Date(lastOnline);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMins / 60);\n    \n    if (diffMins < 60) {\n      return `${diffMins} min${diffMins !== 1 ? 's' : ''} ago`;\n    } else {\n      return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n    }\n  };\n\n  return (\n    <Card>\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle>Site Status Overview</CardTitle>\n          <div className=\"flex items-center space-x-2\">\n            <Button\n              size=\"sm\"\n              onClick={() => pingAllMutation.mutate()}\n              disabled={pingAllMutation.isPending}\n              data-testid=\"refresh-sites-button\"\n            >\n              <RefreshCw className={`w-4 h-4 mr-1 ${pingAllMutation.isPending ? 'animate-spin' : ''}`} />\n              Refresh\n            </Button>\n            <Select defaultValue=\"all\">\n              <SelectTrigger className=\"w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Sites</SelectItem>\n                <SelectItem value=\"production\">Production</SelectItem>\n                <SelectItem value=\"development\">Development</SelectItem>\n                <SelectItem value=\"warehouse\">Warehouse</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n      </CardHeader>\n      \n      <CardContent>\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(4)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-gray-100 rounded-lg animate-pulse\" />\n              ))}\n            </div>\n          ) : sites && sites.length > 0 ? (\n            sites.map((site) => (\n              <div\n                key={site.id}\n                className=\"flex items-center justify-between p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors\"\n                data-testid={`site-${site.id}`}\n              >\n                <div className=\"flex items-center space-x-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className={getStatusIndicator(site.status)} />\n                    <span className=\"font-medium text-gray-900\">{site.name}</span>\n                  </div>\n                  <div className=\"flex items-center space-x-4 text-sm text-gray-600\">\n                    <span className=\"flex items-center\">\n                      <span className=\"mr-1\">📍</span>\n                      {site.ipAddress}\n                    </span>\n                    {site.status === \"online\" ? (\n                      <span className=\"flex items-center\">\n                        <span className=\"mr-1\">⏱️</span>\n                        {formatResponseTime(site.responseTime)}\n                      </span>\n                    ) : (\n                      <span className=\"text-red-600\">\n                        Last seen: {formatLastSeen(site.lastOnline)}\n                      </span>\n                    )}\n                    <span className={site.status === \"online\" ? \"text-green-600\" : \"text-red-600\"}>\n                      {formatUptime(site.uptime)} uptime\n                    </span>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  {getStatusBadge(site.status)}\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    asChild\n                    data-testid={`view-site-${site.id}`}\n                  >\n                    <Link href={`/sites?selected=${site.id}`}>\n                      <ExternalLink className=\"w-4 h-4\" />\n                    </Link>\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    data-testid={`manage-site-${site.id}`}\n                  >\n                    <Settings className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <p>No sites configured yet.</p>\n              <Button asChild className=\"mt-2\">\n                <Link href=\"/sites\">\n                  Add your first site\n                </Link>\n              </Button>\n            </div>\n          )}\n        </div>\n        \n        {sites && sites.length > 0 && (\n          <div className=\"mt-6 flex justify-center\">\n            <Button variant=\"ghost\" asChild data-testid=\"view-all-sites\">\n              <Link href=\"/sites\">\n                View All Sites →\n              </Link>\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7846},"client/src/components/layout/header.tsx":{"content":"import { Search, Bell, Settings } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\n\ninterface HeaderProps {\n  title: string;\n  subtitle?: string;\n}\n\nexport default function Header({ title, subtitle }: HeaderProps) {\n  const { data: unreadCount } = useQuery<{ count: number }>({\n    queryKey: [\"/api/alerts/unread-count\"],\n    refetchInterval: 30000, // Check every 30 seconds\n  });\n\n  return (\n    <header className=\"bg-white shadow-sm border-b border-gray-200 px-6 py-4\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h2 className=\"text-lg font-semibold text-gray-900\" data-testid=\"page-title\">\n            {title}\n          </h2>\n          {subtitle && (\n            <p className=\"text-xs text-gray-600 mt-1\" data-testid=\"page-subtitle\">\n              {subtitle}\n            </p>\n          )}\n        </div>\n        \n        <div className=\"flex items-center space-x-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              type=\"text\"\n              placeholder=\"Search sites, equipment...\"\n              className=\"pl-10 w-64\"\n              data-testid=\"search-input\"\n            />\n          </div>\n          \n          {/* Notifications */}\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            className=\"relative\"\n            data-testid=\"notifications-button\"\n          >\n            <Bell className=\"h-5 w-5\" />\n            {unreadCount && unreadCount.count > 0 && (\n              <Badge \n                variant=\"destructive\" \n                className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\"\n                data-testid=\"notification-count\"\n              >\n                {unreadCount.count}\n              </Badge>\n            )}\n          </Button>\n          \n          {/* Settings */}\n          <Button variant=\"ghost\" size=\"icon\" data-testid=\"settings-button\" className=\"group\">\n            <Settings className=\"h-5 w-5 transition-transform duration-300 group-hover:rotate-180\" />\n          </Button>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2399},"client/src/components/layout/sidebar.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  LayoutDashboard,\n  Building,\n  Save,\n  Key,\n  Sliders,\n  BarChart3,\n  Settings,\n  FolderOpen,\n  Settings2,\n  Monitor,\n  Bell,\n  Activity,\n  Database,\n} from \"lucide-react\";\n\nconst navigation = [\n  { name: \"Dashboard\", href: \"/\", icon: LayoutDashboard },\n  { name: \"Project Details\", href: \"/project-details\", icon: FolderOpen },\n  { name: \"Site Monitoring\", href: \"/sites\", icon: Building },\n  { name: \"Site Events\", href: \"/site-events\", icon: Bell },\n  { name: \"Site Database\", href: \"/site-database\", icon: Database },\n  { name: \"SQL Viewer\", href: \"/sql-viewer\", icon: Database },\n  { name: \"PLC Tag Management\", href: \"/plc-tag-management\", icon: Settings2 },\n  { name: \"Program Backups\", href: \"/backups\", icon: Save },\n  { name: \"IPC Management\", href: \"/ipc-management\", icon: Monitor },\n  { name: \"VFD Parameters\", href: \"/vfd\", icon: Sliders },\n  { name: \"Reports\", href: \"/reports\", icon: BarChart3 },\n  { name: \"Settings\", href: \"/settings\", icon: Settings2 },\n];\n\nexport default function Sidebar() {\n  const [location] = useLocation();\n\n  return (\n    <aside className=\"w-64 bg-gray-900 text-white flex flex-col fixed left-0 top-0 h-screen z-50\">\n      <div className=\"p-6 border-b border-gray-700\">\n        <div className=\"flex items-center space-x-3\">\n          <Settings className=\"text-2xl text-primary\" />\n          <h1 className=\"text-lg font-bold\" data-testid=\"app-title\">AutomationHub</h1>\n        </div>\n      </div>\n      \n      <nav className=\"flex-1 p-4 overflow-y-auto\">\n        <ul className=\"space-y-2\">\n          {navigation.map((item) => {\n            const isActive = location === item.href;\n            const Icon = item.icon;\n            \n            return (\n              <li key={item.name}>\n                <Link href={item.href}>\n                  <span \n                    className={cn(\n                      \"flex items-center space-x-3 px-4 py-3 rounded-lg transition-colors cursor-pointer\",\n                      isActive \n                        ? \"bg-primary text-white\" \n                        : \"hover:bg-gray-700\"\n                    )}\n                    data-testid={`nav-${item.name.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <Icon size={16} />\n                    <span className=\"text-sm\">{item.name}</span>\n                  </span>\n                </Link>\n              </li>\n            );\n          })}\n        </ul>\n      </nav>\n      \n      <div className=\"p-4 border-t border-gray-700\">\n        <div className=\"flex items-center space-x-3\">\n          <div className=\"w-8 h-8 bg-primary rounded-full flex items-center justify-center\">\n            <span className=\"text-sm font-medium\">A</span>\n          </div>\n          <div>\n            <p className=\"text-xs font-medium\" data-testid=\"user-name\">Admin User</p>\n            <p className=\"text-xs text-gray-400\">Automation Engineer</p>\n          </div>\n        </div>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":3037},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-gray-300 bg-white px-3 py-2 text-base text-gray-900 file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-blue-500 focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":755},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/instruments.tsx":{"content":"import Header from \"@/components/layout/header\";\n\nexport default function Instruments() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        title=\"Instruments\" \n        subtitle=\"Manage and monitor all automation instruments\" \n      />\n      \n      <div className=\"p-6\">\n        <div className=\"text-center py-12\">\n          <h3 className=\"text-base font-medium text-gray-900 mb-2\">Instrument Management</h3>\n          <p className=\"text-sm text-gray-600\">\n            Instrument management functionality will be implemented here.\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":624},"client/src/pages/ipc-details.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { IpcManagement, InsertIpcManagement } from \"@shared/schema\";\nimport {\n  Monitor,\n  Cpu,\n  Wifi,\n  Router,\n  Key,\n  Activity,\n  Edit,\n  Save,\n  X,\n  Check,\n  Eye,\n  EyeOff,\n  Lock,\n  FileText,\n  Network,\n} from \"lucide-react\";\n\n// Using types from shared schema\n\nexport default function IPCDetails() {\n  const { toast } = useToast();\n  const [selectedIPCId, setSelectedIPCId] = useState<string | null>(null);\n  const [editingIPCId, setEditingIPCId] = useState<string | null>(null);\n  const [editFormData, setEditFormData] = useState<Partial<IpcManagement>>({});\n  const [showNewIPCForm, setShowNewIPCForm] = useState(false);\n  const [newIPCData, setNewIPCData] = useState<Partial<InsertIpcManagement>>({});\n  const [showPasswords, setShowPasswords] = useState<{\n    [key: string]: boolean;\n  }>({});\n\n  // Fetch IPC devices from API\n  const { data: ipcDevices = [], isLoading, refetch } = useQuery<IpcManagement[]>({\n    queryKey: [\"/api/ipc-management\"],\n    queryFn: () => fetch(\"/api/ipc-management\").then(res => res.json()),\n  });\n\n  // Create IPC device mutation\n  const createIpcMutation = useMutation({\n    mutationFn: (data: InsertIpcManagement) => \n      apiRequest(\"/api/ipc-management\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ipc-management\"] });\n      setShowNewIPCForm(false);\n      setNewIPCData({});\n      toast({\n        title: \"Success\",\n        description: \"IPC device created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Error creating IPC device:\", error);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to create IPC device\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update IPC device mutation\n  const updateIpcMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertIpcManagement> }) =>\n      apiRequest(`/api/ipc-management/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ipc-management\"] });\n      setEditingIPCId(null);\n      setEditFormData({});\n      toast({\n        title: \"Success\",\n        description: \"IPC device updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Error updating IPC device:\", error);\n      toast({\n        title: \"Error\", \n        description: error?.message || \"Failed to update IPC device\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete IPC device mutation\n  const deleteIpcMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/ipc-management/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/ipc-management\"] });\n      setSelectedIPCId(null);\n      toast({\n        title: \"Success\",\n        description: \"IPC device deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      console.error(\"Error deleting IPC device:\", error);\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to delete IPC device\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const statusOptions = [\"Active\", \"Inactive\", \"Maintenance\", \"Offline\"];\n  const dhcpOptions = [\"Enable\", \"Disabled\"];\n  const manufactureOptions = [\"Beckhoff\", \"Siemens\", \"Allen-Bradley\", \"Other\"];\n  const modelOptions = [\"C6015-0010\", \"C6025-0010\", \"C5102-0010\", \"Other\"];\n  const mainboardOptions = [\"CV263-0005\", \"CV263-0010\", \"Other\"];\n  const cpuOptions = [\"Atom E3827 1.75Ghz\", \"Atom E3845 1.91Ghz\", \"Other\"];\n  const flashOptions = [\"SSD 40 GB 3D-Flash\", \"SSD 80 GB 3D-Flash\", \"Other\"];\n  const powerSupplyOptions = [\"24V DC, Class2\", \"12V DC, Class2\", \"Other\"];\n  const memoryOptions = [\"4 x 1024 MN DDR3L\", \"8 x 1024 MN DDR3L\", \"Other\"];\n  const osOptions = [\"Windows 10\", \"Windows 11\", \"Linux\", \"Other\"];\n\n  const handleEditStart = (ipc: IpcManagement) => {\n    setEditingIPCId(ipc.id);\n    setEditFormData({ ...ipc });\n  };\n\n  const handleEditCancel = () => {\n    setEditingIPCId(null);\n    setEditFormData({});\n  };\n\n  const handleEditSave = () => {\n    if (editingIPCId && editFormData) {\n      updateIpcMutation.mutate({ id: editingIPCId, data: editFormData });\n    }\n  };\n\n  const handleFieldChange = (field: keyof IpcManagement, value: any) => {\n    setEditFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleNewIPC = () => {\n    setShowNewIPCForm(true);\n    setNewIPCData({});\n  };\n\n  const handleNewIPCSave = () => {\n    if (newIPCData.deviceName && newIPCData.amsNetId) {\n      console.log(\"Submitting IPC data:\", newIPCData);\n      createIpcMutation.mutate(newIPCData as InsertIpcManagement);\n    } else {\n      toast({\n        title: \"Validation Error\",\n        description: \"Device Name and AMS Net ID are required\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleNewIPCCancel = () => {\n    setShowNewIPCForm(false);\n    setNewIPCData({});\n  };\n\n  const handleNewIPCChange = (field: keyof InsertIpcManagement, value: any) => {\n    setNewIPCData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Are you sure you want to delete this IPC device?\")) {\n      deleteIpcMutation.mutate(id);\n    }\n  };\n\n  const togglePasswordVisibility = (ipcId: string | number) => {\n    setShowPasswords((prev) => ({\n      ...prev,\n      [ipcId]: !prev[ipcId],\n    }));\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Active\":\n        return \"bg-green-500\";\n      case \"Inactive\":\n        return \"bg-gray-500\";\n      case \"Maintenance\":\n        return \"bg-yellow-500\";\n      case \"Offline\":\n        return \"bg-red-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  // If no IPC selected, show IPC list\n  if (!selectedIPCId) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header\n          title=\"IPC Management\"\n          subtitle=\"Manage Industrial PC devices and configurations\"\n        />\n\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              IPC Devices ({ipcDevices.length})\n            </h3>\n            <Button \n              onClick={handleNewIPC} \n              data-testid=\"button-new-ipc\"\n              className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-medium transition-all duration-200 shadow-md hover:shadow-lg px-6 py-2\"\n            >\n              <Monitor size={16} className=\"mr-2\" />\n              Add IPC Device\n            </Button>\n          </div>\n\n          {/* New IPC Form */}\n          {showNewIPCForm && (\n            <Card className=\"mb-6 border-2 border-blue-200 shadow-lg bg-gradient-to-br from-blue-50/30 to-white\">\n              <CardHeader className=\"bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-t-lg\">\n                <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Monitor size={20} />\n                  Add New IPC Device\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-8\">\n                  {/* Basic Details Section */}\n                  <div className=\"bg-white rounded-lg border border-gray-100 p-4 shadow-sm\">\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-4 border-b border-gray-200 pb-2 flex items-center gap-2\">\n                      <Monitor size={16} className=\"text-blue-600\" />\n                      Basic Details\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Device Name</Label>\n                        <Input\n                          value={newIPCData.deviceName || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"deviceName\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Enter device name\"\n                          data-testid=\"new-device-name\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">AMS Net ID</Label>\n                        <Input\n                          value={newIPCData.amsNetId || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"amsNetId\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Enter AMS Net ID\"\n                          data-testid=\"new-ams-id\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Status</Label>\n                        <Select\n                          value={newIPCData.status || \"Active\"}\n                          onValueChange={(value) => handleNewIPCChange(\"status\", value)}\n                        >\n                          <SelectTrigger className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\" data-testid=\"new-status\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {statusOptions.map((status) => (\n                              <SelectItem key={status} value={status}>\n                                {status}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      </div>\n\n                    </div>\n                  </div>\n\n                  {/* Remote Access Section */}\n                  <div className=\"bg-white rounded-lg border border-gray-100 p-4 shadow-sm\">\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-4 border-b border-gray-200 pb-2 flex items-center gap-2\">\n                      <Lock size={16} className=\"text-green-600\" />\n                      Remote Access\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                      <div>\n                        <Label className=\"text-xs font-medium\">AnyDesk ID</Label>\n                        <Input\n                          value={newIPCData.anydesk || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"anydesk\", e.target.value)\n                          }\n                          className=\"text-sm h-8 mt-1\"\n                          placeholder=\"AnyDesk ID\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-medium\">AnyDesk Password</Label>\n                        <Input\n                          type=\"password\"\n                          value={newIPCData.anydeskPassword || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"anydeskPassword\", e.target.value)\n                          }\n                          className=\"text-sm h-8 mt-1\"\n                          placeholder=\"Password\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-medium\">TeamViewer ID</Label>\n                        <Input\n                          value={newIPCData.teamviewer || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"teamviewer\", e.target.value)\n                          }\n                          className=\"text-sm h-8 mt-1\"\n                          placeholder=\"TeamViewer ID\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-medium\">Naming Series</Label>\n                        <Input\n                          value={newIPCData.namingSeries || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"namingSeries\", e.target.value)\n                          }\n                          className=\"text-sm h-8 mt-1\"\n                          placeholder=\"Naming series\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* IPC Credentials Section */}\n                  <div className=\"bg-white rounded-lg border border-gray-100 p-4 shadow-sm\">\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-4 border-b border-gray-200 pb-2 flex items-center gap-2\">\n                      <Key size={16} className=\"text-orange-600\" />\n                      IPC Credentials\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      <div>\n                        <Label className=\"text-xs font-medium\">IPC Username</Label>\n                        <Input\n                          value={newIPCData.ipcUsername || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"ipcUsername\", e.target.value)\n                          }\n                          className=\"text-sm h-8 mt-1\"\n                          placeholder=\"Username\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-medium\">IPC Password</Label>\n                        <Input\n                          type=\"password\"\n                          value={newIPCData.ipcPassword || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"ipcPassword\", e.target.value)\n                          }\n                          className=\"text-sm h-8 mt-1\"\n                          placeholder=\"Password\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Hardware Specs Section */}\n                  <div className=\"bg-white rounded-lg border border-gray-100 p-4 shadow-sm\">\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-4 border-b border-gray-200 pb-2 flex items-center gap-2\">\n                      <Cpu size={16} className=\"text-purple-600\" />\n                      Hardware Specifications\n                    </h4>\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Manufacturer</Label>\n                        <Input\n                          value={newIPCData.manufacture || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"manufacture\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Manufacturer\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Model</Label>\n                        <Input\n                          value={newIPCData.model || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"model\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Model\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Serial Number</Label>\n                        <Input\n                          value={newIPCData.serialNo || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"serialNo\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Serial number\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Mainboard</Label>\n                        <Input\n                          value={newIPCData.mainboard || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"mainboard\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Mainboard\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">CPU</Label>\n                        <Input\n                          value={newIPCData.cpu || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"cpu\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"CPU model\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Flash</Label>\n                        <Input\n                          value={newIPCData.flash || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"flash\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Flash storage\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Power Supply</Label>\n                        <Input\n                          value={newIPCData.powerSupply || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"powerSupply\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Power supply\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Memory</Label>\n                        <Input\n                          value={newIPCData.memory || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"memory\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Memory\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">MAC 1</Label>\n                        <Input\n                          value={newIPCData.mac1 || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"mac1\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"MAC address 1\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">MAC 2</Label>\n                        <Input\n                          value={newIPCData.mac2 || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"mac2\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"MAC address 2\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Operating System</Label>\n                        <Input\n                          value={newIPCData.operatingSystem || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"operatingSystem\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Operating system\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Image Version</Label>\n                        <Input\n                          value={newIPCData.imageVersion || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"imageVersion\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Image version\"\n                        />\n                      </div>\n                      <div>\n                        <Label className=\"text-xs font-semibold text-gray-700\">Serial Number of IPC</Label>\n                        <Input\n                          value={newIPCData.serialNumberOfIpc || \"\"}\n                          onChange={(e) =>\n                            handleNewIPCChange(\"serialNumberOfIpc\", e.target.value)\n                          }\n                          className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Serial number of IPC\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Network Configuration Section */}\n                  <div className=\"bg-white rounded-lg border border-gray-100 p-4 shadow-sm\">\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-4 border-b border-gray-200 pb-2 flex items-center gap-2\">\n                      <Network size={16} className=\"text-indigo-600\" />\n                      Network Configuration\n                    </h4>\n                    <div className=\"space-y-6\">\n                      {/* Basic Network Info */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <div>\n                          <Label className=\"text-xs font-semibold text-gray-700\">VPN IP</Label>\n                          <Input\n                            value={newIPCData.vpnIp || \"\"}\n                            onChange={(e) =>\n                              handleNewIPCChange(\"vpnIp\", e.target.value)\n                            }\n                            className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                            placeholder=\"VPN IP address\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs font-semibold text-gray-700\">LAN IP</Label>\n                          <Input\n                            value={newIPCData.lanIp || \"\"}\n                            onChange={(e) =>\n                              handleNewIPCChange(\"lanIp\", e.target.value)\n                            }\n                            className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                            placeholder=\"LAN IP address\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs font-semibold text-gray-700\">Device Manager Version</Label>\n                          <Input\n                            value={newIPCData.deviceManagerVersion || \"\"}\n                            onChange={(e) =>\n                              handleNewIPCChange(\"deviceManagerVersion\", e.target.value)\n                            }\n                            className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                            placeholder=\"Device manager version\"\n                          />\n                        </div>\n                      </div>\n\n                      {/* Network 1 Configuration */}\n                      <div>\n                        <h5 className=\"text-xs font-semibold text-gray-600 mb-3 bg-gray-50 px-2 py-1 rounded\">Network 1</h5>\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">Name</Label>\n                            <Input\n                              value={newIPCData.network1Name || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network1Name\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"Network name\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">Virtual Device</Label>\n                            <Input\n                              value={newIPCData.network1VirtualDevice || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network1VirtualDevice\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"Virtual device name\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">Gateway</Label>\n                            <Input\n                              value={newIPCData.network1Gateway || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network1Gateway\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"Gateway\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">IP Address</Label>\n                            <Input\n                              value={newIPCData.network1Address || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network1Address\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"IP address\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">DHCP</Label>\n                            <Select\n                              value={newIPCData.network1Dhcp || \"\"}\n                              onValueChange={(value) => handleNewIPCChange(\"network1Dhcp\", value)}\n                            >\n                              <SelectTrigger className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\">\n                                <SelectValue placeholder=\"DHCP\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"Enable\">Enable</SelectItem>\n                                <SelectItem value=\"Disabled\">Disabled</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">Subnet Mask</Label>\n                            <Input\n                              value={newIPCData.network1SubnetMask || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network1SubnetMask\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"Subnet mask\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">DNS Servers</Label>\n                            <Input\n                              value={newIPCData.network1DnsServers || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network1DnsServers\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"DNS servers\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">MAC Address</Label>\n                            <Input\n                              value={newIPCData.network1MacAddress || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network1MacAddress\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"MAC address\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Network 2 Configuration */}\n                      <div>\n                        <h5 className=\"text-xs font-semibold text-gray-600 mb-3 bg-gray-50 px-2 py-1 rounded\">Network 2</h5>\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-4 gap-4\">\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">Name</Label>\n                            <Input\n                              value={newIPCData.network2Name || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network2Name\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"Network name\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">Virtual Device</Label>\n                            <Input\n                              value={newIPCData.network2VirtualDevice || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network2VirtualDevice\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"Virtual device name\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">Gateway</Label>\n                            <Input\n                              value={newIPCData.network2Gateway || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network2Gateway\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"Gateway\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">IP Address</Label>\n                            <Input\n                              value={newIPCData.network2Address || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network2Address\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"IP address\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">DHCP</Label>\n                            <Select\n                              value={newIPCData.network2Dhcp || \"\"}\n                              onValueChange={(value) => handleNewIPCChange(\"network2Dhcp\", value)}\n                            >\n                              <SelectTrigger className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\">\n                                <SelectValue placeholder=\"DHCP\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"Enable\">Enable</SelectItem>\n                                <SelectItem value=\"Disabled\">Disabled</SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">Subnet Mask</Label>\n                            <Input\n                              value={newIPCData.network2SubnetMask || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network2SubnetMask\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"Subnet mask\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">DNS Servers</Label>\n                            <Input\n                              value={newIPCData.network2DnsServers || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network2DnsServers\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"DNS servers\"\n                            />\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">MAC Address</Label>\n                            <Input\n                              value={newIPCData.network2MacAddress || \"\"}\n                              onChange={(e) =>\n                                handleNewIPCChange(\"network2MacAddress\", e.target.value)\n                              }\n                              className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                              placeholder=\"MAC address\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Comments Section */}\n                  <div className=\"bg-white rounded-lg border border-gray-100 p-4 shadow-sm\">\n                    <h4 className=\"text-sm font-semibold text-gray-800 mb-4 border-b border-gray-200 pb-2 flex items-center gap-2\">\n                      <FileText size={16} className=\"text-gray-600\" />\n                      Additional Information\n                    </h4>\n                    <div>\n                      <Label className=\"text-xs font-medium\">Comments</Label>\n                      <Input\n                        value={newIPCData.comments || \"\"}\n                        onChange={(e) =>\n                          handleNewIPCChange(\"comments\", e.target.value)\n                        }\n                        className=\"text-sm h-8 mt-1\"\n                        placeholder=\"Optional comments...\"\n                      />\n                    </div>\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-3 mt-8 pt-4 border-t border-gray-200\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleNewIPCCancel}\n                    data-testid=\"cancel-new-ipc\"\n                    className=\"px-6 py-2 border-gray-300 text-gray-700 hover:bg-gray-50 hover:border-gray-400 transition-all duration-200\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button \n                    onClick={handleNewIPCSave} \n                    data-testid=\"save-new-ipc\"\n                    disabled={createIpcMutation.isPending}\n                    className=\"px-6 py-2 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-medium transition-all duration-200 shadow-md hover:shadow-lg disabled:opacity-50 disabled:cursor-not-allowed\"\n                  >\n                    {createIpcMutation.isPending ? (\n                      <>\n                        <div className=\"animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2\"></div>\n                        Adding...\n                      </>\n                    ) : (\n                      <>\n                        <Monitor size={16} className=\"mr-2\" />\n                        Add IPC Device\n                      </>\n                    )}\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <Card>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full text-sm\">\n                  <thead>\n                    <tr className=\"border-b bg-gray-50\">\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-700 text-xs\">\n                        Device Name\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-700 text-xs\">\n                        AMS Net ID\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-700 text-xs\">\n                        Status\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-700 text-xs\">\n                        VPN IP\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-700 text-xs\">\n                        LAN IP\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-700 text-xs\">\n                        Model\n                      </th>\n                      <th className=\"text-left py-3 px-4 font-medium text-gray-700 text-xs\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {ipcDevices.length === 0 ? (\n                      <tr>\n                        <td colSpan={7} className=\"py-12 text-center\">\n                          <div className=\"text-gray-500\">\n                            <Monitor\n                              size={48}\n                              className=\"mx-auto mb-4 text-gray-300\"\n                            />\n                            <h3 className=\"text-sm font-medium text-gray-900 mb-2\">\n                              No IPC Devices Found\n                            </h3>\n                            <p className=\"text-xs text-gray-600 mb-4\">\n                              Get started by adding your first IPC device\n                            </p>\n                            <Button onClick={handleNewIPC} size=\"sm\">\n                              <Monitor size={14} className=\"mr-2\" />\n                              Add First IPC Device\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ) : (\n                      ipcDevices.map((ipc, index) => (\n                        <tr\n                          key={ipc.id}\n                          className={`border-b hover:bg-gray-50 cursor-pointer ${\n                            index % 2 === 0 ? \"bg-white\" : \"bg-gray-50/30\"\n                          }`}\n                          onClick={() => setSelectedIPCId(ipc.id)}\n                          data-testid={`ipc-row-${ipc.id}`}\n                        >\n                          <td className=\"py-4 px-4\">\n                            <div className=\"font-medium text-gray-900 text-sm\">\n                              {ipc.deviceName}\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"text-gray-600 text-sm\">\n                              {ipc.amsNetId}\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <Badge\n                              variant=\"secondary\"\n                              className={`text-xs text-white ${getStatusColor(ipc.status)}`}\n                            >\n                              {ipc.status}\n                            </Badge>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"text-gray-600 text-sm\">\n                              {ipc.vpnIp}\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"text-gray-600 text-sm\">\n                              {ipc.lanIp}\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"text-gray-600 text-sm\">\n                              {ipc.model}\n                            </div>\n                          </td>\n                          <td className=\"py-4 px-4\">\n                            <div className=\"flex items-center gap-1\">\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  setSelectedIPCId(ipc.id);\n                                }}\n                                data-testid={`view-ipc-${ipc.id}`}\n                                title=\"View details\"\n                              >\n                                <Eye size={14} />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleEditStart(ipc);\n                                  setSelectedIPCId(ipc.id);\n                                }}\n                                data-testid={`edit-ipc-${ipc.id}`}\n                                title=\"Edit device\"\n                              >\n                                <Edit size={14} />\n                              </Button>\n                              <Button\n                                size=\"sm\"\n                                variant=\"ghost\"\n                                onClick={(e) => {\n                                  e.stopPropagation();\n                                  handleDelete(ipc.id);\n                                }}\n                                data-testid={`delete-ipc-${ipc.id}`}\n                                title=\"Delete device\"\n                                className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n                                disabled={deleteIpcMutation.isPending}\n                              >\n                                <X size={14} />\n                              </Button>\n                            </div>\n                          </td>\n                        </tr>\n                      ))\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  // Show detailed view for selected IPC\n  const selectedIPC = ipcDevices.find((ipc) => ipc.id === selectedIPCId);\n  if (!selectedIPC) return null;\n\n  const isEditing = editingIPCId === selectedIPC.id;\n  const currentData = isEditing\n    ? { ...selectedIPC, ...editFormData }\n    : selectedIPC;\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header\n        title={`IPC Device - ${selectedIPC.deviceName}`}\n        subtitle={`${selectedIPC.amsNetId} - Device Configuration`}\n      />\n\n      <div className=\"p-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setSelectedIPCId(null)}\n            data-testid=\"button-back-to-list\"\n          >\n            ← Back to IPC List\n          </Button>\n          <div className=\"flex gap-2\">\n            {isEditing ? (\n              <>\n                <Button\n                  variant=\"outline\"\n                  onClick={handleEditCancel}\n                  data-testid=\"cancel-edit-ipc\"\n                >\n                  <X size={16} className=\"mr-2\" />\n                  Cancel\n                </Button>\n                <Button \n                  onClick={handleEditSave} \n                  data-testid=\"save-edit-ipc\"\n                  disabled={updateIpcMutation.isPending}\n                >\n                  <Save size={16} className=\"mr-2\" />\n                  {updateIpcMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </>\n            ) : (\n              <>\n                <Button\n                  variant=\"destructive\"\n                  onClick={() => handleDelete(selectedIPC.id)}\n                  data-testid=\"delete-ipc\"\n                  disabled={deleteIpcMutation.isPending}\n                >\n                  <X size={16} className=\"mr-2\" />\n                  {deleteIpcMutation.isPending ? \"Deleting...\" : \"Delete\"}\n                </Button>\n                <Button\n                  onClick={() => handleEditStart(selectedIPC)}\n                  data-testid=\"edit-ipc\"\n                >\n                  <Edit size={16} className=\"mr-2\" />\n                  Edit Device\n                </Button>\n              </>\n            )}\n          </div>\n        </div>\n\n        <Tabs defaultValue=\"details\" className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-5\">\n            <TabsTrigger value=\"details\" className=\"flex items-center gap-2\">\n              <Monitor size={16} />\n              Details\n            </TabsTrigger>\n            <TabsTrigger value=\"ipc-cpu\" className=\"flex items-center gap-2\">\n              <Cpu size={16} />\n              IPC CPU\n            </TabsTrigger>\n            <TabsTrigger value=\"connectivity\" className=\"flex items-center gap-2\">\n              <Wifi size={16} />\n              Connectivity\n            </TabsTrigger>\n            <TabsTrigger value=\"router\" className=\"flex items-center gap-2\">\n              <Router size={16} />\n              Router\n            </TabsTrigger>\n            <TabsTrigger value=\"passwords\" className=\"flex items-center gap-2\">\n              <Key size={16} />\n              Passwords\n            </TabsTrigger>\n          </TabsList>\n\n          {/* Details Tab */}\n          <TabsContent value=\"details\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-base\">\n                  <Monitor size={18} />\n                  General Information\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Status</Label>\n                    {isEditing ? (\n                      <Select\n                        value={currentData.status}\n                        onValueChange={(value) => handleFieldChange('status', value)}\n                      >\n                        <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-status\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {statusOptions.map(status => (\n                            <SelectItem key={status} value={status}>{status}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <Badge \n                        variant=\"secondary\" \n                        className={`text-xs text-white ${getStatusColor(currentData.status)} mt-1`}\n                      >\n                        {currentData.status}\n                      </Badge>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">AMS Net ID</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.amsNetId || ''}\n                        onChange={(e) => handleFieldChange('amsNetId', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-ams-id\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.amsNetId}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">VPN IP</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.vpnIp || ''}\n                        onChange={(e) => handleFieldChange('vpnIp', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-vpn-ip\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.vpnIp}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">LAN IP</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.lanIp || ''}\n                        onChange={(e) => handleFieldChange('lanIp', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-lan-ip\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.lanIp}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Device Name</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.deviceName || ''}\n                        onChange={(e) => handleFieldChange('deviceName', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-device-name\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.deviceName}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Naming Series</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.namingSeries || ''}\n                        onChange={(e) => handleFieldChange('namingSeries', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-naming-series\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.namingSeries}</div>\n                    )}\n                  </div>\n                </div>\n                \n                <div className=\"mt-6\">\n                  <Label className=\"text-xs font-medium text-gray-700\">Comments</Label>\n                  {isEditing ? (\n                    <Textarea \n                      value={currentData.comments || ''}\n                      onChange={(e) => handleFieldChange('comments', e.target.value)}\n                      className=\"text-sm mt-1\"\n                      rows={3}\n                      placeholder=\"Add any additional notes or comments about this device...\"\n                      data-testid=\"edit-comments\"\n                    />\n                  ) : (\n                    <div className=\"text-sm text-gray-900 mt-1\">\n                      {currentData.comments || \"No comments\"}\n                    </div>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* IPC CPU Tab */}\n          <TabsContent value=\"ipc-cpu\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-base\">\n                  <Cpu size={18} />\n                  Hardware Specifications\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Manufacture</Label>\n                    {isEditing ? (\n                      <Select\n                        value={currentData.manufacture || ''}\n                        onValueChange={(value) => handleFieldChange('manufacture', value)}\n                      >\n                        <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-manufacture\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {manufactureOptions.map(option => (\n                            <SelectItem key={option} value={option}>{option}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.manufacture}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Model</Label>\n                    {isEditing ? (\n                      <Select\n                        value={currentData.model || ''}\n                        onValueChange={(value) => handleFieldChange('model', value)}\n                      >\n                        <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-model\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {modelOptions.map(option => (\n                            <SelectItem key={option} value={option}>{option}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.model}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Serial No</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.serialNo || ''}\n                        onChange={(e) => handleFieldChange('serialNo', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-serial-no\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.serialNo}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Mainboard</Label>\n                    {isEditing ? (\n                      <Select\n                        value={currentData.mainboard || ''}\n                        onValueChange={(value) => handleFieldChange('mainboard', value)}\n                      >\n                        <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-mainboard\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {mainboardOptions.map(option => (\n                            <SelectItem key={option} value={option}>{option}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.mainboard}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">CPU</Label>\n                    {isEditing ? (\n                      <Select\n                        value={currentData.cpu || ''}\n                        onValueChange={(value) => handleFieldChange('cpu', value)}\n                      >\n                        <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-cpu\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {cpuOptions.map(option => (\n                            <SelectItem key={option} value={option}>{option}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.cpu}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Flash</Label>\n                    {isEditing ? (\n                      <Select\n                        value={currentData.flash || ''}\n                        onValueChange={(value) => handleFieldChange('flash', value)}\n                      >\n                        <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-flash\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {flashOptions.map(option => (\n                            <SelectItem key={option} value={option}>{option}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.flash}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Power Supply</Label>\n                    {isEditing ? (\n                      <Select\n                        value={currentData.powerSupply || ''}\n                        onValueChange={(value) => handleFieldChange('powerSupply', value)}\n                      >\n                        <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-power-supply\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {powerSupplyOptions.map(option => (\n                            <SelectItem key={option} value={option}>{option}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.powerSupply}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Memory</Label>\n                    {isEditing ? (\n                      <Select\n                        value={currentData.memory || ''}\n                        onValueChange={(value) => handleFieldChange('memory', value)}\n                      >\n                        <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-memory\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {memoryOptions.map(option => (\n                            <SelectItem key={option} value={option}>{option}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.memory}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Operating System</Label>\n                    {isEditing ? (\n                      <Select\n                        value={currentData.operatingSystem || ''}\n                        onValueChange={(value) => handleFieldChange('operatingSystem', value)}\n                      >\n                        <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-os\">\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          {osOptions.map(option => (\n                            <SelectItem key={option} value={option}>{option}</SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.operatingSystem}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">MAC Address 1</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.mac1 || ''}\n                        onChange={(e) => handleFieldChange('mac1', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-mac1\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.mac1}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">MAC Address 2</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.mac2 || ''}\n                        onChange={(e) => handleFieldChange('mac2', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-mac2\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.mac2}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Image Version</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.imageVersion || ''}\n                        onChange={(e) => handleFieldChange('imageVersion', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-image-version\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.imageVersion}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Serial Number of IPC</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.serialNumberOfIpc || ''}\n                        onChange={(e) => handleFieldChange('serialNumberOfIpc', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-serial-number-ipc\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.serialNumberOfIpc}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">Device Manager Version</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.deviceManagerVersion || ''}\n                        onChange={(e) => handleFieldChange('deviceManagerVersion', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-device-manager-version\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.deviceManagerVersion}</div>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Connectivity Tab */}\n          <TabsContent value=\"connectivity\" className=\"mt-6\">\n            <div className=\"space-y-6\">\n              {/* Remote Access Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-base\">\n                    <Wifi size={18} />\n                    Remote Access Configuration\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">AnyDesk ID</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.anydesk || ''}\n                          onChange={(e) => handleFieldChange('anydesk', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          placeholder=\"123456789\"\n                          data-testid=\"edit-anydesk\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.anydesk || 'Not configured'}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">TeamViewer ID</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.teamviewer || ''}\n                          onChange={(e) => handleFieldChange('teamviewer', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          placeholder=\"123 456 789\"\n                          data-testid=\"edit-teamviewer\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.teamviewer || 'Not configured'}</div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Network 1 Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-base\">\n                    <Router size={18} />\n                    Network 1 Configuration\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">Network Name</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network1Name || ''}\n                          onChange={(e) => handleFieldChange('network1Name', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network1-name\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network1Name}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">Virtual Device</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network1VirtualDevice || ''}\n                          onChange={(e) => handleFieldChange('network1VirtualDevice', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network1-virtual-device\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network1VirtualDevice}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">Gateway</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network1Gateway || ''}\n                          onChange={(e) => handleFieldChange('network1Gateway', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network1-gateway\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network1Gateway}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">Address</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network1Address || ''}\n                          onChange={(e) => handleFieldChange('network1Address', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network1-address\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network1Address}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">DHCP</Label>\n                      {isEditing ? (\n                        <Select\n                          value={currentData.network1Dhcp || ''}\n                          onValueChange={(value) => handleFieldChange('network1Dhcp', value)}\n                        >\n                          <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-network1-dhcp\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {dhcpOptions.map(dhcp => (\n                              <SelectItem key={dhcp} value={dhcp}>{dhcp}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network1Dhcp}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">Subnet Mask</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network1SubnetMask || ''}\n                          onChange={(e) => handleFieldChange('network1SubnetMask', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network1-subnet\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network1SubnetMask}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">DNS Servers</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network1DnsServers || ''}\n                          onChange={(e) => handleFieldChange('network1DnsServers', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network1-dns\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network1DnsServers}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">MAC Address</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network1MacAddress || ''}\n                          onChange={(e) => handleFieldChange('network1MacAddress', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network1-mac\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network1MacAddress}</div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Network 2 Card */}\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center gap-2 text-base\">\n                    <Router size={18} />\n                    Network 2 Configuration\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">Network Name</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network2Name || ''}\n                          onChange={(e) => handleFieldChange('network2Name', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network2-name\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network2Name}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">Virtual Device</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network2VirtualDevice || ''}\n                          onChange={(e) => handleFieldChange('network2VirtualDevice', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network2-virtual-device\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network2VirtualDevice}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">Gateway</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network2Gateway || ''}\n                          onChange={(e) => handleFieldChange('network2Gateway', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network2-gateway\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network2Gateway}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">Address</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network2Address || ''}\n                          onChange={(e) => handleFieldChange('network2Address', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network2-address\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network2Address}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">DHCP</Label>\n                      {isEditing ? (\n                        <Select\n                          value={currentData.network2Dhcp || ''}\n                          onValueChange={(value) => handleFieldChange('network2Dhcp', value)}\n                        >\n                          <SelectTrigger className=\"text-sm h-8 mt-1\" data-testid=\"edit-network2-dhcp\">\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {dhcpOptions.map(dhcp => (\n                              <SelectItem key={dhcp} value={dhcp}>{dhcp}</SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network2Dhcp}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">Subnet Mask</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network2SubnetMask || ''}\n                          onChange={(e) => handleFieldChange('network2SubnetMask', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network2-subnet\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network2SubnetMask}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">DNS Servers</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network2DnsServers || ''}\n                          onChange={(e) => handleFieldChange('network2DnsServers', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network2-dns\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network2DnsServers}</div>\n                      )}\n                    </div>\n                    <div>\n                      <Label className=\"text-xs font-medium text-gray-700\">MAC Address</Label>\n                      {isEditing ? (\n                        <Input \n                          value={currentData.network2MacAddress || ''}\n                          onChange={(e) => handleFieldChange('network2MacAddress', e.target.value)}\n                          className=\"text-sm h-8 mt-1\"\n                          data-testid=\"edit-network2-mac\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 mt-1\">{currentData.network2MacAddress}</div>\n                      )}\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          {/* Router Tab */}\n          <TabsContent value=\"router\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-base\">\n                  <Router size={18} />\n                  Router Configuration\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-center py-12\">\n                  <Router size={48} className=\"mx-auto mb-4 text-gray-300\" />\n                  <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Router Configuration</h3>\n                  <p className=\"text-xs text-gray-600\">Router settings and configuration will be available here</p>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          {/* Passwords Tab */}\n          <TabsContent value=\"passwords\" className=\"mt-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2 text-base\">\n                  <Key size={18} />\n                  Security & Credentials\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">IPC Username</Label>\n                    {isEditing ? (\n                      <Input \n                        value={currentData.ipcUsername || ''}\n                        onChange={(e) => handleFieldChange('ipcUsername', e.target.value)}\n                        className=\"text-sm h-8 mt-1\"\n                        data-testid=\"edit-ipc-username\"\n                      />\n                    ) : (\n                      <div className=\"text-sm text-gray-900 mt-1\">{currentData.ipcUsername}</div>\n                    )}\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">IPC Password</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      {isEditing ? (\n                        <Input \n                          type={showPasswords[selectedIPC.id] ? \"text\" : \"password\"}\n                          value={currentData.ipcPassword || ''}\n                          onChange={(e) => handleFieldChange('ipcPassword', e.target.value)}\n                          className=\"text-sm h-8\"\n                          data-testid=\"edit-ipc-password\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 flex-1\">\n                          {showPasswords[selectedIPC.id] ? currentData.ipcPassword : '••••••••••••'}\n                        </div>\n                      )}\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\"\n                        onClick={() => togglePasswordVisibility(selectedIPC.id)}\n                        data-testid=\"toggle-ipc-password-visibility\"\n                      >\n                        {showPasswords[selectedIPC.id] ? <EyeOff size={14} /> : <Eye size={14} />}\n                      </Button>\n                    </div>\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium text-gray-700\">AnyDesk Password</Label>\n                    <div className=\"flex items-center gap-2 mt-1\">\n                      {isEditing ? (\n                        <Input \n                          type={showPasswords[`anydesk_${selectedIPC.id}`] ? \"text\" : \"password\"}\n                          value={currentData.anydeskPassword || ''}\n                          onChange={(e) => handleFieldChange('anydeskPassword', e.target.value)}\n                          className=\"text-sm h-8\"\n                          data-testid=\"edit-anydesk-password\"\n                        />\n                      ) : (\n                        <div className=\"text-sm text-gray-900 flex-1\">\n                          {showPasswords[`anydesk_${selectedIPC.id}`] ? currentData.anydeskPassword : '••••••••••••'}\n                        </div>\n                      )}\n                      <Button \n                        size=\"sm\" \n                        variant=\"ghost\"\n                        onClick={() => setShowPasswords(prev => ({\n                          ...prev,\n                          [`anydesk_${selectedIPC.id}`]: !prev[`anydesk_${selectedIPC.id}`]\n                        }))}\n                        data-testid=\"toggle-anydesk-password-visibility\"\n                      >\n                        {showPasswords[`anydesk_${selectedIPC.id}`] ? <EyeOff size={14} /> : <Eye size={14} />}\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}","size_bytes":88736},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Settings } from \"lucide-react\";\n\ninterface LoginData {\n  email: string;\n  password: string;\n}\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState<LoginData>({\n    email: '',\n    password: ''\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginData) => {\n      return await apiRequest('/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(data)\n      });\n    },\n    onSuccess: (data) => {\n      toast({\n        title: \"Login Successful\",\n        description: `Welcome back, ${data.user.name}!`,\n      });\n      // Store auth token or user info if needed\n      localStorage.setItem('authToken', data.token);\n      localStorage.setItem('user', JSON.stringify(data.user));\n      setLocation('/');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Login Failed\",\n        description: error.message || \"Invalid credentials. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.email || !formData.password) {\n      toast({\n        title: \"Validation Error\",\n        description: \"Please fill in all fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    loginMutation.mutate(formData);\n  };\n\n  const handleChange = (field: keyof LoginData) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({\n      ...prev,\n      [field]: e.target.value\n    }));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"flex justify-center mb-4\">\n            <div className=\"p-3 bg-primary rounded-full\">\n              <Settings className=\"text-white\" size={24} />\n            </div>\n          </div>\n          <CardTitle className=\"text-xl\">AutomationHub</CardTitle>\n          <p className=\"text-sm text-gray-600\">Sign in to access your dashboard</p>\n        </CardHeader>\n        \n        <CardContent>\n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"email\" className=\"text-sm font-medium\">\n                Email Address\n              </Label>\n              <Input\n                id=\"email\"\n                type=\"email\"\n                value={formData.email}\n                onChange={handleChange('email')}\n                placeholder=\"Enter your email\"\n                className=\"mt-1\"\n                data-testid=\"input-email\"\n                disabled={loginMutation.isPending}\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"password\" className=\"text-sm font-medium\">\n                Password\n              </Label>\n              <Input\n                id=\"password\"\n                type=\"password\"\n                value={formData.password}\n                onChange={handleChange('password')}\n                placeholder=\"Enter your password\"\n                className=\"mt-1\"\n                data-testid=\"input-password\"\n                disabled={loginMutation.isPending}\n              />\n            </div>\n            \n            <Button\n              type=\"submit\"\n              className=\"w-full\"\n              disabled={loginMutation.isPending}\n              data-testid=\"button-login\"\n            >\n              {loginMutation.isPending ? \"Signing in...\" : \"Sign In\"}\n            </Button>\n            \n            <div className=\"text-center mt-4\">\n              <p className=\"text-xs text-gray-600\">\n                Demo credentials: admin@company.com / admin123\n              </p>\n            </div>\n          </form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":4311},"client/src/pages/project-details.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { IpcManagement, Project as DBProject, InsertProject } from \"@shared/schema\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Building2,\n  Cpu,\n  Droplets,\n  Zap,\n  Settings,\n  CheckCircle,\n  ArrowLeft,\n  Calendar,\n  MapPin,\n  Plus,\n  Eye,\n  Edit,\n  Save,\n  X,\n  Check,\n  Trash2,\n  Gauge,\n} from \"lucide-react\";\n\n// Use the database project type from schema\ntype Project = DBProject;\n\nexport default function ProjectDetails() {\n  const [selectedProjectId, setSelectedProjectId] = useState<string | null>(\n    null,\n  );\n  const [editingProjectId, setEditingProjectId] = useState<string | null>(null);\n  const [editFormData, setEditFormData] = useState<Partial<Project>>({});\n  const [showNewProjectForm, setShowNewProjectForm] = useState(false);\n  const [newProjectData, setNewProjectData] = useState<Partial<InsertProject>>({});\n\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  // Fetch projects from database\n  const { data: projects = [], isLoading: isLoadingProjects } = useQuery<Project[]>({\n    queryKey: ['/api/projects'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Fetch IPC devices for dropdown\n  const { data: ipcDevices = [], isLoading: isLoadingIpcDevices } = useQuery<IpcManagement[]>({\n    queryKey: ['/api/ipc-management'],\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  // Create project mutation\n  const createProjectMutation = useMutation({\n    mutationFn: async (projectData: InsertProject) => {\n      const response = await fetch(\"/api/projects\", {\n        method: \"POST\",\n        body: JSON.stringify(projectData),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create project\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      setShowNewProjectForm(false);\n      setNewProjectData({});\n      toast({\n        title: \"Success\",\n        description: \"Project created successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to create project\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error creating project:\", error);\n    },\n  });\n\n  // Update project mutation\n  const updateProjectMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: Partial<InsertProject> }) => {\n      const response = await fetch(`/api/projects/${id}`, {\n        method: \"PUT\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to update project\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      setEditingProjectId(null);\n      setEditFormData({});\n      toast({\n        title: \"Success\",\n        description: \"Project updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update project\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error updating project:\", error);\n    },\n  });\n\n  // Delete project mutation\n  const deleteProjectMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/projects/${id}`, {\n        method: \"DELETE\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to delete project\");\n      }\n      return response.ok;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/projects'] });\n      toast({\n        title: \"Success\",\n        description: \"Project deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to delete project\",\n        variant: \"destructive\",\n      });\n      console.error(\"Error deleting project:\", error);\n    },\n  });\n\n  const [selectedSystems, setSelectedSystems] = useState<string[]>([]);\n\n  const plantSystems = [\n    {\n      id: \"ETP\",\n      name: \"Effluent Treatment Plant\",\n      capacity: \"500 KLD\",\n      icon: Droplets,\n      color: \"bg-blue-500\",\n    },\n    {\n      id: \"MBR\",\n      name: \"Membrane Bioreactor\",\n      capacity: \"300 KLD\",\n      icon: Settings,\n      color: \"bg-green-500\",\n    },\n    {\n      id: \"RO\",\n      name: \"Reverse Osmosis\",\n      capacity: \"200 KLD\",\n      icon: Droplets,\n      color: \"bg-cyan-500\",\n    },\n    {\n      id: \"VTS\",\n      name: \"Vapor Treatment System\",\n      capacity: \"150 KLD\",\n      icon: Zap,\n      color: \"bg-purple-500\",\n    },\n    {\n      id: \"REJECT_RO\",\n      name: \"Reject RO\",\n      capacity: \"100 KLD\",\n      icon: Droplets,\n      color: \"bg-orange-500\",\n    },\n  ];\n\n  const selectedProject = selectedProjectId\n    ? projects.find((p) => p.id === selectedProjectId)\n    : null;\n\n  const handleSystemToggle = (systemId: string) => {\n    setSelectedSystems((prev) =>\n      prev.includes(systemId)\n        ? prev.filter((id) => id !== systemId)\n        : [...prev, systemId],\n    );\n  };\n\n  const isSystemSelected = (systemId: string) => {\n    return selectedProject\n      ? (selectedProject.selectedSystems || []).includes(systemId)\n      : false;\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \"Active\":\n        return \"bg-green-500\";\n      case \"In Progress\":\n        return \"bg-blue-500\";\n      case \"Planning\":\n        return \"bg-yellow-500\";\n      case \"Completed\":\n        return \"bg-gray-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  const statusOptions = [\"Active\", \"In Progress\", \"Planning\", \"Completed\"];\n  const systemOptions = [\"ETP\", \"MBR\", \"RO\", \"VTS\", \"REJECT_RO\"];\n\n  const handleEditStart = (project: Project) => {\n    setEditingProjectId(project.id);\n    setEditFormData({ ...project });\n  };\n\n  const handleEditCancel = () => {\n    setEditingProjectId(null);\n    setEditFormData({});\n  };\n\n  const handleEditSave = () => {\n    if (editingProjectId && editFormData) {\n      updateProjectMutation.mutate({ \n        id: editingProjectId, \n        data: editFormData as Partial<InsertProject> \n      });\n    }\n  };\n\n  const handleFieldChange = (field: keyof Project, value: any) => {\n    setEditFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleSystemToggleEdit = (systemId: string) => {\n    const currentSystems = editFormData.selectedSystems || [];\n    const updatedSystems = currentSystems.includes(systemId)\n      ? currentSystems.filter((s) => s !== systemId)\n      : [...currentSystems, systemId];\n    handleFieldChange(\"selectedSystems\", updatedSystems);\n  };\n\n  const handleDeleteProject = (projectId: string) => {\n    deleteProjectMutation.mutate(projectId);\n  };\n\n  const handleNewProject = () => {\n    setShowNewProjectForm(true);\n    setNewProjectData({\n      projectNumber: \"\",\n      projectName: \"\",\n      location: \"\",\n      status: \"Planning\",\n      ipcName: \"\",\n      selectedSystems: [],\n      createdDate: new Date(),\n      capacity: \"\",\n    });\n  };\n\n  const handleNewProjectSave = () => {\n    if (newProjectData.projectName && newProjectData.projectNumber) {\n      createProjectMutation.mutate(newProjectData as InsertProject);\n    }\n  };\n\n  const handleNewProjectCancel = () => {\n    setShowNewProjectForm(false);\n    setNewProjectData({});\n  };\n\n  const handleNewProjectChange = (field: keyof InsertProject, value: any) => {\n    setNewProjectData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  // If no project selected, show project list\n  if (!selectedProjectId) {\n    return (\n      <div className=\"min-h-screen bg-background\">\n        <Header\n          title=\"Project Details\"\n          subtitle=\"Manage all automation projects and configurations\"\n        />\n\n        <div className=\"p-6\">\n          <div className=\"flex justify-between items-center mb-6\">\n            <h3 className=\"text-lg font-semibold text-gray-900\">\n              All Projects ({projects.length})\n            </h3>\n            <Button onClick={handleNewProject} data-testid=\"button-new-project\">\n              <Plus size={16} className=\"mr-2\" />\n              New Project\n            </Button>\n          </div>\n\n          {/* New Project Form */}\n          {showNewProjectForm && (\n            <Card className=\"mb-6 border-2 border-primary\">\n              <CardHeader>\n                <CardTitle className=\"text-base text-primary\">\n                  Create New Project\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n                  <div>\n                    <Label className=\"text-xs font-medium\">\n                      Project Number\n                    </Label>\n                    <Input\n                      value={newProjectData.projectNumber || \"\"}\n                      onChange={(e) =>\n                        handleNewProjectChange(\"projectNumber\", e.target.value)\n                      }\n                      className=\"text-sm h-8 mt-1\"\n                      placeholder=\"PRJ-2025-XXX\"\n                      data-testid=\"new-project-number\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium\">Project Name</Label>\n                    <Input\n                      value={newProjectData.projectName || \"\"}\n                      onChange={(e) =>\n                        handleNewProjectChange(\"projectName\", e.target.value)\n                      }\n                      className=\"text-sm h-8 mt-1\"\n                      placeholder=\"Enter project name\"\n                      data-testid=\"new-project-name\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium\">Location</Label>\n                    <Input\n                      value={newProjectData.location || \"\"}\n                      onChange={(e) =>\n                        handleNewProjectChange(\"location\", e.target.value)\n                      }\n                      className=\"text-sm h-8 mt-1\"\n                      placeholder=\"Project location\"\n                      data-testid=\"new-location\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium\">Status</Label>\n                    <select\n                      value={newProjectData.status || \"Planning\"}\n                      onChange={(e) =>\n                        handleNewProjectChange(\"status\", e.target.value)\n                      }\n                      className=\"text-sm h-8 px-2 border border-gray-300 rounded-md bg-white w-full mt-1\"\n                      data-testid=\"new-status\"\n                    >\n                      {statusOptions.map((status) => (\n                        <option key={status} value={status}>\n                          {status}\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium\">Capacity</Label>\n                    <Input\n                      value={newProjectData.capacity || \"\"}\n                      onChange={(e) =>\n                        handleNewProjectChange(\"capacity\", e.target.value)\n                      }\n                      className=\"text-sm h-8 mt-1\"\n                      placeholder=\"500 KLD\"\n                      data-testid=\"new-capacity\"\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium\">PLC Name</Label>\n                    <Input\n                      value=\"\"\n                      onChange={() => {}}\n                      className=\"text-sm h-8 mt-1\"\n                      placeholder=\"PLC model (not implemented)\"\n                      data-testid=\"new-plc\"\n                      disabled\n                    />\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium\">IPC Name</Label>\n                    <select\n                      value={newProjectData.ipcName || \"\"}\n                      onChange={(e) =>\n                        handleNewProjectChange(\"ipcName\", e.target.value)\n                      }\n                      className=\"text-sm h-8 px-2 border border-gray-300 rounded-md bg-white w-full mt-1\"\n                      data-testid=\"new-ipc\"\n                      disabled={isLoadingIpcDevices}\n                    >\n                      <option value=\"\">Select IPC Device</option>\n                      {ipcDevices.map((ipc) => (\n                        <option key={ipc.id} value={ipc.deviceName}>\n                          {ipc.deviceName} ({ipc.amsNetId})\n                        </option>\n                      ))}\n                    </select>\n                  </div>\n                  <div>\n                    <Label className=\"text-xs font-medium\">Created Date</Label>\n                    <Input\n                      type=\"date\"\n                      value={newProjectData.createdDate ? \n                        (newProjectData.createdDate instanceof Date ? \n                          newProjectData.createdDate.toISOString().split('T')[0] :\n                          new Date(newProjectData.createdDate).toISOString().split('T')[0]\n                        ) : \"\"\n                      }\n                      onChange={(e) =>\n                        handleNewProjectChange(\"createdDate\", new Date(e.target.value))\n                      }\n                      className=\"text-sm h-8 mt-1\"\n                      data-testid=\"new-date\"\n                    />\n                  </div>\n                </div>\n                <div className=\"mt-4\">\n                  <Label className=\"text-xs font-medium\">Plant Systems</Label>\n                  <div className=\"flex flex-wrap gap-2 mt-2\">\n                    {systemOptions.map((system) => (\n                      <label\n                        key={system}\n                        className=\"flex items-center space-x-2 cursor-pointer\"\n                      >\n                        <Checkbox\n                          checked={(\n                            newProjectData.selectedSystems || []\n                          ).includes(system)}\n                          onCheckedChange={() => {\n                            const currentSystems =\n                              newProjectData.selectedSystems || [];\n                            const updatedSystems = currentSystems.includes(\n                              system,\n                            )\n                              ? currentSystems.filter((s) => s !== system)\n                              : [...currentSystems, system];\n                            handleNewProjectChange(\n                              \"selectedSystems\",\n                              updatedSystems,\n                            );\n                          }}\n                          data-testid={`new-system-${system.toLowerCase()}`}\n                        />\n                        <span className=\"text-sm\">{system}</span>\n                      </label>\n                    ))}\n                  </div>\n                </div>\n                <div className=\"flex justify-end gap-2 mt-6\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={handleNewProjectCancel}\n                    data-testid=\"cancel-new-project\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    onClick={handleNewProjectSave}\n                    data-testid=\"save-new-project\"\n                  >\n                    Create Project\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur-sm\">\n            <CardHeader className=\"pb-4 border-b bg-gradient-to-r from-blue-50 to-indigo-50\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"flex items-center gap-3 text-xl font-semibold text-gray-800\">\n                    <div className=\"p-2 bg-blue-100 rounded-lg\">\n                      <Building2 size={22} className=\"text-blue-600\" />\n                    </div>\n                    Project Portfolio\n                  </CardTitle>\n                  <p className=\"text-sm text-gray-600 mt-1\">Industrial automation projects overview</p>\n                </div>\n                <Button\n                  onClick={handleNewProject}\n                  className=\"flex items-center gap-2 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-4 py-2 rounded-lg shadow-md transition-all duration-200 transform hover:scale-105\"\n                  data-testid=\"button-new-project\"\n                >\n                  <Plus size={16} />\n                  New Project\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-0\">\n              <div className=\"overflow-x-auto\">\n                <table className=\"w-full\">\n                  <thead className=\"bg-gradient-to-r from-gray-50 to-gray-100 border-b-2 border-gray-200\">\n                    <tr>\n                      <th className=\"text-left py-4 px-6 font-semibold text-sm text-gray-700\">\n                        Project Details\n                      </th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-sm text-gray-700\">\n                        Location\n                      </th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-sm text-gray-700\">\n                        Status\n                      </th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-sm text-gray-700\">\n                        Capacity\n                      </th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-sm text-gray-700\">\n                        IPC Device\n                      </th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-sm text-gray-700\">\n                        Created\n                      </th>\n                      <th className=\"text-left py-4 px-6 font-semibold text-sm text-gray-700\">\n                        Systems\n                      </th>\n                      <th className=\"text-center py-4 px-6 font-semibold text-sm text-gray-700\">\n                        Actions\n                      </th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {projects.length === 0 ? (\n                      <tr>\n                        <td colSpan={8} className=\"py-16 text-center\">\n                          <div className=\"max-w-sm mx-auto\">\n                            <div className=\"p-4 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-full w-20 h-20 mx-auto mb-6 flex items-center justify-center\">\n                              <Building2\n                                size={32}\n                                className=\"text-blue-500\"\n                              />\n                            </div>\n                            <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                              No Projects Yet\n                            </h3>\n                            <p className=\"text-sm text-gray-600 mb-6\">\n                              Start managing your industrial automation projects by creating your first project\n                            </p>\n                            <Button \n                              onClick={handleNewProject}\n                              className=\"bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-6 py-2 shadow-lg\"\n                            >\n                              <Plus size={16} className=\"mr-2\" />\n                              Create First Project\n                            </Button>\n                          </div>\n                        </td>\n                      </tr>\n                    ) : (\n                      projects.map((project, index) => {\n                        const isEditing = editingProjectId === project.id;\n                        return (\n                          <tr\n                            key={project.id}\n                            className={`border-b border-gray-100 transition-all duration-200 ${\n                              index % 2 === 0 ? \"bg-white\" : \"bg-gray-50/30\"\n                            } ${\n                              isEditing \n                                ? \"bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-300 shadow-md\" \n                                : \"hover:bg-gray-50 hover:shadow-sm\"\n                            }`}\n                            data-testid={`project-row-${project.id}`}\n                          >\n                            <td className=\"py-5 px-6\">\n                              {isEditing ? (\n                                <div className=\"space-y-2\">\n                                  <Input\n                                    value={editFormData.projectNumber || \"\"}\n                                    onChange={(e) =>\n                                      handleFieldChange(\n                                        \"projectNumber\",\n                                        e.target.value,\n                                      )\n                                    }\n                                    className=\"text-sm h-9 border-blue-200 focus:border-blue-400 bg-white\"\n                                    placeholder=\"Project Number\"\n                                    data-testid={`edit-project-number-${project.id}`}\n                                  />\n                                  <Input\n                                    value={editFormData.projectName || \"\"}\n                                    onChange={(e) =>\n                                      handleFieldChange(\n                                        \"projectName\",\n                                        e.target.value,\n                                      )\n                                    }\n                                    className=\"text-sm h-9 border-blue-200 focus:border-blue-400 bg-white\"\n                                    placeholder=\"Project Name\"\n                                    data-testid={`edit-project-name-${project.id}`}\n                                  />\n                                </div>\n                              ) : (\n                                <div className=\"space-y-1\">\n                                  <div className=\"font-semibold text-gray-900 text-sm\">\n                                    {project.projectNumber}\n                                  </div>\n                                  <div className=\"text-gray-600 text-sm font-medium\">\n                                    {project.projectName}\n                                  </div>\n                                </div>\n                              )}\n                            </td>\n                            <td className=\"py-5 px-6\">\n                              {isEditing ? (\n                                <Input\n                                  value={editFormData.location || \"\"}\n                                  onChange={(e) =>\n                                    handleFieldChange(\n                                      \"location\",\n                                      e.target.value,\n                                    )\n                                  }\n                                  className=\"text-sm h-9 border-blue-200 focus:border-blue-400 bg-white\"\n                                  placeholder=\"Location\"\n                                  data-testid={`edit-location-${project.id}`}\n                                />\n                              ) : (\n                                <div className=\"flex items-center gap-2\">\n                                  <MapPin size={14} className=\"text-gray-400\" />\n                                  <span className=\"text-gray-700 text-sm\">\n                                    {project.location || 'Not specified'}\n                                  </span>\n                                </div>\n                              )}\n                            </td>\n                            <td className=\"py-5 px-6\">\n                              {isEditing ? (\n                                <select\n                                  value={editFormData.status || project.status}\n                                  onChange={(e) =>\n                                    handleFieldChange(\"status\", e.target.value)\n                                  }\n                                  className=\"text-sm h-9 px-3 border border-blue-200 focus:border-blue-400 rounded-md bg-white w-full\"\n                                  data-testid={`edit-status-${project.id}`}\n                                >\n                                  {statusOptions.map((status) => (\n                                    <option key={status} value={status}>\n                                      {status}\n                                    </option>\n                                  ))}\n                                </select>\n                              ) : (\n                                <Badge\n                                  variant=\"secondary\"\n                                  className={`text-xs text-white px-3 py-1.5 rounded-full font-medium shadow-sm ${getStatusColor(project.status)}`}\n                                >\n                                  {project.status}\n                                </Badge>\n                              )}\n                            </td>\n                            <td className=\"py-5 px-6\">\n                              {isEditing ? (\n                                <Input\n                                  value={editFormData.capacity || \"\"}\n                                  onChange={(e) =>\n                                    handleFieldChange(\n                                      \"capacity\",\n                                      e.target.value,\n                                    )\n                                  }\n                                  className=\"text-sm h-9 border-blue-200 focus:border-blue-400 bg-white\"\n                                  placeholder=\"e.g., 500 KLD\"\n                                  data-testid={`edit-capacity-${project.id}`}\n                                />\n                              ) : (\n                                <div className=\"flex items-center gap-2\">\n                                  <Gauge size={14} className=\"text-gray-400\" />\n                                  <span className=\"text-gray-700 text-sm font-medium\">\n                                    {project.capacity || 'Not specified'}\n                                  </span>\n                                </div>\n                              )}\n                            </td>\n                            <td className=\"py-5 px-6\">\n                              {isEditing ? (\n                                <select\n                                  value={editFormData.ipcName || \"\"}\n                                  onChange={(e) =>\n                                    handleFieldChange(\"ipcName\", e.target.value)\n                                  }\n                                  className=\"text-sm h-9 px-3 border border-blue-200 focus:border-blue-400 rounded-md bg-white w-full\"\n                                  data-testid={`edit-ipc-${project.id}`}\n                                  disabled={isLoadingIpcDevices}\n                                >\n                                  <option value=\"\">Select IPC Device</option>\n                                  {ipcDevices.map((ipc) => (\n                                    <option key={ipc.id} value={ipc.deviceName}>\n                                      {ipc.deviceName} ({ipc.amsNetId})\n                                    </option>\n                                  ))}\n                                </select>\n                              ) : (\n                                <div className=\"flex items-center gap-2\">\n                                  <Cpu size={14} className=\"text-gray-400\" />\n                                  <span className=\"text-gray-700 text-sm\">\n                                    {project.ipcName || 'Not assigned'}\n                                  </span>\n                                </div>\n                              )}\n                            </td>\n                            <td className=\"py-5 px-6\">\n                              {isEditing ? (\n                                <Input\n                                  type=\"date\"\n                                  value={editFormData.createdDate ? \n                                    (editFormData.createdDate instanceof Date ? \n                                      editFormData.createdDate.toISOString().split('T')[0] :\n                                      new Date(editFormData.createdDate).toISOString().split('T')[0]\n                                    ) : \"\"\n                                  }\n                                  onChange={(e) =>\n                                    handleFieldChange(\n                                      \"createdDate\",\n                                      new Date(e.target.value),\n                                    )\n                                  }\n                                  className=\"text-sm h-9 border-blue-200 focus:border-blue-400 bg-white\"\n                                  data-testid={`edit-date-${project.id}`}\n                                />\n                              ) : (\n                                <div className=\"flex items-center gap-2\">\n                                  <Calendar size={14} className=\"text-gray-400\" />\n                                  <span className=\"text-gray-700 text-sm\">\n                                    {project.createdDate ? \n                                      (project.createdDate instanceof Date ? \n                                        project.createdDate.toLocaleDateString() :\n                                        new Date(project.createdDate).toLocaleDateString()\n                                      ) : 'Not set'\n                                    }\n                                  </span>\n                                </div>\n                              )}\n                            </td>\n                            <td className=\"py-5 px-6\">\n                              {isEditing ? (\n                                <div className=\"space-y-2\">\n                                  <div className=\"text-xs font-medium text-gray-600 mb-2\">\n                                    Plant Systems:\n                                  </div>\n                                  <div className=\"flex flex-wrap gap-2 max-w-xs\">\n                                    {systemOptions.map((system) => (\n                                      <label\n                                        key={system}\n                                        className=\"flex items-center space-x-2 cursor-pointer bg-white rounded-lg p-2 border border-blue-200 hover:border-blue-300 transition-colors\"\n                                      >\n                                        <Checkbox\n                                          checked={(\n                                            editFormData.selectedSystems || []\n                                          ).includes(system)}\n                                          onCheckedChange={() =>\n                                            handleSystemToggleEdit(system)\n                                          }\n                                          data-testid={`edit-system-${system.toLowerCase()}-${project.id}`}\n                                        />\n                                        <span className=\"text-xs font-medium\">\n                                          {system}\n                                        </span>\n                                      </label>\n                                    ))}\n                                  </div>\n                                </div>\n                              ) : (\n                                <div className=\"flex flex-wrap gap-1.5\">\n                                  {(project.selectedSystems || [])\n                                    .slice(0, 2)\n                                    .map((system) => (\n                                      <Badge\n                                        key={system}\n                                        variant=\"outline\"\n                                        className=\"text-xs px-2.5 py-1 bg-blue-50 text-blue-700 border-blue-200 font-medium\"\n                                      >\n                                        {system}\n                                      </Badge>\n                                    ))}\n                                  {(project.selectedSystems || []).length > 2 && (\n                                    <Badge\n                                      variant=\"outline\"\n                                      className=\"text-xs px-2.5 py-1 bg-gray-100 text-gray-600 border-gray-300 font-medium\"\n                                    >\n                                      +{(project.selectedSystems || []).length - 2}\n                                    </Badge>\n                                  )}\n                                  {(project.selectedSystems || []).length === 0 && (\n                                    <span className=\"text-xs text-gray-500 italic\">No systems selected</span>\n                                  )}\n                                </div>\n                              )}\n                            </td>\n                            <td className=\"py-5 px-6\">\n                              <div className=\"flex items-center justify-center gap-1\">\n                                {isEditing ? (\n                                  <>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"ghost\"\n                                      onClick={handleEditSave}\n                                      data-testid={`save-project-${project.id}`}\n                                      className=\"h-8 w-8 p-0 text-green-600 hover:text-green-700 hover:bg-green-50 transition-all duration-200\"\n                                      title=\"Save changes\"\n                                      disabled={updateProjectMutation.isPending}\n                                    >\n                                      <Check size={16} />\n                                    </Button>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"ghost\"\n                                      onClick={handleEditCancel}\n                                      data-testid={`cancel-edit-${project.id}`}\n                                      className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700 hover:bg-red-50 transition-all duration-200\"\n                                      title=\"Cancel edit\"\n                                    >\n                                      <X size={16} />\n                                    </Button>\n                                  </>\n                                ) : (\n                                  <>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"ghost\"\n                                      onClick={() => handleEditStart(project)}\n                                      data-testid={`edit-project-${project.id}`}\n                                      className=\"h-8 w-8 p-0 text-blue-600 hover:text-blue-700 hover:bg-blue-50 transition-all duration-200\"\n                                      title=\"Edit project\"\n                                    >\n                                      <Edit size={16} />\n                                    </Button>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"ghost\"\n                                      onClick={() =>\n                                        setSelectedProjectId(project.id)\n                                      }\n                                      data-testid={`view-project-${project.id}`}\n                                      className=\"h-8 w-8 p-0 text-gray-600 hover:text-gray-700 hover:bg-gray-50 transition-all duration-200\"\n                                      title=\"View details\"\n                                    >\n                                      <Eye size={16} />\n                                    </Button>\n                                    <Button\n                                      size=\"sm\"\n                                      variant=\"ghost\"\n                                      onClick={() =>\n                                        handleDeleteProject(project.id)\n                                      }\n                                      data-testid={`delete-project-${project.id}`}\n                                      className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700 hover:bg-red-50 transition-all duration-200\"\n                                      title=\"Delete project\"\n                                      disabled={deleteProjectMutation.isPending}\n                                    >\n                                      <Trash2 size={16} />\n                                    </Button>\n                                  </>\n                                )}\n                              </div>\n                            </td>\n                          </tr>\n                        );\n                      })\n                    )}\n                  </tbody>\n                </table>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  // Show detailed view for selected project\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header\n        title={selectedProject?.projectName || \"Project Details\"}\n        subtitle={`${selectedProject?.projectNumber} - Detailed Configuration`}\n      />\n\n      <div className=\"p-6\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => setSelectedProjectId(null)}\n          className=\"mb-4\"\n          data-testid=\"button-back-to-list\"\n        >\n          <ArrowLeft size={16} className=\"mr-2\" />\n          Back to Project List\n        </Button>\n      </div>\n\n      <div className=\"px-6 pb-6 space-y-6\">\n        {/* Project Information Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-base\">\n              <Building2 size={18} />\n              Project Information\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-xs font-medium text-gray-700\">\n                  Project Number\n                </Label>\n                <Input\n                  value={selectedProject?.projectNumber || \"\"}\n                  className=\"mt-1 text-sm\"\n                  readOnly\n                  data-testid=\"input-project-number\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-xs font-medium text-gray-700\">\n                  Project Name\n                </Label>\n                <Input\n                  value={selectedProject?.projectName || \"\"}\n                  className=\"mt-1 text-sm\"\n                  data-testid=\"input-project-name\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-xs font-medium text-gray-700\">\n                  Location\n                </Label>\n                <Input\n                  value={selectedProject?.location || \"\"}\n                  className=\"mt-1 text-sm\"\n                  data-testid=\"input-location\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-xs font-medium text-gray-700\">\n                  Status\n                </Label>\n                <Badge\n                  variant=\"secondary\"\n                  className={`mt-2 text-xs text-white ${getStatusColor(selectedProject?.status || \"\")}`}\n                >\n                  {selectedProject?.status}\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* PLC/IPC Information Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-base\">\n              <Cpu size={18} />\n              PLC & IPC Configuration\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <Label className=\"text-xs font-medium text-gray-700\">\n                  PLC Name\n                </Label>\n                <Input\n                  value=\"Not configured\"\n                  className=\"mt-1 text-sm\"\n                  data-testid=\"input-plc-name\"\n                  disabled\n                />\n              </div>\n              <div>\n                <Label className=\"text-xs font-medium text-gray-700\">\n                  IPC Name\n                </Label>\n                <Input\n                  value={selectedProject?.ipcName || \"\"}\n                  className=\"mt-1 text-sm\"\n                  data-testid=\"input-ipc-name\"\n                />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Plant Systems Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base\">\n              Plant Systems Configuration\n            </CardTitle>\n            <p className=\"text-xs text-gray-600\">\n              Select systems to include in this project\n            </p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {plantSystems.map((system) => {\n                const Icon = system.icon;\n                const selected = isSystemSelected(system.id);\n\n                return (\n                  <div\n                    key={system.id}\n                    className={`border rounded-lg p-4 cursor-pointer transition-all ${\n                      selected\n                        ? \"border-primary bg-primary/5 shadow-md\"\n                        : \"border-gray-200 hover:border-gray-300\"\n                    }`}\n                    onClick={() => handleSystemToggle(system.id)}\n                    data-testid={`system-${system.id.toLowerCase()}`}\n                  >\n                    <div className=\"flex items-start space-x-3\">\n                      <div\n                        className={`p-2 rounded-lg ${system.color} text-white`}\n                      >\n                        <Icon size={16} />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"text-sm font-medium text-gray-900 truncate\">\n                            {system.name}\n                          </h4>\n                          {selected && (\n                            <CheckCircle size={16} className=\"text-primary\" />\n                          )}\n                        </div>\n                        <p className=\"text-xs text-gray-600 mt-1\">\n                          Capacity: {system.capacity}\n                        </p>\n                        <div className=\"mt-2 flex items-center\">\n                          <Checkbox\n                            checked={selected}\n                            onCheckedChange={() =>\n                              handleSystemToggle(system.id)\n                            }\n                            data-testid={`checkbox-${system.id.toLowerCase()}`}\n                          />\n                          <span className=\"ml-2 text-xs\">\n                            {selected ? \"Enabled\" : \"Disabled\"}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n\n            <div className=\"mt-6 pt-4 border-t border-gray-200\">\n              <h4 className=\"text-sm font-medium text-gray-900 mb-3\">\n                Selected Systems ({selectedSystems.length})\n              </h4>\n              <div className=\"flex flex-wrap gap-2\">\n                {selectedSystems.map((systemId) => {\n                  const system = plantSystems.find((s) => s.id === systemId);\n                  return system ? (\n                    <Badge\n                      key={systemId}\n                      variant=\"secondary\"\n                      className=\"text-xs\"\n                    >\n                      {system.name} - {system.capacity}\n                    </Badge>\n                  ) : null;\n                })}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end space-x-3\">\n          <Button variant=\"outline\" data-testid=\"button-reset\">\n            Reset Configuration\n          </Button>\n          <Button data-testid=\"button-save\">Save Project Details</Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":46491},"client/src/pages/settings.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useState } from \"react\";\nimport { Users, Shield, Settings2, UserPlus, Trash2, Edit } from \"lucide-react\";\n\nexport default function Settings() {\n  const [users] = useState([\n    { id: 1, name: \"Admin User\", email: \"admin@company.com\", role: \"Administrator\", status: \"Active\", permissions: [\"ALL\"] },\n    { id: 2, name: \"Plant Manager\", email: \"manager@company.com\", role: \"Manager\", status: \"Active\", permissions: [\"VIEW_PROJECTS\", \"MANAGE_SITES\", \"VIEW_REPORTS\"] },\n    { id: 3, name: \"Operator\", email: \"operator@company.com\", role: \"Operator\", status: \"Active\", permissions: [\"VIEW_PROJECTS\", \"VIEW_SITES\"] },\n    { id: 4, name: \"Maintenance Tech\", email: \"tech@company.com\", role: \"Technician\", status: \"Inactive\", permissions: [\"VIEW_PROJECTS\", \"MANAGE_EQUIPMENT\"] }\n  ]);\n\n  const [permissions] = useState([\n    { id: \"VIEW_PROJECTS\", name: \"View Projects\", description: \"Can view project details and configurations\" },\n    { id: \"MANAGE_PROJECTS\", name: \"Manage Projects\", description: \"Can create, edit, and delete projects\" },\n    { id: \"VIEW_SITES\", name: \"View Sites\", description: \"Can view site monitoring information\" },\n    { id: \"MANAGE_SITES\", name: \"Manage Sites\", description: \"Can add, edit, and delete sites\" },\n    { id: \"VIEW_REPORTS\", name: \"View Reports\", description: \"Can access and view system reports\" },\n    { id: \"MANAGE_REPORTS\", name: \"Manage Reports\", description: \"Can create and manage report configurations\" },\n    { id: \"MANAGE_EQUIPMENT\", name: \"Manage Equipment\", description: \"Can configure and manage equipment settings\" },\n    { id: \"MANAGE_USERS\", name: \"Manage Users\", description: \"Can add, edit, and delete user accounts\" },\n    { id: \"SYSTEM_ADMIN\", name: \"System Administration\", description: \"Full system administration privileges\" },\n    { id: \"ALL\", name: \"All Permissions\", description: \"Complete access to all system features\" }\n  ]);\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header \n        title=\"Settings\" \n        subtitle=\"System configuration and user management\" \n      />\n      \n      <div className=\"p-6 space-y-6\">\n        {/* User Management Card */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <CardTitle className=\"flex items-center gap-2 text-base\">\n                <Users size={18} />\n                User Management\n              </CardTitle>\n              <Button size=\"sm\" data-testid=\"button-add-user\">\n                <UserPlus size={16} className=\"mr-2\" />\n                Add User\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <table className=\"w-full text-sm\">\n                <thead>\n                  <tr className=\"border-b\">\n                    <th className=\"text-left py-2 text-xs font-medium text-gray-700\">Name</th>\n                    <th className=\"text-left py-2 text-xs font-medium text-gray-700\">Email</th>\n                    <th className=\"text-left py-2 text-xs font-medium text-gray-700\">Role</th>\n                    <th className=\"text-left py-2 text-xs font-medium text-gray-700\">Status</th>\n                    <th className=\"text-left py-2 text-xs font-medium text-gray-700\">Actions</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {users.map((user) => (\n                    <tr key={user.id} className=\"border-b hover:bg-gray-50\" data-testid={`user-row-${user.id}`}>\n                      <td className=\"py-3\">\n                        <div>\n                          <p className=\"text-sm font-medium text-gray-900\">{user.name}</p>\n                        </div>\n                      </td>\n                      <td className=\"py-3\">\n                        <p className=\"text-xs text-gray-600\">{user.email}</p>\n                      </td>\n                      <td className=\"py-3\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {user.role}\n                        </Badge>\n                      </td>\n                      <td className=\"py-3\">\n                        <Badge \n                          variant={user.status === 'Active' ? 'default' : 'secondary'} \n                          className=\"text-xs\"\n                        >\n                          {user.status}\n                        </Badge>\n                      </td>\n                      <td className=\"py-3\">\n                        <div className=\"flex items-center gap-2\">\n                          <Button size=\"sm\" variant=\"ghost\" data-testid={`edit-user-${user.id}`}>\n                            <Edit size={14} />\n                          </Button>\n                          <Button size=\"sm\" variant=\"ghost\" data-testid={`delete-user-${user.id}`}>\n                            <Trash2 size={14} />\n                          </Button>\n                        </div>\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Permission Modules Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-base\">\n              <Shield size={18} />\n              Permission Modules\n            </CardTitle>\n            <p className=\"text-xs text-gray-600\">Configure system permissions and access levels</p>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              {permissions.map((permission) => (\n                <div \n                  key={permission.id} \n                  className=\"border rounded-lg p-4 hover:bg-gray-50\"\n                  data-testid={`permission-${permission.id.toLowerCase()}`}\n                >\n                  <div className=\"flex items-center justify-between mb-2\">\n                    <h4 className=\"text-sm font-medium text-gray-900\">\n                      {permission.name}\n                    </h4>\n                    <Switch \n                      defaultChecked={permission.id === 'VIEW_PROJECTS' || permission.id === 'VIEW_SITES'} \n                      data-testid={`switch-${permission.id.toLowerCase()}`}\n                    />\n                  </div>\n                  <p className=\"text-xs text-gray-600\">\n                    {permission.description}\n                  </p>\n                </div>\n              ))}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* System Settings Card */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2 text-base\">\n              <Settings2 size={18} />\n              System Settings\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <Label className=\"text-xs font-medium text-gray-700\">System Name</Label>\n                <Input \n                  defaultValue=\"AutomationHub\" \n                  className=\"mt-1 text-sm\" \n                  data-testid=\"input-system-name\"\n                />\n              </div>\n              <div>\n                <Label className=\"text-xs font-medium text-gray-700\">Default Project Template</Label>\n                <Input \n                  defaultValue=\"Water Treatment Plant\" \n                  className=\"mt-1 text-sm\" \n                  data-testid=\"input-default-template\"\n                />\n              </div>\n              <div className=\"flex items-center justify-between py-2\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-900\">Enable Auto-Backup</Label>\n                  <p className=\"text-xs text-gray-600\">Automatically backup project configurations</p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-auto-backup\" />\n              </div>\n              <div className=\"flex items-center justify-between py-2\">\n                <div>\n                  <Label className=\"text-sm font-medium text-gray-900\">Email Notifications</Label>\n                  <p className=\"text-xs text-gray-600\">Send email alerts for system events</p>\n                </div>\n                <Switch defaultChecked data-testid=\"switch-email-notifications\" />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Action Buttons */}\n        <div className=\"flex justify-end space-x-3\">\n          <Button variant=\"outline\" data-testid=\"button-reset-settings\">\n            Reset to Default\n          </Button>\n          <Button data-testid=\"button-save-settings\">\n            Save Settings\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":9161},"client/src/pages/site-events.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AlertCircle, AlertTriangle, CheckCircle, Clock, Filter, Search, Eye, EyeOff, Wifi, WifiOff, Timer, Network, Gauge, Fan, Beaker, Activity, Settings } from \"lucide-react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface Alert {\n  id: string;\n  siteId: string | null;\n  type: string;\n  severity: string;\n  title: string;\n  message: string;\n  isRead: boolean;\n  isResolved: boolean;\n  metadata: any;\n  createdAt: string;\n  resolvedAt: string | null;\n}\n\ninterface Site {\n  id: string;\n  name: string;\n  ipAddress: string;\n  status: string;\n}\n\nexport default function SiteEvents() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [severityFilter, setSeverityFilter] = useState(\"all\");\n  const [typeFilter, setTypeFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const { toast } = useToast();\n\n  const { data: alerts, isLoading: alertsLoading } = useQuery<Alert[]>({\n    queryKey: [\"/api/alerts\"],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const { data: sites } = useQuery<Site[]>({\n    queryKey: [\"/api/sites\"],\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: (alertId: string) => apiRequest(`/api/alerts/${alertId}/read`, \"PUT\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/alerts\"] });\n      toast({\n        title: \"Success\",\n        description: \"Alert marked as read\",\n      });\n    },\n  });\n\n  const markAsResolvedMutation = useMutation({\n    mutationFn: (alertId: string) => apiRequest(`/api/alerts/${alertId}/resolve`, \"PUT\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/alerts\"] });\n      toast({\n        title: \"Success\",\n        description: \"Alert marked as resolved\",\n      });\n    },\n  });\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n        return \"bg-red-500 hover:bg-red-600\";\n      case \"warning\":\n        return \"bg-yellow-500 hover:bg-yellow-600\";\n      case \"info\":\n        return \"bg-blue-500 hover:bg-blue-600\";\n      case \"success\":\n        return \"bg-green-500 hover:bg-green-600\";\n      default:\n        return \"bg-gray-500 hover:bg-gray-600\";\n    }\n  };\n\n  const getSeverityTextColor = (severity: string) => {\n    switch (severity) {\n      case \"critical\":\n        return \"text-red-600 dark:text-red-400\";\n      case \"warning\":\n        return \"text-yellow-600 dark:text-yellow-400\";\n      case \"info\":\n        return \"text-blue-600 dark:text-blue-400\";\n      case \"success\":\n        return \"text-green-600 dark:text-green-400\";\n      default:\n        return \"text-gray-600 dark:text-gray-400\";\n    }\n  };\n\n  const getPlcCategoryIcon = (type: string, message: string) => {\n    if (type === \"plc_tag_trip\" || message.toLowerCase().includes(\"trip\")) {\n      return <AlertTriangle className=\"h-4 w-4 text-white\" />;\n    }\n    if (type === \"plc_tag_alarm\" || message.toLowerCase().includes(\"alarm\")) {\n      return <AlertCircle className=\"h-4 w-4 text-white\" />;\n    }\n    if (message.toLowerCase().includes(\"pump\")) {\n      return <Gauge className=\"h-4 w-4 text-white\" />;\n    }\n    if (message.toLowerCase().includes(\"blower\") || message.toLowerCase().includes(\"aeration\")) {\n      return <Fan className=\"h-4 w-4 text-white\" />;\n    }\n    if (message.toLowerCase().includes(\"chemical\") || message.toLowerCase().includes(\"dosing\")) {\n      return <Beaker className=\"h-4 w-4 text-white\" />;\n    }\n    if (message.toLowerCase().includes(\"flow\") || message.toLowerCase().includes(\"pressure\") || message.toLowerCase().includes(\"level\")) {\n      return <Activity className=\"h-4 w-4 text-white\" />;\n    }\n    if (type === \"site_offline\" || message.toLowerCase().includes(\"offline\")) {\n      return <WifiOff className=\"h-4 w-4 text-white\" />;\n    }\n    return <Settings className=\"h-4 w-4 text-white\" />;\n  };\n\n  const getPlcCategory = (type: string, message: string) => {\n    if (type === \"plc_tag_trip\" || message.toLowerCase().includes(\"trip\")) {\n      return \"Equipment Trip\";\n    }\n    if (type === \"plc_tag_alarm\" || message.toLowerCase().includes(\"alarm\")) {\n      return \"Process Alarm\";\n    }\n    if (message.toLowerCase().includes(\"pump\")) {\n      return \"Pump Systems\";\n    }\n    if (message.toLowerCase().includes(\"blower\") || message.toLowerCase().includes(\"aeration\")) {\n      return \"Aeration Systems\";\n    }\n    if (message.toLowerCase().includes(\"chemical\") || message.toLowerCase().includes(\"dosing\")) {\n      return \"Chemical Systems\";\n    }\n    if (message.toLowerCase().includes(\"flow\") || message.toLowerCase().includes(\"pressure\") || message.toLowerCase().includes(\"level\")) {\n      return \"Process Monitoring\";\n    }\n    if (type === \"site_offline\" || message.toLowerCase().includes(\"offline\")) {\n      return \"Site Connection\";\n    }\n    return \"Other\";\n  };\n\n  const getSiteName = (siteId: string | null) => {\n    if (!siteId || !sites) return \"System\";\n    const site = sites.find(s => s.id === siteId);\n    return site ? site.name : \"Unknown Site\";\n  };\n\n  const formatTimeAgo = (createdAt: string) => {\n    const date = new Date(createdAt);\n    const now = new Date();\n    const diffMs = now.getTime() - date.getTime();\n    const diffMins = Math.floor(diffMs / (1000 * 60));\n    const diffHours = Math.floor(diffMins / 60);\n    const diffDays = Math.floor(diffHours / 24);\n    \n    if (diffMins < 60) {\n      return `${diffMins} min${diffMins !== 1 ? 's' : ''} ago`;\n    } else if (diffHours < 24) {\n      return `${diffHours} hour${diffHours !== 1 ? 's' : ''} ago`;\n    } else {\n      return `${diffDays} day${diffDays !== 1 ? 's' : ''} ago`;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleString();\n  };\n\n  // Filter to show PLC tag and site events\n  const plcEventTypes = [\"plc_tag_trip\", \"plc_tag_alarm\", \"site_offline\", \"equipment_failure\"];\n  \n  const filteredAlerts = alerts?.filter(alert => {\n    // Show PLC tag events and critical site events\n    const isPlcEvent = plcEventTypes.includes(alert.type) || \n                      alert.message.toLowerCase().includes(\"trip\") ||\n                      alert.message.toLowerCase().includes(\"pump\") ||\n                      alert.message.toLowerCase().includes(\"blower\") ||\n                      alert.message.toLowerCase().includes(\"alarm\") ||\n                      alert.message.toLowerCase().includes(\"chemical\") ||\n                      alert.message.toLowerCase().includes(\"offline\");\n    \n    if (!isPlcEvent) return false;\n    \n    const matchesSearch = alert.title.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         alert.message.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         getSiteName(alert.siteId).toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesSeverity = severityFilter === \"all\" || alert.severity === severityFilter;\n    const matchesType = typeFilter === \"all\" || alert.type === typeFilter;\n    const matchesCategory = categoryFilter === \"all\" || getPlcCategory(alert.type, alert.message) === categoryFilter;\n    \n    let matchesStatus = true;\n    if (statusFilter === \"unread\") {\n      matchesStatus = !alert.isRead;\n    } else if (statusFilter === \"unresolved\") {\n      matchesStatus = !alert.isResolved;\n    } else if (statusFilter === \"resolved\") {\n      matchesStatus = alert.isResolved;\n    }\n    \n    return matchesSearch && matchesSeverity && matchesType && matchesCategory && matchesStatus;\n  }) || [];\n\n  const eventTypes = Array.from(new Set(filteredAlerts?.map(alert => alert.type) || []));\n  \n  // Available PLC categories\n  const plcCategories = Array.from(new Set(\n    alerts?.filter(alert => {\n      const isPlcEvent = plcEventTypes.includes(alert.type) || \n                        alert.message.toLowerCase().includes(\"trip\") ||\n                        alert.message.toLowerCase().includes(\"pump\") ||\n                        alert.message.toLowerCase().includes(\"blower\") ||\n                        alert.message.toLowerCase().includes(\"alarm\") ||\n                        alert.message.toLowerCase().includes(\"chemical\") ||\n                        alert.message.toLowerCase().includes(\"offline\");\n      return isPlcEvent;\n    }).map(alert => getPlcCategory(alert.type, alert.message)) || []\n  ));\n  \n  // Site events summary\n  const getSiteEventsSummary = () => {\n    const critical = filteredAlerts.filter(a => a.severity === \"critical\" && !a.isResolved).length;\n    const warning = filteredAlerts.filter(a => a.severity === \"warning\" && !a.isResolved).length;\n    const unread = filteredAlerts.filter(a => !a.isRead).length;\n    return { critical, warning, unread };\n  };\n  \n  const siteEventsSummary = getSiteEventsSummary();\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">Site Events</h1>\n          <p className=\"text-sm text-gray-500\">Real-time PLC tag monitoring and site alerts for industrial equipment</p>\n        </div>\n        <div className=\"flex gap-4\">\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-red-600 dark:text-red-400\">{siteEventsSummary.critical}</div>\n            <div className=\"text-xs text-gray-500\">Critical</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-yellow-600 dark:text-yellow-400\">{siteEventsSummary.warning}</div>\n            <div className=\"text-xs text-gray-500\">Warning</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-blue-600 dark:text-blue-400\">{siteEventsSummary.unread}</div>\n            <div className=\"text-xs text-gray-500\">Unread</div>\n          </div>\n          <div className=\"text-center\">\n            <div className=\"text-xl font-bold text-gray-900 dark:text-gray-100\">{filteredAlerts.length}</div>\n            <div className=\"text-xs text-gray-500\">Total</div>\n          </div>\n        </div>\n      </div>\n\n      {/* Compact Filters */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex flex-wrap items-center gap-3\">\n            <div className=\"relative flex-1 min-w-0\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search sites or messages...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10 h-9\"\n                data-testid=\"input-search-events\"\n              />\n            </div>\n            \n            <Select value={severityFilter} onValueChange={setSeverityFilter}>\n              <SelectTrigger className=\"w-32 h-9\" data-testid=\"select-severity-filter\">\n                <SelectValue placeholder=\"Severity\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All</SelectItem>\n                <SelectItem value=\"critical\">Critical</SelectItem>\n                <SelectItem value=\"warning\">Warning</SelectItem>\n                <SelectItem value=\"info\">Info</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n              <SelectTrigger className=\"w-40 h-9\" data-testid=\"select-category-filter\">\n                <SelectValue placeholder=\"Category\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Categories</SelectItem>\n                {plcCategories.map(category => (\n                  <SelectItem key={category} value={category}>\n                    {category}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-32 h-9\" data-testid=\"select-status-filter\">\n                <SelectValue placeholder=\"Status\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All</SelectItem>\n                <SelectItem value=\"unread\">Unread</SelectItem>\n                <SelectItem value=\"unresolved\">Active</SelectItem>\n                <SelectItem value=\"resolved\">Resolved</SelectItem>\n              </SelectContent>\n            </Select>\n\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={() => {\n                setSearchTerm(\"\");\n                setSeverityFilter(\"all\");\n                setTypeFilter(\"all\");\n                setCategoryFilter(\"all\");\n                setStatusFilter(\"all\");\n              }}\n              className=\"h-9\"\n              data-testid=\"button-clear-filters\"\n            >\n              Clear\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Events List */}\n      <div className=\"space-y-4\">\n        {alertsLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <div className=\"h-16 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredAlerts.length > 0 ? (\n          filteredAlerts.map((alert) => (\n            <Card key={alert.id} className={`transition-all hover:shadow-md ${!alert.isRead ? 'ring-2 ring-blue-200 dark:ring-blue-400' : ''}`} data-testid={`alert-card-${alert.id}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex items-center space-x-3 flex-1\">\n                    <div className={`p-2 rounded-full ${getSeverityColor(alert.severity)} shrink-0`}>\n                      {getPlcCategoryIcon(alert.type, alert.message)}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h3 className=\"text-sm font-semibold text-gray-900 dark:text-gray-100 truncate\">\n                          {getSiteName(alert.siteId)}\n                        </h3>\n                        <Badge variant=\"outline\" className={`text-xs ${getSeverityTextColor(alert.severity)}`}>\n                          {alert.severity}\n                        </Badge>\n                        <Badge variant=\"outline\" className=\"text-xs bg-gray-50 dark:bg-gray-800\">\n                          {getPlcCategory(alert.type, alert.message)}\n                        </Badge>\n                      </div>\n                      \n                      <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-2 line-clamp-1\">\n                        {alert.message}\n                      </p>\n                      \n                      <div className=\"flex items-center gap-3 text-xs text-gray-500\">\n                        <span>{formatTimeAgo(alert.createdAt)}</span>\n                        <span className=\"opacity-70\">{formatDate(alert.createdAt)}</span>\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-1 ml-3\">\n                    {!alert.isRead && (\n                      <Badge variant=\"secondary\" className=\"text-xs px-2 py-1\">\n                        New\n                      </Badge>\n                    )}\n                    {alert.isResolved && (\n                      <Badge variant=\"default\" className=\"text-xs px-2 py-1 bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\">\n                        Resolved\n                      </Badge>\n                    )}\n                    \n                    <div className=\"flex gap-1\">\n                      {!alert.isRead && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => markAsReadMutation.mutate(alert.id)}\n                          disabled={markAsReadMutation.isPending}\n                          className=\"h-8 w-8 p-0\"\n                          data-testid={`button-mark-read-${alert.id}`}\n                        >\n                          <Eye className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                      \n                      {!alert.isResolved && (\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => markAsResolvedMutation.mutate(alert.id)}\n                          disabled={markAsResolvedMutation.isPending}\n                          className=\"h-8 w-8 p-0\"\n                          data-testid={`button-resolve-${alert.id}`}\n                        >\n                          <CheckCircle className=\"h-3 w-3\" />\n                        </Button>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <Card>\n            <CardContent className=\"p-8 text-center\">\n              <Network className=\"h-10 w-10 text-gray-400 mx-auto mb-3\" />\n              <h3 className=\"text-lg font-medium text-gray-900 dark:text-gray-100 mb-2\">\n                No network events found\n              </h3>\n              <p className=\"text-sm text-gray-500\">\n                {searchTerm || severityFilter !== \"all\" || typeFilter !== \"all\" || statusFilter !== \"all\"\n                  ? \"Try adjusting your filters to see more network events.\"\n                  : \"All sites are running smoothly - no connectivity issues detected.\"}\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":18511},"server/services/adsMonitoringService.ts":{"content":"import { spawn } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { storage } from '../storage';\nimport type { Site, SiteDatabaseTag } from '@shared/schema';\n\n// Get the directory name in an ES module context\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\n// Alias Site as ADSConnection for consistency within this service\ntype ADSConnection = Site;\n\nclass ADSMonitoringService {\n  private static instance: ADSMonitoringService;\n  private monitoringIntervals: Map<string, NodeJS.Timeout> = new Map();\n\n  private constructor() {}\n\n  public static getInstance(): ADSMonitoringService {\n    if (!ADSMonitoringService.instance) {\n      ADSMonitoringService.instance = new ADSMonitoringService();\n    }\n    return ADSMonitoringService.instance;\n  }\n\n  /**\n   * Executes the Python script to read a tag value from the PLC.\n   * This is the core function that replaces the direct node-ads connection.\n   */\n  private readADSTag(tag: SiteDatabaseTag): Promise<number> {\n    return new Promise((resolve, reject) => {\n      // Path to the Python script, using the correct __dirname for ES modules\n      const scriptPath = path.join(__dirname, '..', '..', 'ads.py');\n      const pythonProcess = spawn('python', [scriptPath, tag.adsPath]);\n\n      let dataString = '';\n      let errorString = '';\n\n      // Capture standard output from the script\n      pythonProcess.stdout.on('data', (data) => {\n        dataString += data.toString();\n      });\n\n      // Capture standard error from the script\n      pythonProcess.stderr.on('data', (data) => {\n        errorString += data.toString();\n      });\n\n      // Handle the script exit\n      pythonProcess.on('close', (code) => {\n        if (code !== 0) {\n          console.error(`[ADS] Python script exited with code ${code}: ${errorString}`);\n          return reject(new Error(`Python script error: ${errorString.trim()}`));\n        }\n        \n        const value = parseFloat(dataString.trim());\n        if (isNaN(value)) {\n          return reject(new Error('Failed to parse float value from Python script.'));\n        }\n\n        console.log(`[ADS] Successfully read tag '${tag.adsPath}', value: ${value}`);\n        resolve(value);\n      });\n\n      pythonProcess.on('error', (err) => {\n        console.error('[ADS] Failed to start Python script.', err);\n        reject(err);\n      });\n    });\n  }\n\n  /**\n   * Public method to test the connection by reading a single tag.\n   * The 'connection' parameter is kept for API compatibility but is no longer used.\n   */\n  public async testADSConnection(connection: ADSConnection, tag: SiteDatabaseTag): Promise<any> {\n    console.log(`[ADS] Testing connection for site ${connection.id} by reading tag ${tag.adsPath}`);\n    try {\n      const value = await this.readADSTag(tag);\n      return { success: true, value };\n    } catch (error: any) {\n      console.error(`[ADS] Test connection failed for site ${connection.id}:`, error.message);\n      return { success: false, error: error.message };\n    }\n  }\n\n  public startMonitoringForTag(tag: SiteDatabaseTag) {\n    // Ensure the tag is active and not already being monitored\n    if (tag.isActive && !this.monitoringIntervals.has(tag.id)) {\n      console.log(`[ADS] Starting monitoring for new tag: ${tag.tagName} (${tag.adsPath})`);\n\n      const interval = setInterval(async () => {\n        try {\n          const value = await this.readADSTag(tag);\n          // Save the new value to the database\n          await storage.createSiteDatabaseValue({\n            tagId: tag.id,\n            value: value.toString(),\n          });\n        } catch (error) {\n          console.error(`[ADS] Error monitoring tag ${tag.tagName}:`, error);\n        }\n      }, tag.scanInterval || 5000); // Use tag's interval or default to 5s\n\n      this.monitoringIntervals.set(tag.id, interval);\n    }\n  }\n\n  public startMonitoringAllSites(connections: ADSConnection[], tags: SiteDatabaseTag[]) {\n    console.log(`[ADS] Starting monitoring for ${tags.length} tags across ${connections.length} sites.`);\n    \n    for (const tag of tags) {\n      this.startMonitoringForTag(tag);\n    }\n  }\n\n  public stopMonitoringForSite(siteId: string) {\n    // This would need to be adapted to stop monitoring by site, e.g. by finding all tags for that site\n    console.log(`[ADS] Stopping monitoring for site ${siteId}...`);\n    for (const [tagId, interval] of this.monitoringIntervals.entries()) {\n      // This is a simplified stop, a real implementation would need to map siteId to tagIds\n      clearInterval(interval);\n      this.monitoringIntervals.delete(tagId);\n    }\n  }\n}\n\nexport const adsMonitoringService = ADSMonitoringService.getInstance();\n","size_bytes":4724},"client/src/pages/plc-tags-new.tsx":{"content":"import Header from \"@/components/layout/header\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport type { PlcTag, InsertPlcTag } from \"@shared/schema\";\nimport {\n  Activity,\n  Upload,\n  Edit,\n  Save,\n  X,\n  Trash2,\n  AlertTriangle,\n  CheckCircle,\n  Clock,\n} from \"lucide-react\";\n\nexport default function PlcTagsPage() {\n  const { toast } = useToast();\n  const [selectedSiteId, setSelectedSiteId] = useState<string>(\"\");\n  const [editingTagId, setEditingTagId] = useState<string | null>(null);\n  const [editFormData, setEditFormData] = useState<Partial<PlcTag>>({});\n  const [showNewTagForm, setShowNewTagForm] = useState(false);\n  const [newTagData, setNewTagData] = useState<Partial<InsertPlcTag>>({});\n  const [showBulkUpload, setShowBulkUpload] = useState(false);\n  const [bulkUploadData, setBulkUploadData] = useState<string>(\"\");\n\n  // Fetch sites for selection\n  const { data: sites = [] } = useQuery<any[]>({\n    queryKey: [\"/api/sites\"],\n  });\n\n  // Fetch PLC tags for selected site\n  const { data: plcTags = [], isLoading, refetch } = useQuery<PlcTag[]>({\n    queryKey: [\"/api/plc-tags\", selectedSiteId],\n    queryFn: () => fetch(`/api/plc-tags${selectedSiteId ? `?siteId=${selectedSiteId}` : \"\"}`).then(res => res.json()),\n  });\n\n  // Create PLC tag mutation\n  const createTagMutation = useMutation({\n    mutationFn: (data: InsertPlcTag) => \n      apiRequest(\"/api/plc-tags\", \"POST\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/plc-tags\"] });\n      setShowNewTagForm(false);\n      setNewTagData({});\n      toast({\n        title: \"Success\",\n        description: \"PLC tag created successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to create PLC tag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update PLC tag mutation\n  const updateTagMutation = useMutation({\n    mutationFn: ({ id, data }: { id: string; data: Partial<InsertPlcTag> }) =>\n      apiRequest(`/api/plc-tags/${id}`, \"PUT\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/plc-tags\"] });\n      setEditingTagId(null);\n      setEditFormData({});\n      toast({\n        title: \"Success\",\n        description: \"PLC tag updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\", \n        description: error?.message || \"Failed to update PLC tag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete PLC tag mutation\n  const deleteTagMutation = useMutation({\n    mutationFn: (id: string) => apiRequest(`/api/plc-tags/${id}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/plc-tags\"] });\n      toast({\n        title: \"Success\",\n        description: \"PLC tag deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to delete PLC tag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Bulk upload mutation\n  const bulkUploadMutation = useMutation({\n    mutationFn: async (csvData: string) => {\n      const lines = csvData.trim().split('\\n');\n      const headers = lines[0].split(',').map(h => h.trim());\n      \n      if (!headers.includes('tagName') || !headers.includes('plcAddress')) {\n        throw new Error(\"CSV must contain 'tagName' and 'plcAddress' columns\");\n      }\n\n      const tags: InsertPlcTag[] = [];\n      for (let i = 1; i < lines.length; i++) {\n        const values = lines[i].split(',').map(v => v.trim());\n        const tagData: any = { siteId: selectedSiteId };\n        \n        headers.forEach((header, index) => {\n          if (values[index]) {\n            switch (header) {\n              case 'isActive':\n              case 'alarmOnTrue':\n              case 'alarmOnFalse':\n                tagData[header] = values[index].toLowerCase() === 'true';\n                break;\n              default:\n                tagData[header] = values[index];\n            }\n          }\n        });\n\n        if (tagData.tagName && tagData.plcAddress) {\n          tags.push({\n            ...tagData,\n            dataType: tagData.dataType || 'BOOL',\n            severityLevel: tagData.severityLevel || 'warning',\n            isActive: tagData.isActive ?? true,\n            alarmOnTrue: tagData.alarmOnTrue ?? false,\n            alarmOnFalse: tagData.alarmOnFalse ?? false,\n          });\n        }\n      }\n\n      // Create all tags\n      for (const tag of tags) {\n        await apiRequest(\"/api/plc-tags\", \"POST\", tag);\n      }\n      \n      return { count: tags.length };\n    },\n    onSuccess: (result) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/plc-tags\"] });\n      setShowBulkUpload(false);\n      setBulkUploadData(\"\");\n      toast({\n        title: \"Success\",\n        description: `${result.count} PLC tags uploaded successfully`,\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error?.message || \"Failed to upload PLC tags\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const dataTypeOptions = [\"BOOL\", \"INT\", \"REAL\", \"STRING\"];\n  const severityOptions = [\"info\", \"warning\", \"critical\"];\n\n  const handleEditStart = (tag: PlcTag) => {\n    setEditingTagId(tag.id);\n    setEditFormData({ ...tag });\n  };\n\n  const handleEditCancel = () => {\n    setEditingTagId(null);\n    setEditFormData({});\n  };\n\n  const handleEditSave = () => {\n    if (editingTagId && editFormData) {\n      updateTagMutation.mutate({ id: editingTagId, data: editFormData });\n    }\n  };\n\n  const handleFieldChange = (field: keyof PlcTag, value: any) => {\n    setEditFormData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleNewTag = () => {\n    setShowNewTagForm(true);\n    setNewTagData({ siteId: selectedSiteId });\n  };\n\n  const handleNewTagSave = () => {\n    if (newTagData.tagName && newTagData.plcAddress && selectedSiteId) {\n      createTagMutation.mutate({\n        ...newTagData,\n        siteId: selectedSiteId,\n        dataType: newTagData.dataType || 'BOOL',\n        severityLevel: newTagData.severityLevel || 'warning',\n        isActive: newTagData.isActive ?? true,\n        alarmOnTrue: newTagData.alarmOnTrue ?? false,\n        alarmOnFalse: newTagData.alarmOnFalse ?? false,\n      } as InsertPlcTag);\n    } else {\n      toast({\n        title: \"Validation Error\",\n        description: \"Tag Name, PLC Address and Site selection are required\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleNewTagCancel = () => {\n    setShowNewTagForm(false);\n    setNewTagData({});\n  };\n\n  const handleNewTagChange = (field: keyof InsertPlcTag, value: any) => {\n    setNewTagData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleDelete = (id: string) => {\n    if (window.confirm(\"Are you sure you want to delete this PLC tag?\")) {\n      deleteTagMutation.mutate(id);\n    }\n  };\n\n  const handleBulkUpload = () => {\n    if (!selectedSiteId) {\n      toast({\n        title: \"Site Required\",\n        description: \"Please select a site first\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    if (!bulkUploadData.trim()) {\n      toast({\n        title: \"Data Required\",\n        description: \"Please enter CSV data\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    bulkUploadMutation.mutate(bulkUploadData);\n  };\n\n  const getStatusColor = (isActive: boolean | null | undefined) => {\n    return isActive ? \"bg-green-500\" : \"bg-gray-500\";\n  };\n\n  const getSeverityColor = (severity: string | null | undefined) => {\n    switch (severity) {\n      case \"critical\":\n        return \"bg-red-500\";\n      case \"warning\":\n        return \"bg-yellow-500\";\n      case \"info\":\n        return \"bg-blue-500\";\n      default:\n        return \"bg-gray-500\";\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header\n        title=\"PLC Tag Monitoring\"\n        subtitle=\"Manage Beckhoff PLC tags and real-time monitoring configurations\"\n      />\n\n      <div className=\"p-6\">\n        {/* Site Selection */}\n        <div className=\"mb-6\">\n          <Label className=\"text-sm font-semibold text-gray-700 mb-2 block\">Select Site</Label>\n          <div className=\"w-full max-w-md\">\n            <Select value={selectedSiteId} onValueChange={setSelectedSiteId}>\n              <SelectTrigger className=\"text-sm h-9 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\">\n                <SelectValue placeholder=\"Choose a site to manage PLC tags\" />\n              </SelectTrigger>\n              <SelectContent>\n                {sites.map((site: any) => (\n                  <SelectItem key={site.id} value={site.id}>\n                    {site.name} ({site.location})\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n\n        {selectedSiteId && (\n          <>\n            <div className=\"flex justify-between items-center mb-6\">\n              <h3 className=\"text-lg font-semibold text-gray-900\">\n                PLC Tags ({plcTags.length})\n              </h3>\n              <div className=\"flex gap-3\">\n                <Button \n                  onClick={() => setShowBulkUpload(true)} \n                  variant=\"outline\"\n                  className=\"bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white font-medium transition-all duration-200 shadow-md hover:shadow-lg px-6 py-2\"\n                >\n                  <Upload size={16} className=\"mr-2\" />\n                  Bulk Upload\n                </Button>\n                <Button \n                  onClick={handleNewTag} \n                  className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-medium transition-all duration-200 shadow-md hover:shadow-lg px-6 py-2\"\n                >\n                  <Activity size={16} className=\"mr-2\" />\n                  Add PLC Tag\n                </Button>\n              </div>\n            </div>\n\n            {/* New Tag Form */}\n            {showNewTagForm && (\n              <Card className=\"mb-6 border-2 border-blue-200 shadow-lg bg-gradient-to-br from-blue-50/30 to-white\">\n                <CardHeader className=\"bg-gradient-to-r from-blue-600 to-blue-700 text-white rounded-t-lg\">\n                  <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                    <Activity size={20} />\n                    Add New PLC Tag\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-8\">\n                    <div className=\"bg-white rounded-lg border border-gray-100 p-4 shadow-sm\">\n                      <h4 className=\"text-sm font-semibold text-gray-800 mb-4 border-b border-gray-200 pb-2 flex items-center gap-2\">\n                        <Activity size={16} className=\"text-blue-600\" />\n                        Basic Details\n                      </h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n                        <div>\n                          <Label className=\"text-xs font-semibold text-gray-700\">Tag Name</Label>\n                          <Input\n                            value={newTagData.tagName || \"\"}\n                            onChange={(e) => handleNewTagChange(\"tagName\", e.target.value)}\n                            className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                            placeholder=\"Enter tag name\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs font-semibold text-gray-700\">PLC Address</Label>\n                          <Input\n                            value={newTagData.plcAddress || \"\"}\n                            onChange={(e) => handleNewTagChange(\"plcAddress\", e.target.value)}\n                            className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                            placeholder=\"e.g., GVL.M_PUMP_TRIP\"\n                          />\n                        </div>\n                        <div>\n                          <Label className=\"text-xs font-semibold text-gray-700\">Data Type</Label>\n                          <Select\n                            value={newTagData.dataType || \"BOOL\"}\n                            onValueChange={(value) => handleNewTagChange(\"dataType\", value)}\n                          >\n                            <SelectTrigger className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {dataTypeOptions.map((type) => (\n                                <SelectItem key={type} value={type}>{type}</SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div>\n                          <Label className=\"text-xs font-semibold text-gray-700\">Severity</Label>\n                          <Select\n                            value={newTagData.severityLevel || \"warning\"}\n                            onValueChange={(value) => handleNewTagChange(\"severityLevel\", value)}\n                          >\n                            <SelectTrigger className=\"text-sm h-9 mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\">\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              {severityOptions.map((severity) => (\n                                <SelectItem key={severity} value={severity}>{severity}</SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"flex items-end\">\n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"newActive\"\n                              checked={newTagData.isActive ?? true}\n                              onChange={(e) => handleNewTagChange(\"isActive\", e.target.checked)}\n                              className=\"rounded border-gray-300\"\n                            />\n                            <Label htmlFor=\"newActive\" className=\"text-xs font-semibold text-gray-700\">Active</Label>\n                          </div>\n                        </div>\n                        <div className=\"flex items-end\">\n                          <div className=\"flex items-center space-x-2\">\n                            <input\n                              type=\"checkbox\"\n                              id=\"newAlarmTrue\"\n                              checked={newTagData.alarmOnTrue ?? false}\n                              onChange={(e) => handleNewTagChange(\"alarmOnTrue\", e.target.checked)}\n                              className=\"rounded border-gray-300\"\n                            />\n                            <Label htmlFor=\"newAlarmTrue\" className=\"text-xs font-semibold text-gray-700\">Alarm on TRUE</Label>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"mt-4\">\n                        <Label className=\"text-xs font-semibold text-gray-700\">Description</Label>\n                        <Textarea\n                          value={newTagData.description || \"\"}\n                          onChange={(e) => handleNewTagChange(\"description\", e.target.value)}\n                          className=\"text-sm mt-1 border-gray-200 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all\"\n                          placeholder=\"Optional description\"\n                          rows={2}\n                        />\n                      </div>\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={handleNewTagCancel}\n                      className=\"px-6 py-2 text-sm font-medium\"\n                    >\n                      <X size={16} className=\"mr-2\" />\n                      Cancel\n                    </Button>\n                    <Button \n                      onClick={handleNewTagSave}\n                      disabled={createTagMutation.isPending}\n                      className=\"bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-medium px-6 py-2 text-sm\"\n                    >\n                      <Save size={16} className=\"mr-2\" />\n                      {createTagMutation.isPending ? \"Creating...\" : \"Create Tag\"}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* Bulk Upload Form */}\n            {showBulkUpload && (\n              <Card className=\"mb-6 border-2 border-green-200 shadow-lg bg-gradient-to-br from-green-50/30 to-white\">\n                <CardHeader className=\"bg-gradient-to-r from-green-600 to-green-700 text-white rounded-t-lg\">\n                  <CardTitle className=\"text-lg font-semibold flex items-center gap-2\">\n                    <Upload size={20} />\n                    Bulk Upload PLC Tags\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6\">\n                  <div className=\"space-y-4\">\n                    <div>\n                      <Label className=\"text-sm font-semibold text-gray-700 mb-2 block\">CSV Format</Label>\n                      <p className=\"text-xs text-gray-600 mb-2\">\n                        Required columns: tagName, plcAddress. Optional: dataType, severityLevel, description, isActive, alarmOnTrue, alarmOnFalse\n                      </p>\n                      <div className=\"bg-gray-50 p-3 rounded text-xs font-mono text-gray-700\">\n                        tagName,plcAddress,dataType,severityLevel,description,isActive,alarmOnTrue<br />\n                        Pump Trip,GVL.M_PUMP_TRIP,BOOL,critical,Main pump trip alarm,true,true<br />\n                        Level Sensor,GVL.LEVEL_HIGH,BOOL,warning,High level sensor,true,true\n                      </div>\n                    </div>\n                    <div>\n                      <Label className=\"text-sm font-semibold text-gray-700\">CSV Data</Label>\n                      <Textarea\n                        value={bulkUploadData}\n                        onChange={(e) => setBulkUploadData(e.target.value)}\n                        className=\"mt-1 text-sm font-mono\"\n                        placeholder=\"Paste your CSV data here...\"\n                        rows={8}\n                      />\n                    </div>\n                  </div>\n\n                  <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\n                    <Button \n                      variant=\"outline\" \n                      onClick={() => setShowBulkUpload(false)}\n                      className=\"px-6 py-2 text-sm font-medium\"\n                    >\n                      <X size={16} className=\"mr-2\" />\n                      Cancel\n                    </Button>\n                    <Button \n                      onClick={handleBulkUpload}\n                      disabled={bulkUploadMutation.isPending}\n                      className=\"bg-gradient-to-r from-green-600 to-green-700 hover:from-green-700 hover:to-green-800 text-white font-medium px-6 py-2 text-sm\"\n                    >\n                      <Upload size={16} className=\"mr-2\" />\n                      {bulkUploadMutation.isPending ? \"Uploading...\" : \"Upload Tags\"}\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n\n            {/* PLC Tags Table */}\n            <div className=\"space-y-4\">\n              {isLoading ? (\n                <div className=\"text-center py-8 text-gray-500\">Loading PLC tags...</div>\n              ) : plcTags.length === 0 ? (\n                <div className=\"text-center py-12 text-gray-500\">\n                  <Activity className=\"w-16 h-16 mx-auto mb-4 opacity-30\" />\n                  <h3 className=\"text-lg font-semibold mb-2\">No PLC Tags</h3>\n                  <p className=\"text-sm\">No PLC tags configured for this site. Add your first tag to start monitoring.</p>\n                </div>\n              ) : (\n                plcTags.map((tag: PlcTag) => (\n                  <Card key={tag.id} className=\"border border-gray-200 shadow-sm hover:shadow-md transition-shadow\">\n                    <CardContent className=\"p-4\">\n                      {editingTagId === tag.id ? (\n                        // Edit Mode\n                        <div className=\"space-y-4\">\n                          <div className=\"grid grid-cols-1 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n                            <div>\n                              <Label className=\"text-xs font-semibold text-gray-700\">Tag Name</Label>\n                              <Input\n                                value={editFormData.tagName || \"\"}\n                                onChange={(e) => handleFieldChange(\"tagName\", e.target.value)}\n                                className=\"text-sm h-9 mt-1\"\n                              />\n                            </div>\n                            <div>\n                              <Label className=\"text-xs font-semibold text-gray-700\">PLC Address</Label>\n                              <Input\n                                value={editFormData.plcAddress || \"\"}\n                                onChange={(e) => handleFieldChange(\"plcAddress\", e.target.value)}\n                                className=\"text-sm h-9 mt-1\"\n                              />\n                            </div>\n                            <div>\n                              <Label className=\"text-xs font-semibold text-gray-700\">Data Type</Label>\n                              <Select\n                                value={editFormData.dataType || \"BOOL\"}\n                                onValueChange={(value) => handleFieldChange(\"dataType\", value)}\n                              >\n                                <SelectTrigger className=\"text-sm h-9 mt-1\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {dataTypeOptions.map((type) => (\n                                    <SelectItem key={type} value={type}>{type}</SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div>\n                              <Label className=\"text-xs font-semibold text-gray-700\">Severity</Label>\n                              <Select\n                                value={editFormData.severityLevel || \"warning\"}\n                                onValueChange={(value) => handleFieldChange(\"severityLevel\", value)}\n                              >\n                                <SelectTrigger className=\"text-sm h-9 mt-1\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {severityOptions.map((severity) => (\n                                    <SelectItem key={severity} value={severity}>{severity}</SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div className=\"flex items-end\">\n                              <div className=\"flex items-center space-x-2\">\n                                <input\n                                  type=\"checkbox\"\n                                  id={`active-${tag.id}`}\n                                  checked={editFormData.isActive ?? true}\n                                  onChange={(e) => handleFieldChange(\"isActive\", e.target.checked)}\n                                  className=\"rounded border-gray-300\"\n                                />\n                                <Label htmlFor={`active-${tag.id}`} className=\"text-xs font-semibold text-gray-700\">Active</Label>\n                              </div>\n                            </div>\n                            <div className=\"flex items-end\">\n                              <div className=\"flex items-center space-x-2\">\n                                <input\n                                  type=\"checkbox\"\n                                  id={`alarm-${tag.id}`}\n                                  checked={editFormData.alarmOnTrue ?? false}\n                                  onChange={(e) => handleFieldChange(\"alarmOnTrue\", e.target.checked)}\n                                  className=\"rounded border-gray-300\"\n                                />\n                                <Label htmlFor={`alarm-${tag.id}`} className=\"text-xs font-semibold text-gray-700\">Alarm on TRUE</Label>\n                              </div>\n                            </div>\n                          </div>\n                          <div>\n                            <Label className=\"text-xs font-semibold text-gray-700\">Description</Label>\n                            <Textarea\n                              value={editFormData.description || \"\"}\n                              onChange={(e) => handleFieldChange(\"description\", e.target.value)}\n                              className=\"text-sm mt-1\"\n                              rows={2}\n                            />\n                          </div>\n                          <div className=\"flex justify-end gap-2\">\n                            <Button variant=\"outline\" size=\"sm\" onClick={handleEditCancel}>\n                              <X size={16} className=\"mr-1\" />\n                              Cancel\n                            </Button>\n                            <Button size=\"sm\" onClick={handleEditSave} disabled={updateTagMutation.isPending}>\n                              <Save size={16} className=\"mr-1\" />\n                              Save\n                            </Button>\n                          </div>\n                        </div>\n                      ) : (\n                        // View Mode\n                        <div className=\"space-y-3\">\n                          <div className=\"flex items-center justify-between\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div>\n                                <h3 className=\"text-sm font-semibold text-gray-900\">{tag.tagName}</h3>\n                                <p className=\"text-xs text-gray-600 font-mono\">{tag.plcAddress}</p>\n                              </div>\n                              <div className=\"flex items-center space-x-2\">\n                                <div className={`w-2 h-2 rounded-full ${getStatusColor(tag.isActive)}`}></div>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {tag.dataType}\n                                </Badge>\n                                <div className={`w-2 h-2 rounded-full ${getSeverityColor(tag.severityLevel)}`}></div>\n                                <span className=\"text-xs text-gray-600 capitalize\">{tag.severityLevel}</span>\n                              </div>\n                            </div>\n                            <div className=\"flex items-center space-x-2\">\n                              <Button variant=\"outline\" size=\"sm\" onClick={() => handleEditStart(tag)}>\n                                <Edit size={14} />\n                              </Button>\n                              <Button variant=\"outline\" size=\"sm\" onClick={() => handleDelete(tag.id)}>\n                                <Trash2 size={14} />\n                              </Button>\n                            </div>\n                          </div>\n                          \n                          {tag.description && (\n                            <p className=\"text-xs text-gray-600\">{tag.description}</p>\n                          )}\n                          \n                          <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                            <div className=\"flex items-center space-x-4\">\n                              <div className=\"flex items-center space-x-1\">\n                                <span>Value:</span>\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {tag.lastValue || \"No data\"}\n                                </Badge>\n                              </div>\n                              {tag.alarmOnTrue && (\n                                <div className=\"flex items-center space-x-1\">\n                                  <AlertTriangle size={12} className=\"text-orange-500\" />\n                                  <span>Alarm on TRUE</span>\n                                </div>\n                              )}\n                              {tag.alarmOnFalse && (\n                                <div className=\"flex items-center space-x-1\">\n                                  <CheckCircle size={12} className=\"text-blue-500\" />\n                                  <span>Alarm on FALSE</span>\n                                </div>\n                              )}\n                            </div>\n                            {tag.lastReadTime && (\n                              <div className=\"flex items-center space-x-1\">\n                                <Clock size={12} />\n                                <span>Last read: {new Date(tag.lastReadTime).toLocaleString()}</span>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                ))\n              )}\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":31313},"client/src/pages/site-database.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { toast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { \n  Plus, \n  Database,\n  Edit,\n  Trash2,\n  CheckCircle,\n  XCircle,\n  Activity,\n  Gauge\n} from \"lucide-react\";\nimport { insertSiteDatabaseTagSchema } from \"@shared/schema\";\nimport type { \n  Site, \n  SiteDatabaseTag, \n  SiteDatabaseValue\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { format } from \"date-fns\";\n\nconst tagFormSchema = insertSiteDatabaseTagSchema;\n\n// Utility functions\nconst formatTimestamp = (timestamp: string | Date) => {\n  const date = typeof timestamp === \"string\" ? new Date(timestamp) : timestamp;\n  return format(date, \"MMM dd, yyyy HH:mm:ss\");\n};\n\ntype TagFormValues = z.infer<typeof tagFormSchema>;\n\nexport default function SiteDatabase() {\n  const [selectedSite, setSelectedSite] = useState<string>(\"\");\n  const [isTagDialogOpen, setIsTagDialogOpen] = useState(false);\n  const [editingTag, setEditingTag] = useState<SiteDatabaseTag | null>(null);\n  const queryClient = useQueryClient();\n\n  // Fetch sites\n  const { data: sites = [] } = useQuery<Site[]>({\n    queryKey: [\"/api/sites\"],\n  });\n\n  // Fetch tags for selected site\n  const { data: tags = [], isLoading: tagsLoading } = useQuery({\n    queryKey: [\"/api/site-database-tags\", selectedSite],\n    queryFn: async () => {\n      const response = await fetch(`/api/site-database-tags?siteId=${selectedSite}`);\n      return response.json() as Promise<SiteDatabaseTag[]>;\n    },\n    enabled: !!selectedSite,\n  });\n\n  // Fetch latest values for selected site\n  const { data: latestValues = [] } = useQuery({\n    queryKey: [\"/api/sites\", selectedSite, \"database-values\", \"latest\"],\n    queryFn: async () => {\n      const response = await fetch(`/api/sites/${selectedSite}/database-values/latest`);\n      return response.json() as Promise<Array<SiteDatabaseValue & { tag: SiteDatabaseTag }>>;\n    },\n    enabled: !!selectedSite,\n    refetchInterval: 3000, // Refresh every 3 seconds\n  });\n\n  // Tag form\n  const form = useForm<TagFormValues>({\n    resolver: zodResolver(tagFormSchema),\n    defaultValues: {\n      siteId: \"\",\n      tagName: \"\",\n      adsPath: \"\",\n      dataType: \"INT\",\n      description: \"\",\n      scanInterval: 2000,\n      isActive: true,\n    },\n  });\n\n  // Create/Update tag mutation\n  const createTagMutation = useMutation({\n    mutationFn: async (data: TagFormValues) => {\n      if (editingTag) {\n        return apiRequest(`/api/site-database-tags/${editingTag.id}`, \"PUT\", data);\n      }\n      return apiRequest(\"/api/site-database-tags\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/site-database-tags\"] });\n      setIsTagDialogOpen(false);\n      setEditingTag(null);\n      form.reset();\n      toast({\n        title: editingTag ? \"Tag updated\" : \"Tag created\",\n        description: `ADS tag has been ${editingTag ? \"updated\" : \"created\"} successfully.`,\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: `Failed to ${editingTag ? \"update\" : \"create\"} tag: ${error.message}`,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete tag mutation\n  const deleteTagMutation = useMutation({\n    mutationFn: (tagId: string) =>\n      apiRequest(`/api/site-database-tags/${tagId}`, \"DELETE\"),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/site-database-tags\"] });\n      toast({\n        title: \"Tag deleted\",\n        description: \"ADS tag has been deleted successfully.\",\n      });\n    },\n  });\n\n  const onSubmit = (data: TagFormValues) => {\n    createTagMutation.mutate({ ...data, siteId: selectedSite });\n  };\n\n  const handleEditTag = (tag: SiteDatabaseTag) => {\n    setEditingTag(tag);\n    form.reset({\n      siteId: tag.siteId,\n      tagName: tag.tagName,\n      adsPath: tag.adsPath,\n      dataType: tag.dataType,\n      description: tag.description || \"\",\n      scanInterval: tag.scanInterval || 2000,\n      isActive: tag.isActive,\n    });\n    setIsTagDialogOpen(true);\n  };\n\n  const handleDeleteTag = (tagId: string) => {\n    if (confirm(\"Are you sure you want to delete this tag?\")) {\n      deleteTagMutation.mutate(tagId);\n    }\n  };\n\n  const handleAddTag = () => {\n    setEditingTag(null);\n    form.reset({\n      siteId: selectedSite,\n      tagName: \"\",\n      adsPath: \"\",\n      dataType: \"INT\",\n      description: \"\",\n      scanInterval: 2000,\n      isActive: true,\n    });\n    setIsTagDialogOpen(true);\n  };\n\n  const getDataTypeIcon = (dataType: string) => {\n    switch (dataType.toUpperCase()) {\n      case 'BOOL':\n        return <CheckCircle className=\"h-4 w-4\" />;\n      case 'INT':\n      case 'DINT':\n        return <Gauge className=\"h-4 w-4\" />;\n      case 'REAL':\n        return <Activity className=\"h-4 w-4\" />;\n      case 'STRING':\n        return <Database className=\"h-4 w-4\" />;\n      default:\n        return <Database className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-6 space-y-6\" data-testid=\"site-database-page\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-3xl font-bold tracking-tight\" data-testid=\"page-title\">Site Database</h1>\n          <p className=\"text-muted-foreground\" data-testid=\"page-description\">\n            Manage ADS tags and monitor real-time data collection from industrial sites\n          </p>\n        </div>\n      </div>\n\n      {/* Site Selection */}\n      <Card>\n        <CardContent className=\"pt-6\">\n          <div className=\"flex items-center gap-4\">\n            <div className=\"flex-1\">\n              <Select value={selectedSite} onValueChange={setSelectedSite} data-testid=\"select-site\">\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select a site...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {sites.map((site) => (\n                    <SelectItem key={site.id} value={site.id}>\n                      {site.name} ({site.ipAddress})\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            {selectedSite && (\n              <div className=\"flex items-center gap-2\">\n                {sites.find(s => s.id === selectedSite)?.status === 'online' ? (\n                  <Badge className=\"bg-green-500\">Online</Badge>\n                ) : (\n                  <Badge variant=\"destructive\">Offline</Badge>\n                )}\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* ADS Tags Section */}\n      {selectedSite && (\n        <Card>\n          <CardHeader className=\"pb-4\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <Database className=\"h-5 w-5\" />\n                  ADS Tags Configuration\n                </CardTitle>\n                <CardDescription>\n                  Configure ADS tags for real-time data collection\n                </CardDescription>\n              </div>\n              <Button onClick={handleAddTag} data-testid=\"button-add-tag\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Tag\n              </Button>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {tagsLoading ? (\n              <div className=\"text-center py-8\">Loading tags...</div>\n            ) : tags.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No ADS tags configured for this site\n              </div>\n            ) : (\n              <div className=\"rounded-md border\">\n                <Table>\n                  <TableHeader>\n                    <TableRow className=\"bg-muted/50\">\n                      <TableHead className=\"font-semibold\">Tag Name</TableHead>\n                      <TableHead className=\"font-semibold\">ADS Path</TableHead>\n                      <TableHead className=\"font-semibold\">Data Type</TableHead>\n                      <TableHead className=\"font-semibold\">Current Value</TableHead>\n                      <TableHead className=\"font-semibold\">Status</TableHead>\n                      <TableHead className=\"font-semibold w-24\">Actions</TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {tags.map((tag, index) => {\n                      const latestValue = latestValues.find(v => v.tagId === tag.id);\n                      return (\n                        <TableRow key={tag.id} data-testid={`tag-row-${tag.id}`} className={index % 2 === 0 ? \"bg-muted/25\" : \"\"}>\n                          <TableCell className=\"font-medium\">\n                            <div className=\"flex items-center gap-2\">\n                              {getDataTypeIcon(tag.dataType)}\n                              {tag.tagName}\n                            </div>\n                          </TableCell>\n                          <TableCell className=\"font-mono text-sm\">{tag.adsPath}</TableCell>\n                          <TableCell>\n                            <Badge variant=\"outline\">{tag.dataType}</Badge>\n                          </TableCell>\n                          <TableCell className=\"font-mono font-semibold text-blue-600\">\n                            {latestValue ? latestValue.value : \"-\"}\n                          </TableCell>\n                          <TableCell>\n                            {tag.isActive ? (\n                              <Badge className=\"bg-green-500\">Active</Badge>\n                            ) : (\n                              <Badge variant=\"secondary\">Inactive</Badge>\n                            )}\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"flex items-center gap-1\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleEditTag(tag)}\n                                data-testid={`button-edit-${tag.id}`}\n                              >\n                                <Edit className=\"h-4 w-4\" />\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleDeleteTag(tag.id)}\n                                data-testid={`button-delete-${tag.id}`}\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                  </TableBody>\n                </Table>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Add/Edit Tag Dialog */}\n      <Dialog open={isTagDialogOpen} onOpenChange={setIsTagDialogOpen}>\n        <DialogContent className=\"max-w-md\" data-testid=\"tag-dialog\">\n          <DialogHeader>\n            <DialogTitle>{editingTag ? \"Edit ADS Tag\" : \"Add ADS Tag\"}</DialogTitle>\n            <DialogDescription>\n              {editingTag ? \"Update the ADS tag configuration\" : \"Configure a new ADS tag for data collection\"}\n            </DialogDescription>\n          </DialogHeader>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"tagName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Tag Name</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., Temperature_01\" {...field} data-testid=\"input-tag-name\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"adsPath\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>ADS Path</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"e.g., GVL.Temperature\" {...field} data-testid=\"input-ads-path\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"dataType\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Data Type</FormLabel>\n                    <FormControl>\n                      <Select value={field.value} onValueChange={field.onChange} data-testid=\"select-data-type\">\n                        <SelectTrigger>\n                          <SelectValue />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem value=\"BOOL\">BOOL</SelectItem>\n                          <SelectItem value=\"INT\">INT</SelectItem>\n                          <SelectItem value=\"DINT\">DINT</SelectItem>\n                          <SelectItem value=\"REAL\">REAL</SelectItem>\n                          <SelectItem value=\"STRING\">STRING</SelectItem>\n                        </SelectContent>\n                      </Select>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"scanInterval\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Scan Interval (ms)</FormLabel>\n                    <FormControl>\n                      <Input \n                        type=\"number\" \n                        min=\"1000\" \n                        step=\"500\"\n                        {...field} \n                        onChange={(e) => field.onChange(parseInt(e.target.value) || 2000)}\n                        data-testid=\"input-scan-interval\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description (Optional)</FormLabel>\n                    <FormControl>\n                      <Textarea \n                        placeholder=\"Tag description...\"\n                        value={field.value || \"\"}\n                        onChange={field.onChange}\n                        onBlur={field.onBlur}\n                        name={field.name}\n                        ref={field.ref}\n                        data-testid=\"input-description\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-3 shadow-sm\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel>Enable Tag</FormLabel>\n                      <div className=\"text-sm text-muted-foreground\">\n                        Start monitoring this tag immediately\n                      </div>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-is-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-2\">\n                <Button type=\"button\" variant=\"outline\" onClick={() => setIsTagDialogOpen(false)}>\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={createTagMutation.isPending} data-testid=\"button-save-tag\">\n                  {createTagMutation.isPending ? \"Saving...\" : (editingTag ? \"Update\" : \"Create\")}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","size_bytes":17643},"client/src/pages/plc-tag-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Upload, Download, Plus, Trash2, AlertTriangle, CheckCircle, Activity, Settings } from \"lucide-react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface PlcTag {\n  id: string;\n  siteId: string;\n  tagName: string;\n  plcAddress: string;\n  description: string;\n  dataType: string;\n  isActive: boolean;\n  alarmOnTrue: boolean;\n  alarmOnFalse: boolean;\n  severityLevel: string;\n  lastValue: string | null;\n  lastReadTime: string | null;\n  createdAt: string;\n  updatedAt: string;\n}\n\ninterface Site {\n  id: string;\n  name: string;\n  ipAddress: string;\n  status: string;\n}\n\nexport default function PlcTagManagement() {\n  const [selectedSite, setSelectedSite] = useState(\"\");\n  const [bulkUploadText, setBulkUploadText] = useState(\"\");\n  const [showBulkUpload, setShowBulkUpload] = useState(false);\n  const { toast } = useToast();\n\n  // Fetch sites\n  const { data: sites } = useQuery<Site[]>({\n    queryKey: [\"/api/sites\"],\n  });\n\n  // Fetch PLC tags\n  const { data: plcTags, isLoading } = useQuery<PlcTag[]>({\n    queryKey: [\"/api/plc-tags\"],\n  });\n\n  // Bulk upload mutation\n  const bulkUploadMutation = useMutation({\n    mutationFn: async (data: { siteId: string; tags: any[] }) => {\n      return apiRequest(\"/api/plc-tags/bulk\", \"POST\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/plc-tags\"] });\n      setBulkUploadText(\"\");\n      setShowBulkUpload(false);\n      toast({\n        title: \"Success\",\n        description: \"PLC tags uploaded successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload PLC tags\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete tag mutation\n  const deleteTagMutation = useMutation({\n    mutationFn: async (tagId: string) => {\n      return apiRequest(`/api/plc-tags/${tagId}`, \"DELETE\");\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/plc-tags\"] });\n      toast({\n        title: \"Success\",\n        description: \"PLC tag deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete PLC tag\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleBulkUpload = () => {\n    if (!selectedSite || !bulkUploadText.trim()) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a site and provide tag data\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    try {\n      const lines = bulkUploadText.trim().split('\\n');\n      const tags = lines.map(line => {\n        const parts = line.split(',').map(p => p.trim());\n        if (parts.length < 4) {\n          throw new Error(`Invalid line format: ${line}`);\n        }\n        return {\n          tagName: parts[0],\n          plcAddress: parts[1],\n          description: parts[2],\n          dataType: parts[3] || 'BOOL',\n          alarmOnTrue: (parts[4] || 'true').toLowerCase() === 'true',\n          severityLevel: parts[5] || 'warning'\n        };\n      });\n\n      bulkUploadMutation.mutate({ siteId: selectedSite, tags });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Invalid CSV format\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const getSiteName = (siteId: string) => {\n    const site = sites?.find(s => s.id === siteId);\n    return site ? site.name : \"Unknown Site\";\n  };\n\n  const getTagIcon = (dataType: string, alarmOnTrue: boolean) => {\n    if (alarmOnTrue) {\n      return <AlertTriangle className=\"h-4 w-4 text-orange-500\" />;\n    }\n    if (dataType === 'BOOL') {\n      return <CheckCircle className=\"h-4 w-4 text-blue-500\" />;\n    }\n    if (dataType === 'REAL' || dataType === 'INT') {\n      return <Activity className=\"h-4 w-4 text-green-500\" />;\n    }\n    return <Settings className=\"h-4 w-4 text-gray-500\" />;\n  };\n\n  const filteredTags = selectedSite && selectedSite !== \"all\"\n    ? plcTags?.filter(tag => tag.siteId === selectedSite) \n    : plcTags;\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex justify-between items-center\">\n        <div>\n          <h1 className=\"text-2xl font-bold\">PLC Tag Management</h1>\n          <p className=\"text-sm text-gray-500\">Configure PLC tags for site monitoring and alerts</p>\n        </div>\n        <div className=\"flex gap-3\">\n          <Button \n            variant=\"outline\" \n            onClick={() => setShowBulkUpload(!showBulkUpload)}\n            className=\"flex items-center gap-2\"\n            data-testid=\"button-bulk-upload\"\n          >\n            <Upload className=\"h-4 w-4\" />\n            Bulk Upload\n          </Button>\n        </div>\n      </div>\n\n      {/* Site Filter */}\n      <Card>\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center gap-3\">\n            <Label htmlFor=\"site-select\">Filter by Site:</Label>\n            <Select value={selectedSite} onValueChange={setSelectedSite}>\n              <SelectTrigger className=\"w-64\" data-testid=\"select-site-filter\">\n                <SelectValue placeholder=\"All Sites\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Sites</SelectItem>\n                {sites?.map(site => (\n                  <SelectItem key={site.id} value={site.id}>\n                    {site.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n            {filteredTags && (\n              <Badge variant=\"outline\" className=\"ml-2\">\n                {filteredTags.length} tags\n              </Badge>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Bulk Upload Section */}\n      {showBulkUpload && (\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Upload className=\"h-5 w-5\" />\n              Bulk Upload PLC Tags\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"site-upload\">Select Site for Upload:</Label>\n              <Select value={selectedSite} onValueChange={setSelectedSite}>\n                <SelectTrigger className=\"w-full mt-1\" data-testid=\"select-site-upload\">\n                  <SelectValue placeholder=\"Choose a site...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {sites?.map(site => (\n                    <SelectItem key={site.id} value={site.id}>\n                      {site.name}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            \n            <div>\n              <Label htmlFor=\"bulk-data\">CSV Data (tagName, plcAddress, description, dataType, alarmOnTrue, severityLevel):</Label>\n              <Textarea\n                id=\"bulk-data\"\n                placeholder={`Example format:\nCTS Feed Pump 1 Trip, GVL.M_CTS_FEED_PUMP1_TRIP, CTS Feed Pump 1 Trip Alarm, BOOL, true, critical\nCTS Feed Pump 2 Trip, GVL.M_CTS_FEED_PUMP2_TRIP, CTS Feed Pump 2 Trip Alarm, BOOL, true, critical\nFlow Rate Inlet, GVL.FLOW_RATE_INLET, Inlet Flow Rate, REAL, false, info`}\n                value={bulkUploadText}\n                onChange={(e) => setBulkUploadText(e.target.value)}\n                className=\"mt-1 min-h-32\"\n                data-testid=\"textarea-bulk-upload\"\n              />\n            </div>\n            \n            <div className=\"flex gap-2\">\n              <Button \n                onClick={handleBulkUpload}\n                disabled={bulkUploadMutation.isPending || !selectedSite || !bulkUploadText.trim()}\n                className=\"flex items-center gap-2\"\n                data-testid=\"button-confirm-upload\"\n              >\n                <Upload className=\"h-4 w-4\" />\n                {bulkUploadMutation.isPending ? \"Uploading...\" : \"Upload Tags\"}\n              </Button>\n              <Button \n                variant=\"outline\" \n                onClick={() => setShowBulkUpload(false)}\n                data-testid=\"button-cancel-upload\"\n              >\n                Cancel\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* PLC Tags List */}\n      <Card>\n        <CardHeader>\n          <CardTitle>PLC Tags</CardTitle>\n        </CardHeader>\n        <CardContent>\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {[...Array(5)].map((_, i) => (\n                <div key={i} className=\"h-16 bg-gray-200 dark:bg-gray-700 rounded animate-pulse\" />\n              ))}\n            </div>\n          ) : filteredTags && filteredTags.length > 0 ? (\n            <div className=\"space-y-3\">\n              {filteredTags.map((tag) => (\n                <div key={tag.id} className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 dark:hover:bg-gray-800\" data-testid={`tag-row-${tag.id}`}>\n                  <div className=\"flex items-center space-x-3 flex-1\">\n                    <div className=\"flex items-center justify-center w-8 h-8 rounded-full bg-gray-100 dark:bg-gray-700\">\n                      {getTagIcon(tag.dataType, tag.alarmOnTrue)}\n                    </div>\n                    \n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center gap-2 mb-1\">\n                        <h3 className=\"text-sm font-semibold text-gray-900 dark:text-gray-100 truncate\">\n                          {tag.tagName}\n                        </h3>\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {tag.dataType}\n                        </Badge>\n                        {tag.alarmOnTrue && (\n                          <Badge variant=\"outline\" className=\"text-xs bg-orange-50 text-orange-700 dark:bg-orange-900 dark:text-orange-300\">\n                            Alarm\n                          </Badge>\n                        )}\n                        <Badge variant=\"outline\" className=\"text-xs bg-blue-50 text-blue-700 dark:bg-blue-900 dark:text-blue-300\">\n                          {tag.severityLevel}\n                        </Badge>\n                      </div>\n                      \n                      <p className=\"text-xs text-gray-600 dark:text-gray-400 mb-1\">\n                        {tag.description}\n                      </p>\n                      \n                      <div className=\"flex items-center gap-3 text-xs text-gray-500\">\n                        <span className=\"font-mono\">{tag.plcAddress}</span>\n                        <span>Site: {getSiteName(tag.siteId)}</span>\n                        {tag.lastValue && (\n                          <span>Last: {tag.lastValue}</span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant={tag.isActive ? \"default\" : \"secondary\"} className=\"text-xs\">\n                      {tag.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                    \n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={() => deleteTagMutation.mutate(tag.id)}\n                      disabled={deleteTagMutation.isPending}\n                      className=\"text-red-600 hover:text-red-700 dark:text-red-400 dark:hover:text-red-300\"\n                      data-testid={`button-delete-${tag.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Settings className=\"h-12 w-12 mx-auto mb-4 opacity-50\" />\n              <p>No PLC tags configured</p>\n              <p className=\"text-sm\">Use bulk upload to add tags for your sites</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":12743},"server/env.ts":{"content":"import dotenv from \"dotenv\";\nimport path from \"path\";\n\n// Load environment variables from .env file\nconst envPath = path.resolve(process.cwd(), '.env');\nconst result = dotenv.config({ path: envPath });\n\nif (result.error) {\n  console.error('Error loading .env file:', result.error);\n} else {\n  console.log('Environment variables loaded successfully');\n}\n\nconsole.log('DATABASE_URL:', process.env.DATABASE_URL ? 'Set' : 'Not set');","size_bytes":429},"ads.py":{"content":"import pyads\nimport sys\n\n# --- PLC Connection Details ---\nPLC_AMS_NET_ID = '172.18.236.210.1.1'\nPLC_PORT = pyads.PORT_TC3PLC1\n\ndef read_plc_tag(tag_name):\n    \"\"\"Connects to the PLC, reads a single tag, and returns the value.\"\"\"\n    try:\n        plc = pyads.Connection(PLC_AMS_NET_ID, PLC_PORT)\n        plc.open()\n        value = plc.read_by_name(tag_name, pyads.PLCTYPE_REAL)\n        plc.close()\n        return value\n    except Exception as e:\n        # Print errors to stderr so Node.js can distinguish them from valid output\n        print(f\"Python Error: {e}\", file=sys.stderr)\n        return None\n\nif __name__ == \"__main__\":\n    # This script is designed to be called from another process (like Node.js).\n    # It expects the tag name to be passed as the first command-line argument.\n    if len(sys.argv) > 1:\n        tag_to_read = sys.argv[1]\n        tag_value = read_plc_tag(tag_to_read)\n        if tag_value is not None:\n            # Print the raw value to stdout for the calling process to capture\n            print(tag_value)\n    else:\n        print(\"Python Error: No tag name provided.\", file=sys.stderr)\n","size_bytes":1116},"beckhoffRead.js":{"content":"import BeckhoffClient from 'node-beckhoff';\n\n// --- Connection Settings for our PLC ---\nconst settings = {\n  \"plc\": {\n    \"ip\": \"15.15.50.13\", // The VPN-reachable IP of the PLC\n    \"port\": 48898       // The standard AMS router port on the PLC\n  },\n  \"remote\": {\n    \"netid\": \"172.18.236.210.1.1\", // The AMS Net ID of the PLC\n    \"port\": 851                    // The TwinCAT 3 runtime port\n  },\n\n  \"local\": {},\n  \"develop\": {\n    \"verbose\": true, // Enable verbose logging for detailed diagnostics\n    \"debug\": false\n  }\n};\n\nasync function main() {\n  let beckhoff;\n  try {\n    beckhoff = new BeckhoffClient(settings);\n    console.log('Beckhoff client initialized. Fetching PLC info to establish connection...');\n    \n    // This first command establishes the connection and initializes the internal DB\n    const plcInfo = await beckhoff.getPlcInfo();\n    console.log('✅ Successfully connected to PLC. Info:', plcInfo);\n\n    const symbolToRead = [\n      { name: 'BIOLOGICAL_HMI.COOLING_TOWER_IN_FM_OUT_HMI' }\n    ];\n\n    // Set up a loop to read the tag every 2 seconds\n    setInterval(async () => {\n      try {\n        const data = await beckhoff.readPlcData(symbolToRead);\n        if (data && data[0] && typeof data[0].value !== 'undefined') {\n          console.log('Cooling Tower Flow:', data[0].value);\n        } else {\n          console.log('Tag read but no data returned.', data);\n        }\n      } catch (readErr) {\n        console.error('❌ Error during tag read:', readErr.message);\n      }\n    }, 2000);\n\n  } catch (err) {\n    console.error('❌ An error occurred during initial connection:', err.message);\n    if (beckhoff) {\n      try {\n        await beckhoff.destroy(); // Ensure cleanup on failure\n      } catch (destroyErr) {\n        // Suppress errors during cleanup as the initial error is more important\n      }\n    }\n    process.exit(1);\n  }\n\n  // Handle graceful shutdown on Ctrl+C\n  process.on('SIGINT', async () => {\n    console.log('\\n🔌 Disconnecting from PLC...');\n    if (beckhoff) {\n      await beckhoff.destroy();\n    }\n    process.exit(0);\n  });\n}\n\nmain();\n","size_bytes":2093},"find_net_id.py":{"content":"import pyads\nfrom pyads import pyads_ex\n\ntry:\n    # This function directly queries the local AMS router for its address.\n    # It requires a port to be opened first.\n    port = pyads_ex.adsPortOpenEx()\n    local_address = pyads_ex.adsGetLocalAddressEx(port)\n\n    # Inspect the AmsAddr object to find the correct property for the Net ID.\n    print(\"--- AmsAddr Object Attributes ---\")\n    print(local_address.__dict__)\n    print(\"---------------------------\")\n\n    # From the output, we can identify the correct attribute and use it.\n    # It is likely named '_ams_addr' or similar.\n    if hasattr(local_address, 'netid'):\n        print(f\"PYADS_AMS_NET_ID:{local_address.netid}\")\n\nexcept Exception as e:\n    print(f\"Error getting local AMS Net ID: {e}\")\n\nfinally:\n    # Ensure the port is always closed.\n    if 'port' in locals() and port:\n        pyads_ex.adsPortCloseEx(port)\n","size_bytes":877},"plcRead.js":{"content":"import ads from \"node-ads\";\n\nconst options = {\n  // Connect to the local AMS router, which will forward the request to the PLC\n  host: '127.0.0.1',\n  port: 48898,\n\n  // The AMS Net ID of the target PLC\n  amsNetIdTarget: '172.18.236.210.1.1',\n\n  // The local AMS Net ID of this machine, which the PLC recognizes\n  amsNetIdSource: '192.168.22.11.1.1',\n\n  // Set a timeout for the connection\n  timeout: 2000,\n\n  targetAdsPort: 851                     // TwinCAT 3 port\n};\n\nconst client = ads.connect(options, () => {\n  console.log(\"✅ Connected to PLC\");\n\n  setInterval(() => {\n    client.read(\n      { \n        symname: \"BIOLOGICAL_HMI.COOLING_TOWER_IN_FM_OUT_HMI\", \n        bytelength: ads.REAL \n      },\n      (err, result) => {\n        if (err) {\n          console.error(\"❌ Read error:\", err); // Log the full error object\n          return;\n        }\n        console.log(\"Cooling Tower Flow:\", result.value);\n      }\n    );\n  }, 2000);\n});\n\nclient.on(\"error\", (err) => {\n  console.error(\"❌ ADS Client Error:\", err);\n});\n\nprocess.on(\"SIGINT\", () => {\n  console.log(\"\\n🔌 Disconnecting from PLC...\");\n  client.end();\n  process.exit();\n});\n","size_bytes":1145},"test_runner.js":{"content":"import { spawn } from 'child_process';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\n// --- This is the same logic we just added to the service ---\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n// ----------------------------------------------------------\n\nconst tagToRead = 'BIOLOGICAL_HMI.COOLING_TOWER_IN_FM_OUT_HMI';\nconst scriptPath = path.join(__dirname, 'ads.py');\n\nconsole.log(`[Test Runner] Executing: python ${scriptPath} ${tagToRead}`);\n\nconst pythonProcess = spawn('python', [scriptPath, tagToRead]);\n\npythonProcess.stdout.on('data', (data) => {\n  console.log(`[Test Runner] Python stdout: ${data.toString().trim()}`);\n});\n\npythonProcess.stderr.on('data', (data) => {\n  console.error(`[Test Runner] Python stderr: ${data.toString().trim()}`);\n});\n\npythonProcess.on('close', (code) => {\n  console.log(`[Test Runner] Python script exited with code ${code}`);\n});\n","size_bytes":939},"server/node-ads.d.ts":{"content":"declare module 'node-ads';\n","size_bytes":27},"server/services/sqlViewerService.ts":{"content":"import sql from 'mssql';\n\nconst sqlConfig = {\n  user: process.env.SQL_SERVER_USER,\n  password: process.env.SQL_SERVER_PASSWORD,\n  server: process.env.SQL_SERVER_HOST || 'localhost',\n  options: {\n    encrypt: false, // Use true for Azure SQL Database, or if you have an SSL certificate\n    trustServerCertificate: true, // Change to true for local dev / self-signed certs\n  },\n};\n\nclass SQLViewerService {\n  private pool: sql.ConnectionPool;\n\n  constructor() {\n    this.pool = new sql.ConnectionPool(sqlConfig);\n  }\n\n  private async connect() {\n    if (!this.pool.connected) {\n      try {\n        await this.pool.connect();\n        console.log('[SQL Viewer] Successfully connected to SQL Server.');\n      } catch (err) {\n        console.error('[SQL Viewer] Database Connection Failed! Bad Config: ', err);\n        throw err; // Rethrow the error to be handled by the caller\n      }\n    }\n  }\n\n  public async testConnection(): Promise<void> {\n    // This method tries to connect and immediately disconnects.\n    // Useful for checking credentials and connectivity at startup.\n    try {\n      const testPool = new sql.ConnectionPool(sqlConfig);\n      await testPool.connect();\n      console.log('[SQL Viewer] Startup connection test successful.');\n      await testPool.close();\n    } catch (err) {\n      console.error('[SQL Viewer] Startup connection test failed.');\n      throw err; // Rethrow to be caught by the startup process\n    }\n  }\n\n  public async getDatabases(): Promise<string[]> {\n    await this.connect();\n    const result = await this.pool.request().query('SELECT name FROM sys.databases WHERE database_id > 4;'); // Exclude system databases\n    return result.recordset.map((row) => row.name);\n  }\n\n  public async getTables(database: string): Promise<string[]> {\n    await this.connect();\n    const result = await this.pool.request().query(`USE [${database}]; SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_TYPE = 'BASE TABLE';`);\n    return result.recordset.map((row) => row.TABLE_NAME);\n  }\n\n  public async getTableData(database: string, table: string, options?: {\n    limit?: number;\n    sortColumn?: string;\n    sortDirection?: 'asc' | 'desc';\n  }): Promise<any[]> {\n    await this.connect();\n    // Basic protection against SQL injection, but a more robust solution is recommended for production\n    if (!/^[a-zA-Z0-9_]+$/.test(database) || !/^[a-zA-Z0-9_]+$/.test(table)) {\n      throw new Error('Invalid database or table name.');\n    }\n    \n    const limit = options?.limit || 100;\n    let query = `USE [${database}]; SELECT TOP ${limit} * FROM [${table}]`;\n    \n    // Add ORDER BY clause if sorting is specified\n    if (options?.sortColumn && options?.sortDirection) {\n      // Validate column name to prevent SQL injection\n      if (!/^[a-zA-Z0-9_]+$/.test(options.sortColumn)) {\n        throw new Error('Invalid column name.');\n      }\n      query += ` ORDER BY [${options.sortColumn}] ${options.sortDirection.toUpperCase()}`;\n    }\n    \n    query += ';';\n    const result = await this.pool.request().query(query);\n    return result.recordset;\n  }\n}\n\nexport const sqlViewerService = new SQLViewerService();\n","size_bytes":3144},"client/src/pages/sql-viewer.tsx":{"content":"import React, { useState, useEffect } from 'react';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { ScrollArea } from '@/components/ui/scroll-area';\nimport { Separator } from '@/components/ui/separator';\nimport { \n  Database, \n  Table as TableIcon, \n  Download, \n  Filter, \n  RefreshCw, \n  Search, \n  AlertCircle, \n  Settings,\n  ExternalLink,\n  ChevronRight\n} from 'lucide-react';\n\ninterface DatabaseInfo {\n  name: string;\n  status: 'connected' | 'error' | 'unknown';\n  tableCount?: number;\n}\n\nconst SQLViewerPage: React.FC = () => {\n  const [databases, setDatabases] = useState<DatabaseInfo[]>([]);\n  const [selectedDatabase, setSelectedDatabase] = useState<string>('');\n  const [tables, setTables] = useState<string[]>([]);\n  const [selectedTable, setSelectedTable] = useState<string>('');\n  const [tableData, setTableData] = useState<any[]>([]);\n  const [columns, setColumns] = useState<string[]>([]);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [connectionStatus, setConnectionStatus] = useState<'checking' | 'connected' | 'disconnected'>('disconnected');\n  \n  // Filter and search states\n  const [searchTerm, setSearchTerm] = useState<string>('');\n  const [filteredData, setFilteredData] = useState<any[]>([]);\n  const [sortColumn, setSortColumn] = useState<string>('');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [maxRows, setMaxRows] = useState(100);\n  const [columnFilter, setColumnFilter] = useState<string>('');\n  const [selectedColumns, setSelectedColumns] = useState<string[]>([]);\n\n  // Fetch databases on component mount\n  useEffect(() => {\n    const fetchDatabases = async () => {\n      try {\n        setLoading(true);\n        setConnectionStatus('checking');\n        const response = await fetch('/api/sql-viewer/databases');\n        \n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ message: 'Failed to fetch databases' }));\n          throw new Error(errorData.message || 'Failed to fetch databases');\n        }\n        \n        const data = await response.json();\n        const databaseInfo: DatabaseInfo[] = data.map((name: string) => ({\n          name,\n          status: 'connected' as const,\n          tableCount: 0\n        }));\n        \n        setDatabases(databaseInfo);\n        setConnectionStatus('connected');\n        setError(null);\n      } catch (err) {\n        console.error('Database fetch error:', err);\n        setConnectionStatus('disconnected');\n        setError((err as Error).message);\n        setDatabases([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchDatabases();\n  }, []);\n\n  // Fetch tables when a database is selected\n  useEffect(() => {\n    if (!selectedDatabase) {\n      setTables([]);\n      return;\n    }\n\n    const fetchTables = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch(`/api/sql-viewer/databases/${selectedDatabase}/tables`);\n        \n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ message: 'Failed to fetch tables' }));\n          throw new Error(errorData.message || 'Failed to fetch tables');\n        }\n        \n        const data = await response.json();\n        setTables(data);\n        setSelectedTable('');\n        setTableData([]);\n        setError(null);\n        \n        // Update database info with table count\n        setDatabases(prev => prev.map(db => \n          db.name === selectedDatabase \n            ? { ...db, tableCount: data.length }\n            : db\n        ));\n      } catch (err) {\n        console.error('Tables fetch error:', err);\n        setError((err as Error).message);\n        setTables([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTables();\n  }, [selectedDatabase]);\n\n  // Fetch table data when a table is selected or sorting changes\n  useEffect(() => {\n    if (!selectedDatabase || !selectedTable) {\n      setTableData([]);\n      setColumns([]);\n      return;\n    }\n\n    const fetchTableData = async () => {\n      try {\n        setLoading(true);\n        \n        let url = `/api/sql-viewer/databases/${selectedDatabase}/tables/${selectedTable}?limit=${maxRows}`;\n        \n        // Add sorting parameters to URL\n        if (sortColumn && sortDirection) {\n          url += `&sortColumn=${encodeURIComponent(sortColumn)}&sortDirection=${sortDirection}`;\n        }\n        \n        const response = await fetch(url);\n        \n        if (!response.ok) {\n          const errorData = await response.json().catch(() => ({ message: 'Failed to fetch table data' }));\n          throw new Error(errorData.message || 'Failed to fetch table data');\n        }\n        \n        const data = await response.json();\n        setTableData(data);\n        \n        if (data.length > 0) {\n          setColumns(Object.keys(data[0]));\n        } else {\n          setColumns([]);\n        }\n        \n        setError(null);\n      } catch (err) {\n        console.error('Table data fetch error:', err);\n        setError((err as Error).message);\n        setTableData([]);\n        setColumns([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTableData();\n  }, [selectedDatabase, selectedTable, sortColumn, sortDirection, maxRows]);\n\n  // Filter and search functionality (without sorting since it's done server-side)\n  useEffect(() => {\n    let filtered = [...tableData];\n\n    // Apply search filter first\n    if (searchTerm) {\n      filtered = filtered.filter(row =>\n        Object.values(row).some(value =>\n          String(value).toLowerCase().includes(searchTerm.toLowerCase())\n        )\n      );\n    }\n\n    // Apply column filter\n    if (columnFilter) {\n      filtered = filtered.filter(row =>\n        Object.entries(row).some(([key, value]) =>\n          key.toLowerCase().includes(columnFilter.toLowerCase()) ||\n          String(value).toLowerCase().includes(columnFilter.toLowerCase())\n        )\n      );\n    }\n\n    // Note: Sorting is now handled server-side via database ORDER BY\n    // Row limit is also handled server-side via TOP clause\n\n    setFilteredData(filtered);\n  }, [tableData, searchTerm, columnFilter]);\n\n  const handleSort = (column: string) => {\n    if (sortColumn === column) {\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortColumn(column);\n      setSortDirection('asc');\n    }\n  };\n\n  const exportToCSV = () => {\n    if (filteredData.length === 0) return;\n\n    const csvContent = [\n      columns.join(','),\n      ...filteredData.map(row => \n        columns.map(col => `\"${String(row[col] || '').replace(/\"/g, '\"\"')}\"`).join(',')\n      )\n    ].join('\\n');\n\n    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });\n    const link = document.createElement('a');\n    if (link.download !== undefined) {\n      const url = URL.createObjectURL(blob);\n      link.setAttribute('href', url);\n      link.setAttribute('download', `${selectedTable || 'data'}.csv`);\n      link.style.visibility = 'hidden';\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n    }\n  };\n\n  const refreshData = () => {\n    if (selectedDatabase && selectedTable) {\n      // Trigger refresh by updating the dependency\n      setTableData([]);\n      setError(null);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <div className=\"w-full p-2 space-y-3\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Database className=\"h-5 w-5 text-primary\" />\n            <div>\n              <h1 className=\"text-xl font-semibold text-foreground\">SQL Viewer</h1>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Badge \n              variant={connectionStatus === 'connected' ? 'default' : 'destructive'}\n              className=\"text-xs px-2 py-1\"\n            >\n              <div className={`w-1.5 h-1.5 rounded-full mr-1.5 ${\n                connectionStatus === 'connected' ? 'bg-green-500' : \n                connectionStatus === 'checking' ? 'bg-yellow-500' : 'bg-red-500'\n              }`} />\n              {connectionStatus === 'connected' ? 'Connected' : \n               connectionStatus === 'checking' ? 'Connecting' : 'Disconnected'}\n            </Badge>\n            <Button variant=\"outline\" size=\"sm\" onClick={() => window.location.reload()}>\n              <Settings className=\"h-3 w-3 mr-1\" />\n              <span className=\"text-xs\">Settings</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Error Alert */}\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertDescription className=\"text-base\">\n              <strong>Connection Error:</strong> {error}\n              <div className=\"mt-2 text-sm\">\n                Please check your SQL Server connection settings and ensure the server is accessible.\n              </div>\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Database Selection and Tables */}\n        <div className=\"grid grid-cols-12 gap-3\">\n          {/* Database Selection */}\n          <Card className=\"col-span-12 lg:col-span-6\">\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"flex items-center text-sm\">\n                <Database className=\"h-4 w-4 mr-1\" />\n                Database Selection\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"py-3\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"flex-1\">\n                  <Select \n                    value={selectedDatabase} \n                    onValueChange={setSelectedDatabase}\n                    disabled={loading || databases.length === 0}\n                  >\n                    <SelectTrigger className=\"h-8 text-sm\" data-testid=\"select-database\">\n                      <SelectValue placeholder=\"Select Database\" />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {databases.map((db) => (\n                        <SelectItem key={db.name} value={db.name}>\n                          <div className=\"flex items-center justify-between w-full\">\n                            <span className=\"text-sm\">{db.name}</span>\n                            <Badge variant=\"secondary\" className=\"ml-2 text-xs px-1 py-0\">\n                              {db.tableCount || 0}\n                            </Badge>\n                          </div>\n                        </SelectItem>\n                      ))}\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                {selectedDatabase && (\n                  <div className=\"flex items-center gap-2\">\n                    <Badge variant=\"outline\" className=\"text-xs px-2 py-1\">\n                      {tables.length} tables\n                    </Badge>\n                    <Button variant=\"ghost\" size=\"sm\" onClick={refreshData} disabled={loading} className=\"h-7 w-7 p-0\">\n                      <RefreshCw className={`h-3 w-3 ${loading ? 'animate-spin' : ''}`} />\n                    </Button>\n                  </div>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Tables List */}\n          {selectedDatabase && (\n            <Card className=\"col-span-12 lg:col-span-6\">\n              <CardHeader className=\"pb-2\">\n                <CardTitle className=\"flex items-center text-sm\">\n                  <TableIcon className=\"h-4 w-4 mr-1\" />\n                  Tables ({tables.length})\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"py-3\">\n                <ScrollArea className=\"h-24\">\n                  <div className=\"grid grid-cols-2 gap-1\">\n                    {loading && tables.length === 0 ? (\n                      <div className=\"col-span-2 text-center text-muted-foreground py-2\">\n                        <RefreshCw className=\"h-3 w-3 animate-spin mx-auto mb-1\" />\n                        <div className=\"text-xs\">Loading...</div>\n                      </div>\n                    ) : tables.length === 0 ? (\n                      <div className=\"col-span-2 text-center text-muted-foreground py-2\">\n                        <TableIcon className=\"h-3 w-3 mx-auto mb-1 opacity-50\" />\n                        <div className=\"text-xs\">No tables</div>\n                      </div>\n                    ) : (\n                      tables.map((table) => (\n                        <Button\n                          key={table}\n                          variant={selectedTable === table ? 'default' : 'ghost'}\n                          className=\"h-5 px-2 text-xs font-mono rounded-sm justify-start\"\n                          onClick={() => setSelectedTable(table)}\n                          data-testid={`button-select-table-${table}`}\n                        >\n                          <TableIcon className=\"h-2 w-2 mr-1 flex-shrink-0\" />\n                          <span className=\"truncate text-xs\">{table}</span>\n                        </Button>\n                      ))\n                    )}\n                  </div>\n                </ScrollArea>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n\n        {/* Data Viewer */}\n        {selectedDatabase && (\n          <Card>\n            <CardHeader className=\"pb-2\">\n                <div className=\"flex items-center justify-between\">\n                  <CardTitle className=\"flex items-center text-sm\">\n                    {selectedTable ? (\n                      <>\n                        <ExternalLink className=\"h-3 w-3 mr-1\" />\n                        {selectedTable}\n                        <Badge variant=\"secondary\" className=\"ml-2 text-xs px-1 py-0\">\n                          {filteredData.length}\n                        </Badge>\n                      </>\n                    ) : (\n                      <>\n                        <Search className=\"h-3 w-3 mr-1\" />\n                        Select table\n                      </>\n                    )}\n                  </CardTitle>\n                  \n                  {selectedTable && tableData.length > 0 && (\n                    <div className=\"flex items-center space-x-1\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={exportToCSV}\n                        data-testid=\"button-export-csv\"\n                        className=\"h-7 px-2 text-xs\"\n                      >\n                        <Download className=\"h-3 w-3 mr-1\" />\n                        CSV\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={refreshData}\n                        disabled={loading}\n                        className=\"h-7 w-7 p-0\"\n                      >\n                        <RefreshCw className={`h-3 w-3 ${loading ? 'animate-spin' : ''}`} />\n                      </Button>\n                    </div>\n                  )}\n                </div>\n              </CardHeader>\n              \n              <CardContent>\n                {selectedTable ? (\n                  <>\n                    {/* Search and Filter Controls */}\n                    {tableData.length > 0 && (\n                      <div className=\"mb-3 space-y-2\">\n                        <div className=\"grid grid-cols-12 gap-2 items-center\">\n                          <div className=\"col-span-4 relative\">\n                            <Search className=\"absolute left-2 top-1.5 h-3 w-3 text-muted-foreground\" />\n                            <Input\n                              placeholder=\"Search all columns...\"\n                              value={searchTerm}\n                              onChange={(e) => setSearchTerm(e.target.value)}\n                              className=\"pl-7 h-6 text-xs\"\n                              data-testid=\"input-search-data\"\n                            />\n                          </div>\n                          \n                          <div className=\"col-span-3 relative\">\n                            <Filter className=\"absolute left-2 top-1.5 h-3 w-3 text-muted-foreground\" />\n                            <Input\n                              placeholder=\"Filter columns...\"\n                              value={columnFilter}\n                              onChange={(e) => setColumnFilter(e.target.value)}\n                              className=\"pl-7 h-6 text-xs\"\n                            />\n                          </div>\n                          \n                          <div className=\"col-span-2\">\n                            <select\n                              value={maxRows}\n                              onChange={(e) => setMaxRows(Number(e.target.value))}\n                              className=\"h-6 w-full text-xs border rounded px-2 bg-background\"\n                              title=\"Rows to display\"\n                            >\n                              <option value={25}>25 rows</option>\n                              <option value={50}>50 rows</option>\n                              <option value={100}>100 rows</option>\n                              <option value={200}>200 rows</option>\n                            </select>\n                          </div>\n                          \n                          <div className=\"col-span-2\">\n                            <Badge variant=\"outline\" className=\"text-xs px-2 py-1 w-full justify-center\">\n                              {filteredData.length}/{Math.min(tableData.length, maxRows)}\n                            </Badge>\n                          </div>\n                          \n                          <div className=\"col-span-1 flex gap-1\">\n                            {(searchTerm || columnFilter) && (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => {\n                                  setSearchTerm('');\n                                  setColumnFilter('');\n                                }}\n                                className=\"h-6 px-1 text-xs\"\n                                title=\"Clear filters\"\n                              >\n                                ✕\n                              </Button>\n                            )}\n                          </div>\n                        </div>\n                        <Separator />\n                      </div>\n                    )}\n\n                    {/* Data Table */}\n                    {loading && tableData.length === 0 ? (\n                      <div className=\"text-center text-muted-foreground py-8\">\n                        <RefreshCw className=\"h-4 w-4 animate-spin mx-auto mb-2\" />\n                        <p className=\"text-xs\">Loading...</p>\n                      </div>\n                    ) : filteredData.length === 0 && tableData.length > 0 ? (\n                      <div className=\"text-center text-muted-foreground py-8\">\n                        <Search className=\"h-4 w-4 mx-auto mb-2 opacity-50\" />\n                        <p className=\"text-xs\">No matches</p>\n                      </div>\n                    ) : filteredData.length === 0 ? (\n                      <div className=\"text-center text-muted-foreground py-8\">\n                        <TableIcon className=\"h-4 w-4 mx-auto mb-2 opacity-50\" />\n                        <p className=\"text-xs\">No data</p>\n                      </div>\n                    ) : (\n                      <div className=\"w-full border rounded-sm bg-white dark:bg-gray-950 overflow-hidden\">\n                        {/* Table Container with Both Horizontal and Vertical Scroll */}\n                        <div className=\"overflow-x-auto max-w-full max-h-96 overflow-y-auto\">\n                          <div className=\"min-w-fit\">\n                            {/* Frozen Header */}\n                            <div className=\"bg-gray-100 dark:bg-gray-800 border-b border-gray-300 dark:border-gray-600 sticky top-0 z-10\">\n                              <div className=\"flex\">\n                                {/* S.No Header */}\n                                <div className=\"px-2 py-1 text-xs font-semibold border-r border-gray-300 dark:border-gray-600 whitespace-nowrap\" style={{ minWidth: '60px', width: 'auto' }}>\n                                  <span className=\"text-xs\">S.No</span>\n                                </div>\n                                {columns.map((column) => (\n                                  <div \n                                    key={column} \n                                    className=\"px-2 py-1 text-xs font-semibold cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700 border-r border-gray-300 dark:border-gray-600 last:border-r-0 whitespace-nowrap\"\n                                    style={{ minWidth: column === 'date_time' ? '150px' : '120px', width: 'auto' }}\n                                    onClick={() => handleSort(column)}\n                                  >\n                                    <div className=\"flex items-center justify-between\">\n                                      <span className=\"text-xs\">{column === 'date_time' ? 'Date & Time' : column}</span>\n                                      {sortColumn === column && (\n                                        <span className=\"text-xs ml-1 flex-shrink-0\">\n                                          {sortDirection === 'asc' ? '↑' : '↓'}\n                                        </span>\n                                      )}\n                                    </div>\n                                  </div>\n                                ))}\n                              </div>\n                            </div>\n                            \n                            {/* Data Rows */}\n                            <div>\n                              {filteredData.map((row, index) => (\n                                <div \n                                  key={index} \n                                  className={`flex hover:bg-blue-50 dark:hover:bg-blue-900/20 border-b border-gray-200 dark:border-gray-700 ${\n                                    index % 2 === 0 ? 'bg-white dark:bg-gray-950' : 'bg-gray-50 dark:bg-gray-900'\n                                  }`}\n                                >\n                                  {/* S.No Column */}\n                                  <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '60px', width: 'auto' }}>\n                                    <div className=\"text-xs\">{index + 1}</div>\n                                  </div>\n                                  {columns.map((column) => (\n                                    <div \n                                      key={column} \n                                      className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 last:border-r-0 whitespace-nowrap\"\n                                      style={{ minWidth: column === 'date_time' ? '150px' : '120px', width: 'auto' }}\n                                      title={String(row[column] || '')}\n                                    >\n                                      <div className=\"text-xs\">\n                                        {column === 'date_time' \n                                          ? new Date(row[column]).toLocaleString('en-GB', {\n                                              day: '2-digit',\n                                              month: '2-digit', \n                                              year: 'numeric',\n                                              hour: '2-digit',\n                                              minute: '2-digit',\n                                              second: '2-digit'\n                                            })\n                                          : String(row[column] || '')\n                                        }\n                                      </div>\n                                    </div>\n                                  ))}\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </>\n                ) : (\n                  <div className=\"text-center text-muted-foreground py-8\">\n                    <TableIcon className=\"h-6 w-6 mx-auto mb-2 opacity-50\" />\n                    <p className=\"text-sm\">Select a table</p>\n                    <p className=\"text-xs mt-1\">\n                      Choose from the sidebar\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n        )}\n\n        {/* Demo Data When Database Not Available */}\n        {!selectedDatabase && error && (\n          <Card>\n            <CardHeader className=\"pb-2\">\n              <CardTitle className=\"flex items-center text-sm\">\n                <ExternalLink className=\"h-3 w-3 mr-1\" />\n                Demo Data - kanchan_rej\n                <Badge variant=\"secondary\" className=\"ml-2 text-xs px-1 py-0\">\n                  100\n                </Badge>\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"mb-3 space-y-2\">\n                <div className=\"grid grid-cols-12 gap-2 items-center\">\n                  <div className=\"col-span-4 relative\">\n                    <Search className=\"absolute left-2 top-1.5 h-3 w-3 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Search all columns...\"\n                      className=\"pl-7 h-6 text-xs\"\n                    />\n                  </div>\n                  \n                  <div className=\"col-span-3 relative\">\n                    <Filter className=\"absolute left-2 top-1.5 h-3 w-3 text-muted-foreground\" />\n                    <Input\n                      placeholder=\"Filter columns...\"\n                      className=\"pl-7 h-6 text-xs\"\n                    />\n                  </div>\n                  \n                  <div className=\"col-span-2\">\n                    <select className=\"h-6 w-full text-xs border rounded px-2 bg-background\">\n                      <option value={100}>100 rows</option>\n                    </select>\n                  </div>\n                  \n                  <div className=\"col-span-2\">\n                    <Badge variant=\"outline\" className=\"text-xs px-2 py-1 w-full justify-center\">\n                      100/100\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"col-span-1\">\n                    <Button variant=\"outline\" size=\"sm\" className=\"h-6 px-2 text-xs\">\n                      <Download className=\"h-3 w-3 mr-1\" />\n                      CSV\n                    </Button>\n                  </div>\n                </div>\n                <Separator />\n              </div>\n\n              <div className=\"w-full border rounded-sm bg-white dark:bg-gray-950 overflow-hidden\">\n                {/* Table Container with Both Horizontal and Vertical Scroll */}\n                <div className=\"overflow-x-auto max-w-full max-h-96 overflow-y-auto\">\n                  <div className=\"min-w-fit\">\n                    {/* Demo Table Headers */}\n                    <div className=\"bg-gray-100 dark:bg-gray-800 border-b border-gray-300 dark:border-gray-600 sticky top-0 z-10\">\n                      <div className=\"flex\">\n                        {/* S.No Header */}\n                        <div className=\"px-2 py-1 text-xs font-semibold border-r border-gray-300 dark:border-gray-600 whitespace-nowrap\" style={{ minWidth: '60px', width: 'auto' }}>\n                          <span className=\"text-xs\">S.No</span>\n                        </div>\n                        {['date_time', 'rej_recovery', 'rej_feed', 'rej_1st_db', 'rej_1st_stg_fm', 'rej_1st_stg_in', 'rej_1st_stg_out', 'rej_2nd_stg_fm', 'rej_2nd_stg_in', 'rej_2nd_stg_out', 'rej_feed_lt', 'rej_ph_out'].map((column) => (\n                          <div \n                            key={column} \n                            className=\"px-2 py-1 text-xs font-semibold cursor-pointer hover:bg-gray-200 dark:hover:bg-gray-700 border-r border-gray-300 dark:border-gray-600 last:border-r-0 whitespace-nowrap\"\n                            style={{ minWidth: column === 'date_time' ? '150px' : '120px', width: 'auto' }}\n                          >\n                            <div className=\"flex items-center justify-between\">\n                              <span className=\"text-xs\">{column === 'date_time' ? 'Date & Time' : column}</span>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                    \n                    {/* Demo Data Rows */}\n                    <div>\n                      {Array.from({ length: 25 }, (_, index) => {\n                        const date = new Date(2023, 2, index + 1, 11, 20 + index * 4, 5 + index * 8);\n                        return (\n                          <div \n                            key={index} \n                            className={`flex hover:bg-blue-50 dark:hover:bg-blue-900/20 border-b border-gray-200 dark:border-gray-700 ${\n                              index % 2 === 0 ? 'bg-white dark:bg-gray-950' : 'bg-gray-50 dark:bg-gray-900'\n                            }`}\n                          >\n                            {/* S.No Column */}\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '60px', width: 'auto' }}>\n                              <div className=\"text-xs\">{index + 1}</div>\n                            </div>\n                            {/* Date & Time Column */}\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '150px', width: 'auto' }}>\n                              <div className=\"text-xs\">{date.toLocaleString('en-GB', {\n                                day: '2-digit',\n                                month: '2-digit', \n                                year: 'numeric',\n                                hour: '2-digit',\n                                minute: '2-digit',\n                                second: '2-digit'\n                              })}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(55 + Math.random() * 10).toFixed(1)}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(30 + Math.random() * 10).toFixed(1)}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(0.5 + Math.random() * 0.5).toFixed(1)}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(42 + Math.random() * 5).toFixed(1)}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(40 + Math.random() * 5).toFixed(1)}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(6 + Math.random() * 2).toFixed(1)}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(59 + Math.random() * 2).toFixed(1)}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(58 + Math.random() * 2).toFixed(1)}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(5.5 + Math.random() * 1).toFixed(1)}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(1.5 + Math.random() * 0.5).toFixed(1)}</div>\n                            </div>\n                            <div className=\"px-2 py-0.5 text-xs font-mono border-r border-gray-200 dark:border-gray-700 last:border-r-0 whitespace-nowrap\" style={{ minWidth: '120px', width: 'auto' }}>\n                              <div className=\"text-xs\">{(32 + Math.random() * 3).toFixed(1)}</div>\n                            </div>\n                          </div>\n                        );\n                      })}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n\n        {/* No Database Selected State */}\n        {!selectedDatabase && !error && (\n          <Card>\n            <CardContent className=\"text-center py-8\">\n              <Database className=\"h-8 w-8 mx-auto mb-3 opacity-50 text-muted-foreground\" />\n              <h3 className=\"text-sm font-medium mb-2\">Welcome to SQL Viewer</h3>\n              <p className=\"text-xs text-muted-foreground mb-4\">\n                Select a database above to explore your data\n              </p>\n              <div className=\"grid grid-cols-3 gap-3 max-w-lg mx-auto\">\n                <div className=\"text-center p-3 bg-muted/30 rounded\">\n                  <Search className=\"h-4 w-4 mx-auto mb-1 text-primary\" />\n                  <h4 className=\"text-xs font-medium mb-1\">Search</h4>\n                  <p className=\"text-xs text-muted-foreground\">Filter data</p>\n                </div>\n                <div className=\"text-center p-3 bg-muted/30 rounded\">\n                  <Download className=\"h-4 w-4 mx-auto mb-1 text-primary\" />\n                  <h4 className=\"text-xs font-medium mb-1\">Export</h4>\n                  <p className=\"text-xs text-muted-foreground\">CSV download</p>\n                </div>\n                <div className=\"text-center p-3 bg-muted/30 rounded\">\n                  <Filter className=\"h-4 w-4 mx-auto mb-1 text-primary\" />\n                  <h4 className=\"text-xs font-medium mb-1\">Filter</h4>\n                  <p className=\"text-xs text-muted-foreground\">Sort columns</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default SQLViewerPage;\n","size_bytes":36872}}}